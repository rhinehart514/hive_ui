# HIVE UI Architecture and Cross-Layer Integration Rules

## 1. Data Layer

### 1.1 Repository Pattern
- All data access MUST go through repository classes
- Repositories MUST be in `data/repositories` directory
- Repository interfaces MUST be in `domain/repositories`
- Naming convention: `{Feature}Repository` (e.g., `UserRepository`)
```dart
// Example Repository Structure
abstract class UserRepository {
  Future<User> getUser(String id);
  Future<void> updateUser(User user);
}

class UserRepositoryImpl implements UserRepository {
  final ApiClient _apiClient;
  final LocalStorage _storage;
  
  UserRepositoryImpl(this._apiClient, this._storage);
  
  @override
  Future<User> getUser(String id) async {
    try {
      return await _apiClient.getUser(id);
    } catch (e) {
      return _storage.getUser(id);
    }
  }
}
```

### 1.2 Data Transfer Objects (DTOs)
- All API responses MUST be mapped to DTOs
- DTOs MUST be immutable (use `@freezed` or `@immutable`)
- DTOs MUST have `toEntity()` and `fromEntity()` methods
- Place DTOs in `data/models` directory
```dart
@freezed
class UserDTO with _$UserDTO {
  const factory UserDTO({
    required String id,
    required String name,
    required String email,
  }) = _UserDTO;

  factory UserDTO.fromJson(Map<String, dynamic> json) => 
    _$UserDTOFromJson(json);

  User toEntity() => User(
    id: id,
    name: name,
    email: email,
  );
}
```

## 2. Domain Layer

### 2.1 Entities
- Entities MUST be immutable
- Place entities in `domain/entities`
- Use sealed classes for entity states
- Include validation logic in entity constructors
```dart
@freezed
class User with _$User {
  factory User({
    required String id,
    required String name,
    required String email,
  }) {
    // Validation
    if (email.isEmpty || !email.contains('@')) {
      throw InvalidEmailException();
    }
    return _User(id: id, name: name, email: email);
  }
}
```

### 2.2 Use Cases
- One primary action per use case
- Place in `domain/usecases`
- Must be injectable for dependency injection
- Return Either<Failure, Success> for error handling
```dart
@injectable
class GetUserUseCase {
  final UserRepository _repository;

  GetUserUseCase(this._repository);

  Future<Either<Failure, User>> call(String userId) async {
    try {
      final user = await _repository.getUser(userId);
      return Right(user);
    } on Exception catch (e) {
      return Left(Failure.fromException(e));
    }
  }
}
```

## 3. Presentation Layer

### 3.1 State Management
- Use Riverpod for state management
- Define state classes for each feature
- Handle loading, error, and success states
```dart
@freezed
class UserState with _$UserState {
  const factory UserState.initial() = _Initial;
  const factory UserState.loading() = _Loading;
  const factory UserState.loaded(User user) = _Loaded;
  const factory UserState.error(String message) = _Error;
}

final userNotifierProvider = StateNotifierProvider<UserNotifier, UserState>((ref) {
  return UserNotifier(ref.watch(userUseCaseProvider));
});
```

### 3.2 Controllers/Notifiers
- Place in `presentation/controllers`
- Keep UI logic separate from business logic
- Use dependency injection for use cases
```dart
@injectable
class UserNotifier extends StateNotifier<UserState> {
  final GetUserUseCase _getUserUseCase;

  UserNotifier(this._getUserUseCase) : super(const UserState.initial());

  Future<void> loadUser(String id) async {
    state = const UserState.loading();
    final result = await _getUserUseCase(id);
    state = result.fold(
      (failure) => UserState.error(failure.message),
      (user) => UserState.loaded(user),
    );
  }
}
```

## 4. Cross-Layer Communication

### 4.1 Dependency Injection
- Use `get_it` and `injectable` for DI
- Register dependencies in `di/injection.dart`
- Use factory for stateless dependencies
- Use singleton for shared resources
```dart
@InjectableInit()
void configureDependencies() => getIt.init();

@module
abstract class AppModule {
  @singleton
  ApiClient get apiClient => ApiClient();

  @factory
  UserRepository get userRepository => 
    UserRepositoryImpl(getIt<ApiClient>(), getIt<LocalStorage>());
}
```

### 4.2 Error Handling
- Define error types in `domain/errors`
- Use sealed classes for error hierarchies
- Propagate errors through Either type
```dart
sealed class Failure {
  final String message;
  const Failure(this.message);

  factory Failure.fromException(Exception e) {
    return switch (e) {
      NetworkException() => NetworkFailure(e.message),
      ValidationException() => ValidationFailure(e.message),
      _ => UnexpectedFailure(e.toString()),
    };
  }
}
```

## 5. Testing Strategy

### 5.1 Unit Tests
- Test each layer in isolation
- Mock dependencies using `mockito` or `mocktail`
- Test success and failure cases
```dart
void main() {
  late MockUserRepository mockRepository;
  late GetUserUseCase useCase;

  setUp(() {
    mockRepository = MockUserRepository();
    useCase = GetUserUseCase(mockRepository);
  });

  test('should return User when repository call is successful', () async {
    // Arrange
    when(() => mockRepository.getUser(any()))
        .thenAnswer((_) async => tUser);
    
    // Act
    final result = await useCase('user_id');
    
    // Assert
    expect(result.isRight(), true);
    result.fold(
      (l) => fail('should not return failure'),
      (r) => expect(r, equals(tUser)),
    );
  });
}
```

### 5.2 Integration Tests
- Test cross-layer interactions
- Use real implementations when possible
- Test complete features end-to-end
```dart
void main() {
  late UserRepository repository;
  late GetUserUseCase useCase;
  late UserNotifier notifier;

  setUp(() {
    repository = UserRepositoryImpl(realApiClient, realStorage);
    useCase = GetUserUseCase(repository);
    notifier = UserNotifier(useCase);
  });

  testWidgets('loads and displays user data', (tester) async {
    await tester.pumpWidget(
      ProviderScope(
        overrides: [
          userNotifierProvider.overrideWith(() => notifier),
        ],
        child: const UserProfileScreen(),
      ),
    );

    await notifier.loadUser('test_id');
    await tester.pumpAndSettle();

    expect(find.text('User Name'), findsOneWidget);
  });
}
```

## 6. Performance Considerations

### 6.1 Caching Strategy
- Implement caching at repository level
- Use in-memory cache for frequent access
- Implement proper cache invalidation
```dart
class CachedUserRepository implements UserRepository {
  final UserRepository _repository;
  final Cache<String, User> _cache;

  Future<User> getUser(String id) async {
    return await _cache.get(
      id,
      loader: () => _repository.getUser(id),
      maxAge: const Duration(minutes: 15),
    );
  }
}
```

### 6.2 Memory Management
- Dispose resources properly
- Clear caches when memory pressure is high
- Use weak references for large objects
```dart
class ResourceManager {
  final _disposables = <Disposable>[];

  void register(Disposable disposable) {
    _disposables.add(disposable);
  }

  Future<void> dispose() async {
    for (final disposable in _disposables) {
      await disposable.dispose();
    }
    _disposables.clear();
  }
}
```

## 7. Security

### 7.1 Data Protection
- Encrypt sensitive data at rest
- Use secure storage for credentials
- Implement proper token management
```dart
class SecureStorage {
  final FlutterSecureStorage _storage;

  Future<void> saveToken(String token) async {
    await _storage.write(
      key: 'auth_token',
      value: token,
      aOptions: const AndroidOptions(encryptedSharedPreferences: true),
    );
  }
}
```

### 7.2 Input Validation
- Validate all user input
- Sanitize data before storage
- Implement rate limiting for API calls
```dart
class InputValidator {
  static Either<ValidationFailure, String> validateEmail(String email) {
    if (email.isEmpty || !email.contains('@')) {
      return Left(ValidationFailure('Invalid email format'));
    }
    return Right(email.trim());
  }
}
``` 