# Cursor IDE Optimization for HIVE UI

## 1. Smart Navigation Patterns

### 1.1 Feature-First Navigation
- Use semantic search for feature exploration:
  ```
  "Show me all auth related entities"
  "Find user repository implementations"
  "List all presentation widgets for profile feature"
  ```
- Navigate between layer files using quick commands:
  ```
  Entity ↔ DTO
  Repository Interface ↔ Implementation
  ViewModel ↔ Widget
  ```

### 1.2 Directory Structure Navigation
```
features/
  ├── auth/
  │   ├── data/
  │   ├── domain/
  │   └── presentation/
  └── profile/
      ├── data/
      ├── domain/
      └── presentation/
```
- Use `Ctrl+P` for quick file navigation
- Use `Ctrl+Shift+F` for full-text search across layers
- Use semantic search for context-aware code finding

## 2. Code Generation Workflow

### 2.1 Generation Commands
```bash
# Quick access commands for Cursor terminal
flutter pub run build_runner build --delete-conflicting-outputs
flutter pub run build_runner watch
```

### 2.2 Generated Code Protection
```dart
// @generated - Never edit these files directly
part 'user.freezed.dart';
part 'user.g.dart';

// Source files only
@freezed
class User with _$User {
  const factory User({
    required String id,
    required String name,
  }) = _User;
}
```

## 3. Layer-Aware Development

### 3.1 Domain Layer
```dart
// Cursor enforces pure domain logic
class User {
  final String id;
  final String name;
  
  bool canPerformAction() {
    // Pure business logic only
    return true;
  }
}
```

### 3.2 Data Layer
```dart
// Cursor maintains DTO patterns
@JsonSerializable()
class UserDTO {
  final String id;
  final String name;

  factory UserDTO.fromJson(Map<String, dynamic> json) => 
      _$UserDTOFromJson(json);
}
```

### 3.3 Presentation Layer
```dart
// Cursor enforces widget patterns
class UserProfilePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer(
      builder: (context, ref, _) {
        final userState = ref.watch(userProfileProvider);
        // Cursor suggests proper state handling
        return userState.when(...);
      },
    );
  }
}
```

## 4. Smart Code Completion

### 4.1 Layer-Specific Imports
```dart
// Domain layer imports
import '../entities/user.dart';

// Data layer imports
import '../models/user_dto.dart';

// Presentation layer imports
import '../widgets/user_card.dart';
```

### 4.2 Pattern Completion
```dart
// Cursor suggests common patterns
class UserRepository implements IUserRepository {
  @override
  Future<Either<Failure, User>> getUser(String id) async {
    try {
      // Cursor suggests error handling pattern
      final dto = await _dataSource.getUser(id);
      return Right(_mapper.toDomain(dto));
    } on Exception catch (e) {
      return Left(Failure.fromException(e));
    }
  }
}
```

## 5. Real-Time Validation

### 5.1 Architecture Rules
```dart
// ❌ Cursor warns about layer violations
class UserEntity {
  void showDialog() { ... }  // UI in domain layer
}

// ✅ Cursor confirms correct patterns
class UserEntity {
  bool canPerformAction() { ... }  // Pure domain logic
}
```

### 5.2 Pattern Enforcement
```dart
// Cursor enforces state management patterns
class UserViewModel extends StateNotifier<UserState> {
  UserViewModel() : super(const UserState());
  
  void updateUser(User user) {
    state = state.copyWith(user: user);  // Immutable updates
  }
}
```

## 6. Testing Support

### 6.1 Test File Generation
```dart
// Cursor generates test structure
group('UserRepository', () {
  late UserRepository sut;
  late MockUserDataSource mockDataSource;
  
  setUp(() {
    mockDataSource = MockUserDataSource();
    sut = UserRepository(dataSource: mockDataSource);
  });
});
```

### 6.2 Test Navigation
- Quick jumps between implementation and test files
- Automatic test file creation maintaining project structure
- Smart completion for test cases based on implementation

## 7. Documentation

### 7.1 Auto-Documentation
```dart
/// Cursor generates structured documentation
/// 
/// Parameters:
/// - [id]: Unique identifier for the user
/// - [name]: User's display name
/// 
/// Returns an [Either] with [User] on success or [Failure] on error
Future<Either<Failure, User>> getUser({
  required String id,
  required String name,
}) async
```

### 7.2 Documentation Validation
- Ensures HIVE documentation standards
- Validates parameter documentation
- Checks return value documentation
- Maintains consistency across components

## 8. Keyboard Shortcuts

### 8.1 Navigation Shortcuts
- `Ctrl+P`: Quick file navigation
- `Ctrl+Shift+F`: Full-text search
- `Alt+Left/Right`: Navigate between files
- `Ctrl+Click`: Go to definition

### 8.2 Code Generation Shortcuts
- `Ctrl+Shift+B`: Run build_runner
- `Ctrl+.`: Quick fixes and refactoring
- `F2`: Rename symbol
- `Alt+Enter`: Show context actions 