rules_version = '2';

// IMPORTANT: In the Hive UI codebase, "clubs" are represented in Firestore as "spaces" 
// across multiple collections. This is a critical point to understand when checking permissions.
// This rules file has been optimized to:
// 1. Allow authenticated users to read spaces/clubs during and after onboarding
// 2. Enable collectionGroup queries on "spaces" and "events" which are essential for the main feed
// 3. Simplify authentication checks where appropriate to prevent permission errors
// 4. Maintain security while ensuring the app functions properly

service cloud.firestore {
  match /databases/{database}/documents {
    // ======== HELPER FUNCTIONS ========
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator';
    }
    
    function isSpaceAdmin(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.admins;
    }
    
    function isSpaceModerator(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.moderators;
    }
    
    function isSpaceMember(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members;
    }
    
    // Space related helpers - optimized for performance
    function isSpaceLeader(spaceId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/space_leader_index/$(request.auth.uid + "_" + spaceId))
      );
    }
    
    // Club related helpers
    function isClubMember(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_member_index/$(request.auth.uid + "_" + clubId));
    }
    
    function isClubLeader(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_leader_index/$(request.auth.uid + "_" + clubId));
    }
    
    // Content privacy helpers
    function isSpacePublic(spaceId) {
      return exists(/databases/$(database)/documents/space_privacy/$(spaceId)) &&
             get(/databases/$(database)/documents/space_privacy/$(spaceId)).data.isPublic == true;
    }
    
    function isEventPublic(eventId) {
      return exists(/databases/$(database)/documents/event_privacy/$(eventId)) &&
             get(/databases/$(database)/documents/event_privacy/$(eventId)).data.isPublic == true;
    }
    
    function isClubPublic(clubId) {
      return !exists(/databases/$(database)/documents/club_privacy/$(clubId)) ||
             get(/databases/$(database)/documents/club_privacy/$(clubId)).data.isPublic == true;
    }
    
    // Relationship helper
    function areFriends(userId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/friend_index/$(request.auth.uid + "_" + userId))
      );
    }
    
    // Content creation rate limiting
    function isRateLimited(collection) {
      return request.time < resource.data.lastActionTime + duration.value(1, 's');
    }
    
    // Validation helpers
    function isValidSpaceData(data) {
      return data.name is string && 
             data.name.size() > 0 && 
             data.name.size() <= 100 &&
             data.description is string;
    }
    
    function isValidEventData(data) {
      return data.title is string && 
             data.title.size() > 0 && 
             data.title.size() <= 100 &&
             (data.startDate is timestamp || data.startTime is timestamp) &&
             (data.endDate is timestamp || data.endTime is timestamp);
    }
    
    function isValidClubData(data) {
      return data.name is string &&
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.description is string;
    }
    
    // ======== COLLECTION GROUP QUERIES ========
    
    // Allow collection group query for spaces with additional access for onboarding
    match /{path=**}/spaces/{spaceId} {
      // This rule specifically enables collectionGroup("spaces") queries
      // Especially useful during onboarding when listing all available spaces
      allow read: if isAuthenticated();
    }
    
    // Allow access to events via collection group queries
    match /{path=**}/events/{eventId} {
      // Enable collectionGroup("events") queries for all authenticated users
      allow read: if isAuthenticated();
    }
    
    // ======== USER MANAGEMENT ========
    
    // Public user profile index - for discoverability
    match /public_user_index/{userId} {
      allow read: if true; // Public profile index is readable by anyone
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Users collection with improved access rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // User rate limiting document
    match /user_rate_limits/{userId} {
      allow read: if isOwner(userId);
      allow write: if isAdmin();
    }
    
    // Admin users collection
    match /admin_users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Moderator users collection
    match /moderator_users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User session persistence
    match /user_sessions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ======== FEED OPTIMIZATION ========
    
    // Feed cache for faster main feed loading
    // This collection contains pre-computed feed data to minimize reads
    match /feed_cache/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      // Only system processes should write to feed cache
      allow write: if isAdmin();
    }
    
    // Public events index for main feed (contains minimal event data)
    match /public_events_index/{eventId} {
      // Public events are readable by anyone to make main feed efficient
      allow read: if true;
      // Only admins and event creators can update the public index
      allow write: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId || isAdmin()
      );
    }
    
    // Public spaces index for main feed (contains minimal space data)
    match /public_spaces_index/{spaceId} {
      // Public spaces are readable by anyone to make main feed efficient
      allow read: if true;
      // Only space leaders and admins can update the public index
      allow write: if isAuthenticated() && (
        isSpaceLeader(spaceId) || isAdmin()
      );
    }
    
    // Public clubs index for main feed (contains minimal club data)
    match /public_clubs_index/{clubId} {
      // Public clubs are readable by anyone to make main feed efficient
      allow read: if true;
      // Only club leaders and admins can update the public index
      allow write: if isAuthenticated() && (
        isClubLeader(clubId) || isAdmin()
      );
    }
    
    // ======== SPACE MANAGEMENT ========
    
    // Space privacy settings - optimized for quick access
    match /space_privacy/{spaceId} {
      allow read: if true;
      allow write: if isAuthenticated() && (isSpaceLeader(spaceId) || isAdmin());
    }
    
    // Space leader index - for quick leader verification
    match /space_leader_index/{indexId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Space member index - for quick member verification
    match /space_member_index/{indexId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        indexId.split('_')[0] == request.auth.uid || 
        isSpaceLeader(indexId.split('_')[1]) || 
        isAdmin()
      );
    }
    
    // Space discovery index - for browsable directory
    match /space_discovery/{spaceId} {
      allow read: if true; // Allow public discovery even for guest users
      allow write: if isAuthenticated() && (isSpaceLeader(spaceId) || isAdmin());
    }
      
    // Structured spaces collection - enhanced for onboarding
    match /spaces/{typeCollection} {
      // Type collection document is always readable
      allow read: if true; // Allow reading space categories without auth
      allow write: if isAdmin();
      
      match /spaces/{spaceId} {
        // Space document access - improved for onboarding
        allow read: if true; // Allow all users to read spaces for better discovery
        allow create: if isAuthenticated() && 
                       isValidSpaceData(request.resource.data) &&
                       // Enforce that spaces start as private
                       request.resource.data.isPrivate == true &&
                       // Ensure creator is admin
                       request.auth.uid in request.resource.data.admins;
        allow update: if isAuthenticated() && 
                      (isSpaceLeader(spaceId) || 
                       isAdmin()) &&
                      // Enforce privacy rule: spaces with fewer than 10 members must be private
                      (!('isPrivate' in request.resource.data) || 
                        request.resource.data.isPrivate == true || 
                        (request.resource.data.isPrivate == false && 
                         (request.resource.data.members.size() >= 10 || 
                          resource.data.members.size() >= 10)));
        allow delete: if isAuthenticated() && isAdmin();
        
        // Space events - for feed display
        match /events/{eventId} {
          allow read: if true; // Allow all users to read events
          allow create: if isAuthenticated() && (
                        isSpaceMember(spaceId) || 
                        isAdmin()
                      );
          allow update, delete: if isAuthenticated() && (
                               request.auth.uid == resource.data.creatorId || 
                               isSpaceLeader(spaceId) || 
                               isAdmin()
                             );
        }
        
        // Members subcollection
        match /members/{userId} {
          allow read: if isAuthenticated();
          allow create, update: if isAuthenticated() && (
                               isAdmin() || 
                               isSpaceLeader(spaceId) ||
                               (isOwner(userId) && request.resource.data.roles == null)
                             );
          allow delete: if isAuthenticated() && (
                        isAdmin() || 
                        isSpaceLeader(spaceId)
                      );
        }
        
        // Membership requests - for requesting to join private spaces
        match /membership_requests/{requestId} {
          allow read: if isAuthenticated() && (
                      request.auth.uid == resource.data.userId || 
                      isSpaceLeader(spaceId) || 
                      isAdmin()
                    );
          allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
          allow update: if isAuthenticated() && (
                        isSpaceLeader(spaceId) || 
                        isAdmin()
                      );
          allow delete: if isAuthenticated() && (
                        request.auth.uid == resource.data.userId || 
                        isSpaceLeader(spaceId) || 
                        isAdmin()
                      );
        }
        
        // Announcements subcollection
        match /announcements/{announcementId} {
          allow read: if isAuthenticated();
          allow create, update, delete: if isAuthenticated() && (
                                       isSpaceLeader(spaceId) || 
                                       isAdmin()
                                     );
        }
        
        // Content moderation reports
        match /reports/{reportId} {
          allow read: if isAuthenticated() && (
                      isSpaceLeader(spaceId) || 
                      isModerator() || 
                      isAdmin()
                    );
          allow create: if isAuthenticated() && 
                       isSpaceMember(spaceId);
          allow update, delete: if isAuthenticated() && (
                               isSpaceLeader(spaceId) || 
                               isModerator() || 
                               isAdmin()
                             );
        }
      }
    }
    
    // Legacy spaces support - Enhanced read access for onboarding
    match /spaces/{spaceId} {
      allow read: if true; // Allow all users to read spaces for better discovery
      allow create: if isAuthenticated() && isValidSpaceData(request.resource.data);
      allow update: if isAuthenticated() && (
                     isSpaceLeader(spaceId) || 
                     isAdmin()
                   );
      allow delete: if isAdmin();
      
      // Legacy events subcollection - Enhanced read access
      match /events/{eventId} {
        allow read: if true; // Allow all users to read events
        allow create: if isAuthenticated() && (
                      isSpaceMember(spaceId) || 
                      isAdmin()
                    );
        allow update, delete: if isAuthenticated() && (
                             request.auth.uid == resource.data.creatorId || 
                             isSpaceLeader(spaceId) || 
                             isAdmin()
                           );
      }
      
      // Legacy members subcollection - Enhanced read access
      match /members/{userId} {
        allow read: if isAuthenticated();
        allow create, update: if isAuthenticated() && (
                             isAdmin() || 
                             isSpaceLeader(spaceId) ||
                             (isOwner(userId) && request.resource.data.roles == null)
                           );
        allow delete: if isAuthenticated() && (
                      isAdmin() || 
                      isSpaceLeader(spaceId)
                    );
      }
    }
    
    // ======== CLUB MANAGEMENT ========
    
    // Club privacy settings
    match /club_privacy/{clubId} {
      allow read: if true;
      allow write: if isAuthenticated() && (isClubLeader(clubId) || isAdmin());
    }
    
    // Club leader index - for quick leader verification
    match /club_leader_index/{indexId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Club member index - for quick member verification
    match /club_member_index/{indexId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        indexId.split('_')[0] == request.auth.uid || 
        isClubLeader(indexId.split('_')[1]) || 
        isAdmin()
      );
    }
    
    // Club discovery index - for browsable directory
    match /club_discovery/{clubId} {
      allow read: if true;
      allow write: if isAuthenticated() && (isClubLeader(clubId) || isAdmin());
    }
    
    // Add rule for collectionGroup query on clubs
    match /{path=**}/clubs/{clubId} {
      allow read: if true; // Allow all users to read clubs for better discovery
    }
    
    // Clubs collection - top level
    match /clubs/{clubId} {
      allow read: if true; // Clubs are publicly readable in the feed
      allow create: if isAuthenticated() && isValidClubData(request.resource.data);
      allow update: if isAuthenticated() && (isClubLeader(clubId) || isAdmin());
      allow delete: if isAdmin();
      
      // Members subcollection
      match /members/{userId} {
        allow read: if true; // Membership is public information
        allow create, update: if isAuthenticated() && (
                             isAdmin() || 
                             isClubLeader(clubId) ||
                             isOwner(userId)
                           );
        allow delete: if isAuthenticated() && (
                      isAdmin() || 
                      isClubLeader(clubId) ||
                      isOwner(userId)
                    );
      }
      
      // Events subcollection
      match /events/{eventId} {
        allow read: if true; // Club events are public
        allow create: if isAuthenticated() && (
                     isClubMember(clubId) || isAdmin()
                   ) && isValidEventData(request.resource.data);
        allow update: if isAuthenticated() && (
                     request.auth.uid == resource.data.creatorId || 
                     isClubLeader(clubId) || 
                     isAdmin()
                   );
        allow delete: if isAuthenticated() && (
                     request.auth.uid == resource.data.creatorId || 
                     isClubLeader(clubId) || 
                     isAdmin()
                   );
      }
    }
    
    // Structured clubs by branch (for organizing clubs into categories)
    match /clubs/{branchName}/entities/{clubId} {
      allow read: if true;
      allow create: if isAuthenticated() && isValidClubData(request.resource.data);
      allow update: if isAuthenticated() && (isClubLeader(clubId) || isAdmin());
      allow delete: if isAdmin();
      
      // All subcollections share the same permissions
      match /{collection}/{docId} {
        allow read: if true;
        allow create: if isAuthenticated() && (isClubMember(clubId) || isAdmin());
        allow update, delete: if isAuthenticated() && (
                             request.auth.uid == resource.data.creatorId || 
                             isClubLeader(clubId) || 
                             isAdmin()
                           );
      }
    }
    
    // ======== EVENT MANAGEMENT ========
    
    // Event privacy settings
    match /event_privacy/{eventId} {
      allow read: if true;
      allow write: if isAuthenticated() && (
        request.auth.uid == get(/databases/$(database)/documents/events/$(eventId)).data.creatorId || 
        isAdmin()
      );
    }
    
    // Global events collection - improved permissions for onboarding and feed
    match /events/{eventId} {
      // Allow all users to read events (needed for feed display)
      allow read: if true;
                   
      allow create: if isAuthenticated() && isValidEventData(request.resource.data);
      allow update: if isAuthenticated() && (
                     request.auth.uid == resource.data.creatorId || 
                     isAdmin()
                   );
      allow delete: if isAuthenticated() && (
                     request.auth.uid == resource.data.creatorId || 
                     isAdmin()
                   );
      
      // Event RSVPs - simplified for better access
      match /rsvps/{userId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Lost events collection - for events without a clear home
    match /lost_events/{eventId} {
      allow read: if true; // Anyone can read lost events to display in feed
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
    }
    
    // Event comments
    match /event_comments/{eventId} {
      allow read: if true;
      
      match /comments/{commentId} {
        allow read: if true; // Comments are public
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
                             request.auth.uid == resource.data.userId || 
                             isAdmin() || 
                             isModerator()
                           );
      }
    }
    
    // ======== TRENDING CONTENT ========
    
    // Optimized collection for trending events
    match /trending/{contentId} {
      // Anyone can read trending content
      allow read: if true;
      // Only admin can update trending content
      allow write: if isAdmin();
    }
    
    // User activity stats for generating recommendations
    match /user_activity_stats/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Only the backend should write to this
      allow write: if isAdmin();
    }
    
    // ======== MESSAGING SYSTEM ========
    
    // Friend index for quick lookup
    match /friend_index/{indexId} {
      allow read: if isAuthenticated() && indexId.split('_')[0] == request.auth.uid;
      allow write: if isAdmin();
    }
    
    // Friend requests
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.senderId || 
                   request.auth.uid == resource.data.receiverId || 
                   isAdmin()
                 );
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.senderId && 
                   !isRateLimited('friend_requests');
      allow update, delete: if isAuthenticated() && (
                           request.auth.uid == resource.data.senderId || 
                           request.auth.uid == resource.data.receiverId || 
                           isAdmin()
                         );
    }
    
    // Friends collection
    match /friends/{friendshipId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.userId || 
                   request.auth.uid == resource.data.friendId || 
                   isAdmin()
                 );
      allow create, update, delete: if isAuthenticated() && (
                                   request.auth.uid == request.resource.data.userId || 
                                   request.auth.uid == request.resource.data.friendId || 
                                   isAdmin()
                                 );
    }
    
    // Chat collection
    match /chats/{chatId} {
      // Helper function to verify chat participation
      function isParticipant() {
        return isAuthenticated() && (
          resource.data.participantIds == null || 
          request.auth.uid in resource.data.participantIds
        );
      }
      
      allow read: if isAuthenticated() && (isParticipant() || isAdmin());
      allow create: if isAuthenticated() && 
                   request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuthenticated() && (isParticipant() || isAdmin());
      allow delete: if isAdmin();
      
      // Chat messages - with optimized pagination
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds || 
                     isAdmin()
                   );
        allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.senderId && 
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds && 
                     request.resource.data.text.size() <= 2000;
        allow update: if isAuthenticated() && 
                     request.auth.uid == resource.data.senderId && 
                     resource.data.timestamp.toMillis() > (request.time.toMillis() - 300000); // 5 minute edit window
        allow delete: if isAuthenticated() && (
                       request.auth.uid == resource.data.senderId || 
                       isAdmin()
                     );
      }
      
      // Typing indicators - more restricted to prevent spam
      match /typing/{userId} {
        allow read: if isAuthenticated() && 
                   request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
        allow write: if isAuthenticated() && 
                    userId == request.auth.uid && 
                    request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }
    }
    
    // ======== REPORTING AND MODERATION ========
    
    // Content reports
    match /content_reports/{reportId} {
      allow read: if isAuthenticated() && (isModerator() || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (isModerator() || isAdmin());
    }
    
    // User reports
    match /user_reports/{reportId} {
      allow read: if isAuthenticated() && (isModerator() || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid != request.resource.data.reportedUserId;
      allow update, delete: if isAuthenticated() && (isModerator() || isAdmin());
    }
    
    // ======== SYSTEM COLLECTIONS ========
    
    // User activities (optimized to minimize reads)
    match /user_activities/{activityId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.userId || 
                   isAdmin()
                 );
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // Metadata and system collections
    match /metadata/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Leadership requests and verifications
    match /leadership_requests/{requestId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.userId || 
                   isAdmin()
                 );
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    match /leadership_verifications/{verificationId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.userId || 
                   isAdmin()
                 );
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
    }
    
    // Auth conversions - restricted access
    match /auth_conversions/{docId} {
      allow read: if isAuthenticated() && (
                   request.auth.uid == resource.data.userId || 
                   isAdmin()
                 );
      allow write: if isAdmin();
    }
    
    // User-Spaces relationship collection rules
    match /user_spaces/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Space metrics collection rules
    match /space_metrics/{spaceId} {
      allow read: if isAuthenticated();
      allow write: if 
        isAuthenticated() && 
        exists(/databases/$(database)/documents/spaces/$(spaceId)) &&
        isSpaceAdmin(spaceId);
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 