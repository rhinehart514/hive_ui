rules_version = '2';

// HIVE UI Platform - Comprehensive Firestore Security Rules
// This ruleset is designed to secure all Firestore collections while enabling
// proper functionality across the HIVE platform.

service cloud.firestore {
  match /databases/{database}/documents {
    // ======== HELPER FUNCTIONS ========
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Role-based access checks
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function hasRole(minimumRole) {
      let roleValue = {
        'public': 0,
        'verified': 1,
        'verifiedPlus': 2,
        'moderator': 3,
        'admin': 4
      };
      let userRole = getUserRole();
      return roleValue[userRole] >= roleValue[minimumRole];
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return hasRole('moderator');
    }
    
    function isVerifiedPlus() {
      return hasRole('verifiedPlus');
    }
    
    function isVerified() {
      return hasRole('verified');
    }
    
    function isVerifiedEmail() {
      return isAuthenticated() && request.auth.token.email_verified;
    }
    
    // Space/Club related helpers (optimized for performance)
    function isSpaceAdmin(spaceId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/space_admin_index/$(request.auth.uid + "_" + spaceId));
    }
    
    function isSpaceModerator(spaceId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/space_moderator_index/$(request.auth.uid + "_" + spaceId));
    }
    
    function isSpaceMember(spaceId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/space_member_index/$(request.auth.uid + "_" + spaceId));
    }
    
    function isSpaceLeader(spaceId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/space_leader_index/$(request.auth.uid + "_" + spaceId));
    }
    
    function isClubMember(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_member_index/$(request.auth.uid + "_" + clubId));
    }
    
    function isClubLeader(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_leader_index/$(request.auth.uid + "_" + clubId));
    }
    
    // Content privacy helpers
    function isSpacePublic(spaceId) {
      return exists(/databases/$(database)/documents/space_privacy/$(spaceId)) &&
             get(/databases/$(database)/documents/space_privacy/$(spaceId)).data.isPublic == true;
    }
    
    function isEventPublic(eventId) {
      return exists(/databases/$(database)/documents/event_privacy/$(eventId)) &&
             get(/databases/$(database)/documents/event_privacy/$(eventId)).data.isPublic == true;
    }
    
    function isClubPublic(clubId) {
      return !exists(/databases/$(database)/documents/club_privacy/$(clubId)) ||
             get(/databases/$(database)/documents/club_privacy/$(clubId)).data.isPublic == true;
    }
    
    // Relationship helpers
    function areFriends(userId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/friend_index/$(request.auth.uid + "_" + userId));
    }
    
    function isChatParticipant(chatId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/chats/$(chatId)) &&
             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
    }
    
    // Rate limiting helper functions
    function isRateLimited(collectionName) {
      let userId = request.auth.uid;
      let limitPath = /databases/$(database)/documents/rate_limits/$(userId);
      let now = request.time;
      let threshold = Duration.value(1, 'h');
      
      return exists(limitPath) &&
             get(limitPath).data[collectionName + '_last_write'] > now - threshold &&
             get(limitPath).data[collectionName + '_count'] >= 10;
    }
    
    // Event state and temporal validation
    function getEventState(eventId) {
      let event = get(/databases/$(database)/documents/events/$(eventId)).data;
      let now = request.time.toMillis();
      let startTime = event.startDate.toMillis();
      let endTime = event.endDate != null ? event.endDate.toMillis() : startTime + Duration.value(2, 'h').seconds() * 1000;
      let postEventWindow = 12 * 60 * 60 * 1000; // 12 hours in milliseconds
      
      // Determine state based on times
      if (event.published != true) {
        return 'draft';
      } else if (now < startTime) {
        return 'published';
      } else if (now >= startTime && now <= endTime) {
        return 'live';
      } else if (now > endTime && now <= endTime + postEventWindow) {
        return 'completed';
      } else {
        return 'archived';
      }
    }
    
    function canEditEventDetails(eventId) {
      let event = get(/databases/$(database)/documents/events/$(eventId)).data;
      let eventState = getEventState(eventId);
      let isCreator = request.auth.uid == event.createdBy;
      
      return (eventState == 'draft') || 
             (eventState == 'published' && isCreator) ||
             (eventState == 'live' && isAdmin());
    }
    
    function isEditingCoreEventDetails() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['startDate', 'endDate', 'location', 'title']);
    }
    
    // Validation helper functions
    function isValidEventData(data) {
      return data.title is string && 
             data.title.size() > 0 &&
             data.title.size() <= 100 &&
             data.createdBy is string && 
             data.createdBy == request.auth.uid &&
             data.startDate is timestamp && 
             data.startDate > request.time;
    }
    
    function isValidSpaceData(data) {
      return data.name is string && 
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.createdBy is string && 
             data.createdBy == request.auth.uid;
    }
    
    function isValidClubData(data) {
      return data.name is string && 
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.description is string;
    }
    
    function isValidChatMessageData(data) {
      return data.text is string &&
             data.senderId is string &&
             data.senderId == request.auth.uid &&
             data.timestamp is timestamp;
    }
    
    // ======== COLLECTION GROUP QUERIES ========
    
    // Enable collection group queries for spaces (important for discovery/onboarding)
    match /{path=**}/spaces/{spaceId} {
      allow read: if isAuthenticated();
    }
    
    // Enable collection group queries for events (main feed functionality)
    match /{path=**}/events/{eventId} {
      allow read: if isAuthenticated();
    }
    
    // Enable collection group queries for posts
    match /{path=**}/posts/{postId} {
      allow read: if isAuthenticated() && 
                  (!resource.data.isHidden || 
                   resource.data.authorId == request.auth.uid || 
                   isModerator() || 
                   isAdmin());
    }
    
    // ======== USER MANAGEMENT ========
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && 
                     !exists(/databases/$(database)/documents/users/$(userId));
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // User profiles
    match /user_profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Public user index - for discoverability
    match /public_user_index/{userId} {
      allow read: if true; // Public profile index is readable by anyone
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // User sessions
    match /user_sessions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User rate limits
    match /rate_limits/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isAdmin() || (isOwner(userId) && !isRateLimited('rate_limits'));
      allow delete: if isAdmin();
    }
    
    // User authentication records
    match /auth_records/{userId} {
      allow read: if isOwner(userId);
      allow write: if isAdmin();
    }
    
    // User settings
    match /user_settings/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // User notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAdmin();
    }
    
    // ======== SPACES/CLUBS MANAGEMENT ========
    
    // Spaces collection
    match /spaces/{spaceId} {
      allow read: if isAuthenticated() && (
                    isSpacePublic(spaceId) || 
                    isSpaceMember(spaceId) || 
                    isSpaceLeader(spaceId) || 
                    isAdmin()
                  );
      
      allow create: if isAuthenticated() && 
                    isVerified() && 
                    isValidSpaceData(request.resource.data);
      
      allow update: if isAuthenticated() && (
                    isSpaceLeader(spaceId) || 
                    isAdmin());
      
      allow delete: if isAuthenticated() && (
                    isAdmin() || 
                    (isSpaceLeader(spaceId) && resource.data.deletable == true));
      
      // Space events subcollection
      match /events/{eventId} {
        allow read: if isAuthenticated() && (
                    isEventPublic(eventId) || 
                    isSpaceMember(spaceId) || 
                    isAdmin());
        
        allow create: if isAuthenticated() && 
                     isVerified() && 
                     isSpaceMember(spaceId) && 
                     isValidEventData(request.resource.data);
        
        allow update: if isAuthenticated() && (
                      (request.auth.uid == resource.data.createdBy && 
                      canEditEventDetails(eventId) && 
                      (!isEditingCoreEventDetails() || getEventState(eventId) == 'draft')) ||
                      isAdmin()
                     );
        
        allow delete: if isAuthenticated() && (
                      (request.auth.uid == resource.data.createdBy && 
                      getEventState(eventId) == 'draft') || 
                      isAdmin()
                     );
        
        // Event RSVPs subcollection
        match /rsvps/{userId} {
          allow read: if isAuthenticated();
          allow create, update: if isAuthenticated() && 
                                isOwner(userId) && 
                                getEventState(eventId) != 'archived';
          allow delete: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin());
        }
        
        // Event comments subcollection
        match /comments/{commentId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid &&
                       getEventState(eventId) != 'archived';
          allow update, delete: if isAuthenticated() && 
                               (resource.data.authorId == request.auth.uid || 
                                isAdmin() || 
                                isSpaceModerator(spaceId));
        }
      }
      
      // Space posts subcollection
      match /posts/{postId} {
        allow read: if isAuthenticated() && (
                    isSpaceMember(spaceId) || 
                    isSpacePublic(spaceId));
        
        allow create: if isAuthenticated() && 
                     isSpaceMember(spaceId) && 
                     request.resource.data.authorId == request.auth.uid;
        
        allow update: if isAuthenticated() && (
                     resource.data.authorId == request.auth.uid || 
                     isSpaceAdmin(spaceId) || 
                     isAdmin());
        
        allow delete: if isAuthenticated() && (
                     resource.data.authorId == request.auth.uid || 
                     isSpaceAdmin(spaceId) || 
                     isAdmin());
        
        // Post comments subcollection
        match /comments/{commentId} {
          allow read: if isAuthenticated() && (
                      isSpaceMember(spaceId) || 
                      isSpacePublic(spaceId));
          
          allow create: if isAuthenticated() && 
                       isSpaceMember(spaceId) && 
                       request.resource.data.authorId == request.auth.uid;
          
          allow update, delete: if isAuthenticated() && (
                               resource.data.authorId == request.auth.uid || 
                               isSpaceAdmin(spaceId) || 
                               isAdmin());
        }
      }
      
      // Space members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && (
                    isSpaceMember(spaceId) || 
                    isSpaceAdmin(spaceId) || 
                    isAdmin());
        
        allow create: if isAuthenticated() && (
                     (request.resource.data.userId == request.auth.uid && isSpacePublic(spaceId)) || 
                     isSpaceAdmin(spaceId) || 
                     isAdmin());
        
        allow update: if isAuthenticated() && (
                     isSpaceAdmin(spaceId) || 
                     isAdmin());
        
        allow delete: if isAuthenticated() && (
                     (resource.data.userId == request.auth.uid) || 
                     isSpaceAdmin(spaceId) || 
                     isAdmin());
      }
    }
    
    // ======== CLUBS MANAGEMENT ========
    
    // Clubs collection
    match /clubs/{clubId} {
      allow read: if isAuthenticated() && (
                  isClubPublic(clubId) || 
                  isClubMember(clubId) || 
                  isAdmin());
      
      allow create: if isAuthenticated() && 
                    isVerified() && 
                    isValidClubData(request.resource.data) && 
                    request.resource.data.createdBy == request.auth.uid;
      
      allow update: if isAuthenticated() && (
                   isClubLeader(clubId) || 
                   isAdmin());
      
      allow delete: if isAuthenticated() && isAdmin();
      
      // Club members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && (
                    isClubMember(clubId) || 
                    isClubLeader(clubId) || 
                    isAdmin());
        
        allow create: if isAuthenticated() && (
                     (request.resource.data.userId == request.auth.uid && isClubPublic(clubId)) || 
                     isClubLeader(clubId) || 
                     isAdmin());
        
        allow update: if isAuthenticated() && (
                     isClubLeader(clubId) || 
                     isAdmin());
        
        allow delete: if isAuthenticated() && (
                     (resource.data.userId == request.auth.uid) || 
                     isClubLeader(clubId) || 
                     isAdmin());
      }
    }
    
    // ======== CHAT MANAGEMENT ========
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && isChatParticipant(chatId);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.participantIds is list && 
                   request.auth.uid in request.resource.data.participantIds;
      
      allow update: if isAuthenticated() && 
                   isChatParticipant(chatId);
      
      allow delete: if isAuthenticated() && (
                   isChatParticipant(chatId) || 
                   isAdmin());
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                   isChatParticipant(chatId);
        
        allow create: if isAuthenticated() && 
                     isChatParticipant(chatId) && 
                     isValidChatMessageData(request.resource.data);
        
        allow update: if isAuthenticated() && 
                     request.auth.uid == resource.data.senderId;
        
        allow delete: if isAuthenticated() && (
                     request.auth.uid == resource.data.senderId || 
                     isAdmin());
      }
    }
    
    // ======== EVENTS MANAGEMENT ========
    
    // Events collection (top level)
    match /events/{eventId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                   isVerified() && 
                   isValidEventData(request.resource.data);
      
      allow update: if isAuthenticated() && (
                   (request.auth.uid == resource.data.createdBy && 
                   canEditEventDetails(eventId)) || 
                   isAdmin());
      
      allow delete: if isAuthenticated() && (
                   (request.auth.uid == resource.data.createdBy && 
                   getEventState(eventId) == 'draft') || 
                   isAdmin());
    }
    
    // ======== SYSTEM COLLECTIONS ========
    
    // System settings (admin only)
    match /system_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Moderation actions
    match /moderation_actions/{actionId} {
      allow read: if isAuthenticated() && 
                 (resource.data.targetUserId == request.auth.uid || 
                  isModerator() || 
                  isAdmin());
      
      allow create, update: if isAuthenticated() && 
                          (isModerator() || isAdmin());
      
      allow delete: if isAdmin();
    }
    
    // Feature flags
    match /feature_flags/{flagId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // App configurations
    match /app_config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Magic links
    match /magicLinks/{linkId} {
      allow read, write: if isAdmin();
    }

    // Verification requests
    match /verifiedRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.uid == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 