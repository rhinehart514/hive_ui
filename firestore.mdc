---
description: 
globs: 
alwaysApply: true
---
# Firestore Database Structure

This document outlines the actual structure of the Firebase Firestore database for the HIVE UI application.

## Top-Level Collections

### `users`
Stores user profile information.

**Document ID**: User's UID from Firebase Authentication
**Fields**:
- `id`: String - User's UID
- `username`: String - User's username
- `email`: String - User's email address
- `displayName`: String - User's display name
- `profileImageUrl`: String? - URL to user's profile image
- `bio`: String? - User's bio description
- `year`: String - Academic year (e.g., "Freshman")
- `major`: String - User's field of study
- `residence`: String - Where the user lives
- `eventCount`: int - Number of events the user has posted/attended
- `clubCount`: int - Number of clubs the user belongs to
- `friendCount`: int - Number of connections
- `createdAt`: Timestamp - When the profile was created
- `updatedAt`: Timestamp - When the profile was last updated
- `lastLogin`: Timestamp - Last login timestamp
- `accountTier`: String - Level of account verification ("public", "verified", "verifiedPlus")
- `clubAffiliation`: String? - Primary club affiliation
- `clubRole`: String? - Role in club
- `interests`: List<String>? - User interests
- `isPublic`: bool - Whether profile is public
- `isVerified`: bool - Whether user is verified
- `isVerifiedPlus`: bool - Whether user has verified plus status

**Subcollections**:
- `followers`: Documents representing users who follow this user
- `following`: Documents representing users this user follows
- `friends`: Documents representing user's friends

### `events`
Stores event information.

**Document ID**: Unique event ID
**Fields**:
- `id`: String - Unique event identifier
- `title`: String - Event title
- `description`: String - Event description
- `location`: String - Event location
- `startDate`: Timestamp - Start date and time
- `endDate`: Timestamp - End date and time
- `organizerEmail`: String - Organizer's email
- `organizerName`: String - Organizer's name
- `category`: String - Event category
- `status`: String - Event status (confirmed, cancelled)
- `link`: String - URL to original event
- `originalTitle`: String? - Original title from RSS
- `imageUrl`: String - Event image URL
- `tags`: List<String> - Tags for categorization
- `source`: String - Event source (external, user, club)
- `createdBy`: String? - User ID of creator
- `lastModified`: Timestamp? - Last modification time
- `visibility`: String - Visibility setting (public, friends, private)
- `attendees`: List<String> - List of attendee user IDs
- `synced_at`: Timestamp - When the event was last synced

**Subcollections**:
- `rsvps`: Documents representing user RSVPs to the event

### `spaces`
Organized space hierarchy for clubs, organizations, and communities. This replaces the clubs collection in the application.

**Document ID**: Space type (e.g., "student_organizations", "fraternity_and_sorority")
**Fields**:
- `name`: String - Display name for the space type
- `description`: String - Description of this type of space
- `createdAt`: Timestamp - Creation time
- `updatedAt`: Timestamp - Last update time
- `isTypeCollection`: boolean - Flag marking this as a type collection
- `type`: String - Identifier of the space type

**Subcollections**:
- `spaces`: Actual space documents grouped by type

#### `/spaces/{spaceType}/spaces/{spaceId}`
**Document ID**: Unique space identifier
**Fields**:
- `id`: String - Unique space identifier
- `name`: String - Space name
- `description`: String - Description
- `iconCodePoint`: int - Icon code point
- `imageUrl`: String? - Space image URL
- `bannerUrl`: String? - Space banner URL
- `leaders`: Map<String, boolean> - Map of leader UIDs to boolean value
- `memberIds`: List<String> - List of member UIDs
- `createdAt`: Timestamp - Creation time
- `updatedAt`: Timestamp - Last update time
- `eventIds`: List<String> - List of associated event IDs

**Subcollections**:
- `events`: Events belonging to this space
- `posts`: Posts related to this space
- `members`: Members of this space

### `chats`
Stores chat information. Maintained as a top-level collection to support multi-user conversations.

**Document ID**: Unique chat ID
**Fields**:
- `title`: String - Chat title
- `imageUrl`: String? - Chat image URL
- `type`: int - Chat type (0: direct, 1: group, 2: club, 3: event)
- `participantIds`: List<String> - List of participant UIDs
- `createdAt`: String/Timestamp - Creation time
- `lastMessageAt`: String/Timestamp? - Time of last message
- `lastMessageText`: String? - Content of last message
- `lastMessageSenderId`: String? - Sender of last message
- `unreadCount`: Map<String, int> - Map of user IDs to unread count
- `pinnedMessageIds`: List<String>? - Pinned message IDs
- `clubId`: String? - Associated club ID (for club chats)
- `eventId`: String? - Associated event ID (for event chats)

**Subcollections**:
- `messages`: Chat messages
- `typing`: Documents representing typing indicators

### `posts`
Stores social media posts in the app. Maintained as top-level for global feed, with nested collections for context-specific posts.

**Document ID**: Unique post ID
**Fields**:
- `user`: String - User ID of the poster
- `time`: Timestamp - When the post was created
- `content`: String - Post content/text
- `imageUrl`: String? - URL to attached image
- `voteCount`: int - Number of votes/likes
- `commentCount`: int - Number of comments

**Subcollections**:
- `Comments`: Comments on the post

### `Anonymous Posts`
Stores anonymous posts.

**Document ID**: Unique post ID
**Fields**:
- `user`: String - User ID (anonymized)
- `time`: Timestamp - When the post was created
- Content fields similar to regular posts

### `Event Spotlight Posts`
Stores posts specifically highlighting events.

**Document ID**: Unique post ID
**Fields**:
- `time`: Timestamp - When the post was created
- `voteCount`: int - Number of votes/popularity metric
- Event-related fields

### `interactions`
Tracks user interactions with entities in the app. Maintained as a top-level collection for analytics and cross-entity tracking.

**Document ID**: Unique interaction ID
**Fields**:
- `userId`: String - User who performed the interaction
- `entityId`: String - ID of the entity being interacted with
- `entityType`: String - Type of entity (event, space, profile, post)
- `action`: String - Type of action (view, rsvp, share, comment, save, click)
- `timestamp`: Timestamp - When the interaction occurred
- `sessionId`: String? - Session ID to group related interactions
- `metadata`: Map<String, dynamic>? - Additional metadata
- `deviceInfo`: Map<String, dynamic>? - Information about the user's device

### `interaction_stats`
Aggregated statistics about interactions.

**Document ID**: Entity ID
**Fields**:
- `entityId`: String - ID of the entity 
- `entityType`: String - Type of entity
- `viewCount`: int - Number of views
- `rsvpCount`: int - Number of RSVPs
- `shareCount`: int - Number of shares
- `commentCount`: int - Number of comments
- `ctr`: double - Click-through rate
- `conversionRate`: double - Conversion rate (views to RSVPs)
- `engagementScore`: double - Calculated engagement score
- `lastUpdated`: Timestamp - When stats were last updated
- `actionCounts`: Map<String, int> - Counts by action type

### `user_activities`
Tracks user activity in the app.

**Document ID**: Unique activity ID
**Fields**:
- `userId`: String - User ID
- Activity-specific fields

### `verification_requests`
Stores requests for verification of spaces or organizations.

**Document ID**: Unique request ID
**Fields**:
- `id`: String - Request ID
- `objectId`: String - ID of the space/organization to verify
- `objectType`: String - Type of object ('space' or 'organization')
- `name`: String - Name of the space/organization
- `requesterId`: String - User ID who submitted the request
- `requesterName`: String - Name of the requester
- `requesterAvatarUrl`: String? - Avatar URL of requester
- `message`: String? - Message with verification request
- `createdAt`: Timestamp - When request was created
- `status`: String - Status (pending, approved, rejected, cancelled)
- `verificationType`: String - Type (standard, premium)
- `additionalDocuments`: Map<String, String>? - Document name -> URL
- `approvedBy`: String? - Admin who approved/rejected
- `rejectionReason`: String? - Reason for rejection
- `reviewedAt`: Timestamp? - When request was reviewed

### `lost_events`
Events that don't belong to any specific space.

**Document ID**: Event ID
**Fields**: Same as `events` collection

### `reposts`
Stores event reposts from users.

**Document ID**: Unique repost ID
**Fields**:
- `eventId`: String - ID of reposted event
- `userId`: String - User who reposted
- `userName`: String - Name of user who reposted
- `avatarUrl`: String? - Avatar URL of user who reposted
- `comment`: String? - Comment added to repost
- `createdAt`: Timestamp - When repost was created

### Other Collections

#### `metadata`
System-wide metadata documents.

#### `public_user_index`
Public profile index for discoverability.

#### `admin_users`
Documents representing admin users.

#### `moderator_users`
Documents representing moderator users.

#### `user_rate_limits`
Rate limiting information for users.

#### `content_reports`
Reports of inappropriate content.

#### `user_reports`
Reports of users.

#### `auth_conversions`
Tracks account management conversions.

#### `event_privacy`
Privacy settings for events.

#### `space_privacy`
Privacy settings for spaces.

#### `space_leader_index`
Index for quick leader verification.

#### `space_member_index`
Index for quick member verification.

#### `space_discovery`
Index for browsable space directory.

#### `friend_requests`
Pending friend requests between users.

#### `friends`
Established friend connections.

#### `profile_shares`
Records of profile sharing between users.

## Collection Group Queries

The database is structured to support the following collection group queries:

- `spaces`: Query all spaces across the database
- `events`: Query all events across the database
- `Posts`: Query all posts
- `Comments`: Query all comments
- `Anonymous Posts`: Query all anonymous posts
- `Event Spotlight Posts`: Query event spotlight posts

## Recommendations for Structure

### Chats
The current top-level structure is recommended because:
1. Multiple users participate in each chat
2. Easier to query across all chats
3. Simpler security rules for access control
4. Better supports group chats and multi-user conversations

### Posts
The hybrid approach is recommended:
1. Keep standalone `/posts/{postId}` for general feed posts
2. Use nested posts for space-specific content: `/spaces/{spaceType}/spaces/{spaceId}/posts/{postId}`
3. This provides flexibility for both global and contextual content

### Interactions
The top-level collection is optimal because:
1. Used for cross-entity analytics
2. Easier to aggregate metrics across users
3. Better query performance for dashboard reporting
4. Simpler architecture for activity feeds

## Security Rules

Security rules enforce the following access patterns:

- Public read access for publicly browsable content (spaces, events)
- Authenticated read access for protected content
- Owner-only write access for user data
- Role-based access control for spaces
- Special privileges for admins and moderators 