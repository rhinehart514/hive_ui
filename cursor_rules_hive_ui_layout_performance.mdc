# HIVE UI Layout and Performance Best Practices

## 1. Layout Constraints and Sizing

### 1.1 Widget Constraints
- Always wrap dynamic height widgets in `Expanded`, `Flexible`, or use `SizedBox`/`Container` with fixed height inside `Column` or `ListView`.
- Avoid using `double.infinity` for width or height unless the parent provides explicit constraints.
- Use `LayoutBuilder` when child layout depends on screen size or parent constraints.
- Do not nest scrollable widgets (e.g., `ListView` inside `SingleChildScrollView`) unless explicitly required and properly constrained.

### 1.2 Screen Adaptivity
- Use `MediaQuery` responsibly and cache its values to avoid rebuilds.
- Prefer percentage-based sizing (using `MediaQuery.of(context).size`) over fixed dimensions for responsive layouts.
- Use `FractionallySizedBox` for elements that should occupy a percentage of their parent.
- Set `resizeToAvoidBottomInset: true` on `Scaffold` when keyboard visibility affects layout.

## 2. State Management and Lifecycle

### 2.1 Widget Lifecycle
- Always check `if (!mounted) return;` before calling `setState()` in any asynchronous code.
- Cancel all `Timer`, `StreamSubscription`, `AnimationController`, and listeners inside `dispose()`.
- Never hold references to `State` objects outside their lifecycle (e.g., passing them to other classes or retaining them after removal).
- Use `AutoDisposeProvider` for state that should be cleaned up when no longer in use.

### 2.2 Async Data Handling
- Use `FutureBuilder` or `AsyncNotifier` for async data loading instead of relying on `initState()` alone.
- Handle Firestore and JSON decoding with explicit typing; never assume dynamic maps or lists have the correct type.
- Guard all list/map accesses with type checks or `tryParse`, and never access indexes blindly.
- Ensure widgets that rely on async data do not build UI until data is loaded and the widget is still mounted.

## 3. Rendering Optimization

### 3.1 Rebuild Management
- Never call `setState()` from outside the widget's lifecycle (e.g., delayed callbacks or listeners not cleaned up).
- Avoid calling `setState()` unnecessarilyâ€”only update what is strictly needed to avoid redundant rebuilds.
- Keep widget trees shallow and modular; extract reusable widgets to avoid deep nesting and layout complexity.
- Use `const` constructors wherever possible to prevent unnecessary rebuilds.

### 3.2 Performance Techniques
- Implement `RepaintBoundary` around complex widgets that update frequently to isolate repaints.
- Cache expensive computations rather than recalculating them in `build` methods.
- Use `ListView.builder` instead of `ListView` for long or infinite lists.
- Leverage `SliverList` and `CustomScrollView` for advanced scrolling performance.

## 4. Image and Asset Management

### 4.1 Image Optimization
- Use appropriate image formats: WebP for general use, PNG for transparency, JPEG for photos.
- Resize images to their displayed size before adding them to the project.
- Use the `cached_network_image` package for network images with proper caching strategy.
- Set explicit dimensions for image widgets to avoid layout shifts.

### 4.2 Asset Loading
- Preload critical assets during app initialization or splash screen.
- Use the `precacheImage` method for images that will be needed soon.
- Implement lazy loading for heavy resources shown in scrollable lists.
- Consider using SVGs for icons and simple illustrations for better scaling (with `flutter_svg` package).

## 5. Memory Management

### 5.1 Memory Leaks Prevention
- Dispose of controllers, animations, and listeners properly in the `dispose()` method.
- Avoid storing large data in memory; implement pagination or virtual scrolling for large datasets.
- Watch for memory-intensive operations in background isolates when possible.
- Use WeakReference for objects that should not prevent garbage collection.

### 5.2 Resource Cleanup
- Clear caches when memory pressure is detected.
- Implement low-memory callbacks to release non-essential resources.
- Close streams, controllers, and connections when they are no longer needed.
- Use `didChangeAppLifecycleState` to respond to app background/foreground transitions.

## 6. Testing and Validation

### 6.1 Layout Testing
- Test layouts on various screen sizes and orientations.
- Verify that UI elements are properly constrained and do not overflow.
- Test with different text scales (accessibility settings).
- Validate that the UI adapts gracefully when the keyboard appears.

### 6.2 Performance Profiling
- Use Flutter DevTools to identify jank and performance bottlenecks.
- Profile the app on low-end devices to ensure acceptable performance.
- Implement performance tests for critical user flows.
- Monitor memory usage during extended use sessions. 