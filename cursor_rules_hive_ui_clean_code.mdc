# HIVE UI Clean Code Standards

## 1. Code Structure and Organization

### 1.1 File Organization
- Limit files to a maximum of 300 lines of code.
- Each file should have a single responsibility or represent a single component.
- Organize imports into logical groups: Dart SDK, Flutter, third-party packages, and project imports.
- Follow a consistent ordering of class members: constructors, fields, lifecycle methods, public methods, private methods.

### 1.2 Function Design
- Keep functions short and focused on a single task.
- Limit function parameters to 3-4; use parameter objects for more.
- Extract complex conditions into well-named boolean functions.
- Follow the "extract till you drop" principle for complex methods.

## 2. Naming Conventions

### 2.1 Naming Clarity
- Use descriptive, intention-revealing names for variables, functions, and classes.
- Prefer longer, clear names over short, ambiguous ones.
- Use verb-noun pairs for method names (e.g., `fetchUserProfile`, `updateEventDetails`).
- Name boolean variables with "is", "has", or "should" prefixes (e.g., `isLoading`, `hasError`).

### 2.2 Consistent Naming
- Use PascalCase for classes, enums, extensions, and typedefs.
- Use camelCase for variables, functions, and methods.
- Use snake_case for file and directory names.
- Use SCREAMING_SNAKE_CASE for constants and enum values.

## 3. Comments and Documentation

### 3.1 Self-Documenting Code
- Write code that is self-explanatory; use comments only when necessary.
- Avoid obvious comments that merely repeat what the code does.
- Comment only on why code does something unusual, not what it does.
- Delete commented-out code; rely on version control for history.

### 3.2 Documentation
- Use `///` dartdoc comments for all public APIs.
- Document parameters, return types, and exceptions for public methods.
- Include examples in documentation for complex APIs.
- Keep documentation updated when code changes.

## 4. Code Readability

### 4.1 Formatting
- Use consistent indentation (2 spaces per level in Dart).
- Limit line length to 80-100 characters.
- Use proper spacing around operators and control structures.
- Apply `flutter format` regularly to maintain consistent formatting.

### 4.2 Simplicity
- Avoid nested conditionals; prefer early returns for guard clauses.
- Don't use clever tricks that sacrifice readability.
- Keep logic simple and straightforward.
- Break down complex expressions into well-named variables.

## 5. SOLID Principles

### 5.1 Single Responsibility
- Each class should have only one reason to change.
- Extract separate concerns into different classes.
- Keep widgets focused on UI, move business logic to providers or services.
- Use composition over inheritance.

### 5.2 Open/Closed and Other Principles
- Design classes to be open for extension but closed for modification.
- Follow the Liskov Substitution Principle for inheritance.
- Implement the Interface Segregation Principle with focused interfaces.
- Apply Dependency Inversion by depending on abstractions, not implementations.

## 6. Clean Architecture

### 6.1 Layer Separation
- Maintain clear boundaries between presentation, domain, and data layers.
- Enforce unidirectional dependencies (outer layers depend on inner layers).
- Use dependency injection to provide implementations to abstractions.
- Keep domain models separate from data transfer objects (DTOs).

### 6.2 Feature Organization
- Organize code by features rather than by technical layers within features.
- Apply consistent architecture patterns across features.
- Use the repository pattern for data access.
- Implement use cases/interactors for business logic.

## 7. Code Duplication

### 7.1 DRY Principle
- Don't Repeat Yourself - extract duplicated code into reusable functions or classes.
- Create utility functions for common operations.
- Develop shared widgets for repeated UI patterns.
- Implement shared mixins for common behavior in multiple classes.

### 7.2 Reusability
- Design for reuse from the start.
- Make reusable components configurable with parameters.
- Ensure reusable code is well-documented.
- Balance between reusability and readability.

## 8. Error Prevention

### 8.1 Defensive Coding
- Use assertion statements to catch programming errors early.
- Validate all inputs at system boundaries.
- Fail fast and visibly for easier debugging.
- Don't silently handle errors that indicate programming bugs.

### 8.2 Maintainability
- Write code assuming someone else will maintain it.
- Choose clarity over cleverness.
- Make critical sections of code extra readable.
- Leave the code better than you found it (Scout Rule). 