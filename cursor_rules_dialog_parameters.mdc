# Flutter Dialog Parameters and Component Integration

## 1. Dialog Parameter Passing

### 1.1 Required Parameters
- Always check the constructor definition before using dialogs or custom widgets
- Use IDE tools (like hovering over the constructor) to see required parameters
- When updating a dialog component, update all places where it's used in the codebase

### 1.2 Common Dialog Parameter Errors
- Missing required parameters (e.g., `event: widget.event`)
- Using old parameter names after refactoring (e.g., `eventTitle` instead of `event.title`)
- Passing wrong types to callbacks (`Function(String?)` vs `Function(String)`)

## 2. Callback Handling

### 2.1 Callback Signatures
- Match callback signatures exactly between parent and child components
- Use typedef for complex callback signatures to ensure consistency
- Example:
  ```dart
  // In the dialog component
  typedef RepostCallback = void Function(String? comment, RepostContentType type);
  
  class RepostDialog extends StatefulWidget {
    final RepostCallback onRepost;
    // ...
  }
  
  // When using the dialog
  RepostDialog(
    onRepost: (comment, type) {
      // ...
    },
  )
  ```

### 2.2 Null Safety in Callbacks
- Explicitly handle null parameters in callbacks
- Use null-aware operators when appropriate (`?.`, `??`, etc.)
- Document whether callbacks can receive null values

## 3. Component Refactoring

### 3.1 Safe Refactoring Practices
- When changing a component's required parameters, use the "Find Usages" feature
- Update all instances of the component throughout the codebase
- Add useful default values where possible to maintain backward compatibility
- Consider using the Builder pattern for components with many optional parameters

### 3.2 Migration Strategy
- Refactor one component at a time
- Update tests before updating the implementation
- Add `@Deprecated` annotations to mark old parameters that will be removed
- Run the linter after each refactoring step to catch issues early

## 4. Documentation

### 4.1 Component Documentation
- Add descriptive comments to all parameters
- Specify which parameters are required vs optional
- Document the expected format and constraints for each parameter
- Example:
  ```dart
  /// Dialog for reposting an event to a user's feed
  /// 
  /// [event] The event being reposted
  /// [onRepost] Callback triggered when user confirms the repost,
  ///   with parameters: comment (optional text) and contentType
  class RepostDialog extends StatefulWidget {
    // ...
  }
  ```

### 4.2 Breaking Changes
- Document breaking changes in comments
- Use version numbers to indicate when parameters were added/changed
- Maintain a changelog for component API changes 