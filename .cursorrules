---
name: HIVE Monorepo Architecture Rules
description: Enforces the granular, package-based monorepo structure for HIVE.
globs: ["**/*"]
---

# HIVE vBETA - Monorepo Architectural Principles

This document codifies the official project structure for HIVE. All code must adhere to these rules to ensure scalability, maintainability, and a clean separation of concerns.

---

## 📂 **1. Root Directory Structure**

The root is organized by domain, not by technology.

```
/
├── .config/                  # Shared build configurations (ESLint, Prettier, TS Paths)
├── .github/                  # CI/CD Workflows (GitHub Actions)
├── apps/                     # Runnable applications (Web, Mobile, Admin)
├── packages/                 # Shared code (UI, logic, utils)
├── backend/                  # Server-side logic (Firebase Functions, rules)
├── infra/                    # Infrastructure as Code (Terraform/Pulumi)
├── tests/                    # Centralized E2E and integration tests
├── storybook/                # Isolated UI component development environment
├── docs/                     # Project documentation and ADRs
└── package.json              # Root Turborepo/pnpm workspace config
```

---

## 📦 **2. The `packages/` Directory: Shared Code**

This is the heart of the monorepo. All shared code lives here. **Never duplicate code between apps.** If logic is needed in more than one place, create a package.

### **`packages/design-tokens`**
- **Source of Truth:** This is the *only* source for all visual primitives.
- **Format:** Store tokens in framework-agnostic formats like JSON or plain TS objects.
- **Exports:**
    - A Tailwind CSS preset for the web apps (`tailwind.preset.ts`).
    - A theme file for Flutter/mobile (`tokens.dart`, via code-gen).
    - Plain JS/TS objects for use in other packages (`index.ts`).
- **🚫 DON'T:** Hardcode colors, font sizes, spacing, or animation values anywhere else in the codebase.

### **`packages/ui-core`**
- **Purpose:** Atomic, brand-agnostic UI primitives. These are the fundamental building blocks.
- **Examples:** `Button.tsx`, `Card.tsx`, `Pill.tsx`, `Input.tsx`.
- **Rules:**
    - Components must be stateless and highly reusable.
    - They consume variables from `design-tokens`.
    - They should have minimal styling, focused on structure and function.
    - They must not contain any business logic or reference other packages besides `design-tokens`.

### **`packages/ui-patterns`**
- **Purpose:** Compound, brand-opinionated components that represent specific HIVE features.
- **Examples:** `SpaceHeader.tsx`, `RitualCountdown.tsx`, `PostCard.tsx`.
- **Rules:**
    - Composed from `ui-core` components.
    - May contain some client-side state and interactions.
    - Are still generic enough to be used across multiple apps (e.g., `web` and `admin`).
    - **🚫 DON'T:** Include complex data-fetching logic here. That belongs in `apps`.

### **`packages/api-client`**
- **Purpose:** A typed SDK for all backend communication.
- **Rules:**
    - Wraps all Firebase and Cloud Function calls.
    - Provides typed methods for all data operations (e.g., `fetchSpace(id)`, `createPost(data)`).
    - **🚫 DON'T:** Make direct calls to `firebase/firestore` or `fetch` from within `apps`. All network requests must go through this package.

### **`packages/hooks`**
- **Purpose:** Shared React hooks used across multiple frontends.
- **Examples:** `useAuth()`, `useSpaces()`, `useEventListener()`.
- **Rules:** If a hook is used in both `apps/web` and `apps/admin`, it belongs here.

### **`packages/auth-logic`**
- **Purpose:** Shared, non-UI authentication flows.
- **Examples:** `.edu` email validation, UB-specific logic, role handling.
- **Rules:** This package should export pure functions that can be used by any app or even the backend.

### **`packages/validation`**
- **Purpose:** Data validation schemas.
- **Technology:** Zod is preferred.
- **Rules:** Define all form schemas and API data structures here. This ensures frontend and backend data shapes are always in sync.

### **`packages/utilities`**
- **Purpose:** Pure, framework-agnostic helper functions.
- **Examples:** `formatDate()`, `cn()` (class name utility), feature flag checkers.
- **Rules:** No dependencies on React, Firebase, or any other large framework.

---

## 📱 **3. The `apps/` Directory: Runnable Applications**

Apps are the "consumers" of packages. They are responsible for routing, data fetching, and composing patterns into full user experiences.

### **`apps/web` (Main Next.js App)**
- **`src/components/`:** This is for **feature-level components only**. These components wire together patterns from `ui-patterns` and are often specific to a certain page or user flow. They contain the primary data-fetching logic for a feature.
- **`src/lib/`:** Helpers and hooks that are **specific to the web app** and not shared.
- **`src/app/`:** All routing and page layouts for the App Router.
- **`tailwind.config.ts`:** Must import and use the preset from `packages/design-tokens`.

---

## ☁️ **4. The `backend/` Directory**

This is the single source of truth for all server-side infrastructure and logic.

- **`functions/`:** All TypeScript Cloud Functions.
- **`firestore.rules` / `firestore.indexes.json`:** All database rules and index definitions.
- **`scripts/`:** Data migration, seeding, or maintenance scripts.
- **🚫 DON'T:** Place any server-side code outside of this directory.

---

## ✅ **5. General Principles**

- **Component Naming:** `PascalCase` (e.g., `SpaceHeader.tsx`).
- **File Naming:** `kebab-case` (e.g., `space-header.tsx`).
- **Data Flow:** Data flows one way: `api-client` -> `apps/web` (or hooks) -> Feature Components -> `ui-patterns`.
- **Type Safety:** The entire codebase must be strictly typed.
- **Dependency Rule:** Packages should not have circular dependencies. Apps can depend on packages, but packages should rarely depend on other packages (utility packages are an exception).
