BEFIRE ANYTHING: 
-  Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
* Never replace code with placeholders like `// ... rest of the processing ...`. Always include complete code.
* Break problems into smaller steps. Think through each step separately before implementing.
* Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
* Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.

# IMPORTANT IMPLEMENTATION NOTES
* In this codebase, "clubs" are represented as "spaces" collections in Firestore. There are no separate "clubs" collections.
* When accessing club data, use collectionGroup queries on "spaces" collections during onboarding.
* Ensure proper permissions are set for accessing space collections.
* For authentication persistence:
  - Always set Firebase Auth persistence to LOCAL for mobile platforms
  - Include proper security rules for user_sessions collection
  - Remember authenticated users between app sessions
* To avoid CORS issues with Firebase:
  - Ensure proper domain configuration in Firebase Console
  - Use Firebase SDK methods rather than direct REST API calls when possible
  - Include appropriate headers for any custom API requests

# FLUTTER SPECIFIC RULES
* NEVER nest a CustomScrollView inside another scrollable widget
* ALWAYS return direct sliver widgets from reusable components rather than wrapping them in CustomScrollView
* ALWAYS add minimum 80px bottom padding to scrollable content when using a FAB
* VERIFY all scrollable containers have bounded height either through parent constraints or explicit sizing
* Check the Flutter console for "unbounded height" or "overflow" warnings

## 1. Architecture and Structure

### 1.1 Project Organization
- please ask questions if you are unsure about anything
- read lib\docs for all documentation before making changes
- Follow clean architecture principles with clear separation of concerns
- Organize feature code into self-contained modules under 'features/' directory
- Use the following directory structure for features:
  ```
  features/
    ├── feature_name/
    │    ├── data/           # Data sources, repositories, and DTOs
    │    ├── domain/         # Entities and use cases
    │    └── presentation/   # UI components, controllers, and screens
  ```

### 1.2 File Size and Structure
- Limit files to a maximum of 300 lines of code
- Extract large widgets into separate component files
- One primary export per file
- Name files according to their primary content (e.g., profile_page.dart for ProfilePage)

### 1.3 Component Library Structure
- Place all standardized components in the `lib/components/` directory
- Group related components in logical files (e.g., inputs.dart, buttons.dart)
- Use consistent naming patterns for all component types
- When component files exceed 300 lines, consider splitting into sub-components

## 2. Code Style and Syntax

### 2.1 Naming Conventions
- Use PascalCase for classes, enums, and extensions
- Use camelCase for variables, functions, and methods
- Use snake_case for file and directory names
- Use SCREAMING_SNAKE_CASE for constants and enums
- Use the `Hive` prefix for all standardized components (e.g., HiveButton, HiveNavigationBar)
- Use descriptive suffixes that indicate the component type
- Follow enum naming conventions for component variants (e.g., HiveButtonVariant, HiveNavigationBarStyle)

### 2.2 Type Safety
- Always declare explicit types for variables, parameters, and return values
- Avoid using 'dynamic' or 'var' unless absolutely necessary
- Create proper type definitions for complex data structures
- Use nullable types (e.g., String?) only when nullability is intended

### 2.3 Documentation
- Add dartdoc comments for all public classes, methods, and properties
- Include parameter and return documentation for functions
- Document complex logic with inline comments
- Use `///` for documentation comments and `//` for implementation comments
- Create a dedicated markdown file in `lib/docs/` for each component category
- Include basic usage examples and common patterns in documentation
- Document all variants and configuration options
- Provide migration guides when replacing existing components

## 3. UI Development

### 3.1 Widget Design
- Break down complex widgets into smaller, reusable components
- Keep widget hierarchies flat to improve performance
- Use const constructors wherever possible
- Use key parameters for stateful widgets that may rebuild

### 3.2 Theme Consistency
- Only use colors defined in AppColors
- Follow the Counter-Culture Premium aesthetic defined in lib/docs/brand_aesthetic.md
- Apply contextual styling based on feature context (standard, rebellion, secret)
- Use deep black backgrounds (#000000) for all screens
- Apply gold accents (#FFD700) for highlighting key elements
- Use standard 30px border radius for primary UI elements (standard style)
- Apply sharp corners (0px radius) for rebellion-specific contexts
- Use the glassmorphism extensions for consistent UI treatments
- Maintain the dark theme aesthetic throughout the app
- Use the HiveComponentStyle enum for appropriate styling context

### 3.3 Animation and Interaction
- Use consistent duration values for animations (400ms standard, 250ms quick)
- Apply animation curves from HiveAnimations
- Include haptic feedback for interactive elements
- Implement smooth transitions between states and screens
- Use AnimationController and Tween for custom animations
- Follow the animation standards defined in lib/docs/brand_aesthetic.md

### 3.4 Component Design Principles
- Design components to be highly configurable through optional parameters
- Support multiple visual styles through variant enums
- Allow appearance customization while maintaining design system constraints
- Provide sensible defaults that align with the HIVE design system
- Maintain consistent parameter naming across similar components
- Use similar patterns for handling styles, sizes, and states
- Ensure all components support the same theming approach
- Apply consistent animation durations and curves
- Components should encapsulate their own state management where appropriate
- Avoid dependencies on global state except through explicit parameters
- Handle animations and effects internally within the component

### 3.5 Standardized Component Usage
- Always use standardized components from the component library when available
- Consult the component standardization guide before creating new UI elements
- Extend existing components rather than creating duplicative implementations
- Request additions to the component library for widely used patterns
- Customize components through their provided parameters
- Avoid direct modification of standardized component code
- When a component doesn't meet requirements, propose extensions or variants
- Document any custom implementations that deviate from standards

## 4. State Management

### 4.1 Riverpod Usage
- Use StateProvider for simple state
- Use StateNotifierProvider for complex state with operations
- Use FutureProvider for async operations
- Define providers at the top of the file or in a dedicated providers file
- Properly type all providers

### 4.2 State Organization
- Create dedicated state classes for complex features
- Use immutable state objects with copyWith methods
- Separate UI state from domain state
- Handle loading, error, and success states explicitly

## 5. Performance Optimization

### 5.1 Rendering Optimization
- Avoid expensive operations in build methods
- Use caching for complex calculations
- Minimize rebuilds by using const widgets and selective state updates
- Profile and optimize performance-critical paths

### 5.2 Resource Management
- Properly dispose controllers and subscriptions
- Use lazy loading for heavy resources
- Implement pagination for long lists
- Optimize image loading and caching

### 5.3 Component Performance
- Use const constructors wherever possible
- Minimize rebuilds by localizing state changes
- Optimize animations for smooth performance
- Cache expensive calculations
- Ensure adequate contrast in all component states
- Support text scaling for typography components
- Provide sufficient touch targets for interactive elements
- Include semantic labels for screen readers

## 6. Testing

### 6.1 Test Coverage
- Write unit tests for all business logic
- Create widget tests for UI components
- Include integration tests for critical user flows
- Mock external dependencies for testing
- Write widget tests for all component variations
- Test edge cases like very long text or extreme sizes
- Include golden tests for visual verification
- Test animations and interactive states

### 6.2 Test Structure
- Follow the Arrange-Act-Assert pattern for unit tests
- Use Given-When-Then for integration tests
- Test edge cases and error handling

## 7. Error Handling

### 7.1 Exception Management
- Use typed exceptions for different error scenarios
- Implement graceful error recovery
- Display user-friendly error messages
- Log errors for debugging purposes

### 7.2 Null Safety
- Handle nullable values safely
- Use the ?? operator or null-aware operators when appropriate
- Check for null before accessing potentially null values
- Provide default values for nullable parameters

## 8. Refactoring Priorities

### 8.1 Current Technical Debt
- Break down large files (like profile_page.dart) into smaller component files
- Improve error handling and reporting
- Enhance state management with more focused providers

### 8.2 Code Improvement Opportunities
- Extract common UI patterns into reusable widgets
- Implement comprehensive logging
- Add accessibility features
- Optimize performance for low-end devices

## 9. Navigation Standards

### 9.1 Router Architecture
- Use GoRouter for all app navigation
- Implement StatefulShellRoute for bottom navigation tabs
- Define all route paths as constants in AppRoutes class
- Use typed route parameters for type-safe navigation
- Organize routes in a hierarchical structure matching the app's information architecture

### 9.2 Navigation Implementation
- Always use the navigation helper functions in main.dart for routing
- Properly handle navigation transitions with NavigationTransitions utility
- Include appropriate haptic feedback during navigation
- Handle deep links and URL patterns consistently
- Use the Shell component for bottom navigation bar integration

### 9.3 Navigation Best Practices
- Avoid using BuildContext across async gaps
- Store navigation context before async operations
- Check mounted state before navigation after async operations
- Use named routes for all navigation
- Implement proper error handling for navigation failures
- Ensure all routes have appropriate error boundaries

## 10. Component Library

### 10.1 Standardized Component Reference
- **Core Components**
  - HiveButton (buttons.dart): Standard button component with multiple variants
  - HiveTextField (inputs.dart): Text input component with validation support
  - HiveCard (cards.dart): Card containers with multiple style options
- **Navigation Components**
  - HiveNavigationBar (navigation_bar.dart): Bottom navigation with multiple styles
  - HiveAppBar (app_bar.dart): [To be implemented] App bar component
- **Layout Components**
  - [To be implemented] Standard layout containers and grids
- **Feedback Components**
  - [To be implemented] Notification, dialog, and toast components

### 10.2 Component Implementation Process
1. **Planning**
   - Document the need for a new component in an issue
   - Identify existing similar implementations to consolidate
   - Design the component API and document parameters
   - Create mockups or wireframes if needed
2. **Implementation**
   - Create the component in the appropriate file in lib/components/
   - Implement all required variants and configurations
   - Add comprehensive documentation
   - Create usage examples
3. **Review and Integration**
   - Submit for code review
   - Update documentation
   - Create migration guides for existing implementations
   - Update the component reference

## 10. Brand Aesthetic

### 10.1 Core Aesthetic Application
- Follow the Counter-Culture Premium aesthetic defined in lib/docs/brand_aesthetic.md
- Start with pure black backgrounds (#000000) for all screens
- Use white text for standard content with gold accents for emphasis
- Apply consistent 30px border radius for primary UI elements in standard context

### 10.2 Contextual Styling System
- Implement the HiveComponentStyle enum for component styling contexts:
  - standard: Apple-inspired premium feel (default)
  - rebellion: Counter-culture enhanced for new features
  - secret: Enhanced styling for hidden/experimental features
- Apply standard styling for core app functionality
- Use rebellion styling for new features, community areas, and student-exclusive content
- Reserve secret styling for power user features and experimental functionality

### 10.3 Animation Standards
- Follow the HiveAnimations standards defined in brand_aesthetic.md
- Use 400ms for standard animations with Curves.easeOut
- Apply 250ms for quick animations in rebellion contexts
- Include appropriate haptic feedback for all interactions
- Use contextual animation curves based on component styling

## 11. Messaging Security Standards

### 11.1 Data Structure
- Use `/chats/{chatId}` as the main collection for all chat data
- Store messages in `/chats/{chatId}/messages/{messageId}` subcollection
- Store typing status in `/chats/{chatId}/typing/{userId}` subcollection
- Include participantIds array in chat documents for access control

### 11.2 Access Control
- Only allow authenticated users to create and access chats
- Restrict chat access to participants listed in participantIds
- Only allow message creation by chat participants
- Only allow message senders to update or delete their own messages
- Allow admins to delete any message or chat
- Restrict typing status updates to the user's own status

### 11.3 Data Validation
- Verify senderId matches authenticated user
- Prevent modification of message timestamps
- Ensure all required fields are present in messages
- Validate message content and attachments
- Enforce participant list integrity

### 11.4 Real-time Updates
- Use Firestore listeners for real-time chat updates
- Implement proper error handling for stream interruptions
- Handle offline data synchronization
- Manage typing indicator timeouts
- Clean up listeners when leaving chat screens

## 11. Firebase and Firestore Optimization

### 11.1 Data Structure
- Model each distinct entity type as a separate top-level collection
- Avoid deeply nested subcollections beyond 1-2 levels
- Use document references (instead of duplicating data) when linking related entities
- Consider using composite keys for chat messages: `/chats/{chatId}/messages/{messageId}`
- Include carefully selected denormalized data only when necessary for common queries
- Example collection paths:
  ```
  /users/{userId}
  /clubs/{clubId}
  /events/{eventId}
  /chats/{chatId}
  /chats/{chatId}/messages/{messageId}
  ```

### 11.2 Read Optimization
- Cache frequently accessed data client-side
- Implement query limits and pagination (typically 10-20 items per page)
- Use compound queries instead of chaining multiple where() conditions
- Implement cursor-based pagination using startAfter() for efficient list traversal
- Consider using get() over snapshots() for data that rarely changes
- Listen to document changes at the most granular level possible
- Optimize image loading with progressive and cached downloads

### 11.3 Write Optimization
- Batch related writes using batch() or runTransaction()
- Use server timestamps for consistent time tracking
- Implement debounce for real-time features like typing indicators
- Consider using Cloud Functions for cascading updates that affect multiple documents
- Prefer updates with merge:true over complete document rewrites
- Example optimal batch write:
  ```dart
  Future<void> batchUpdateRSVPs(String eventId, List<String> userIds, bool attending) async {
    final batch = _firestore.batch();
    final eventRef = _firestore.collection('events').doc(eventId);
    
    for (final userId in userIds) {
      final rsvpRef = eventRef.collection('rsvps').doc(userId);
      batch.set(rsvpRef, {
        'attending': attending,
        'timestamp': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
    
    // Update event counts in the same batch
    batch.update(eventRef, {
      'attendeeCount': attending 
        ? FieldValue.increment(userIds.length) 
        : FieldValue.increment(-userIds.length),
      'updatedAt': FieldValue.serverTimestamp(),
    });
    
    await batch.commit();
  }
  ```

### 11.4 Security Rules
- Design rules to validate input data format and required fields
- Implement ownership-based access control in security rules
- Split lengthy rules into logical functions for maintenance
- Test security rules before deployment with Firebase emulator suite
- Never rely on client-side data validation alone
- Create role-based access for admin functions
- Important permission note: Spaces (not clubs) are the primary data model; use collectionGroup queries for onboarding
- Allow authenticated users to read all space collections during onboarding
- Example security rule for space access:
  ```
  // Allow collection group query for spaces with additional access for onboarding
  match /{path=**}/spaces/{spaceId} {
    // This rule specifically enables collectionGroup("spaces") queries
    // Especially useful during onboarding when listing all available spaces
    allow read: if isAuthenticated();
  }
  
  // Legacy spaces support
  match /spaces/{spaceId} {
    allow read: if isAuthenticated() || isSpacePublic(spaceId); // Enhanced for onboarding
    allow create: if isAuthenticated() && isValidSpaceData(request.resource.data);
    allow update: if isAuthenticated() && (
                   isSpaceLeader(spaceId) || 
                   isAdmin()
                 );
    allow delete: if isAdmin();
  }
  ```

### 11.5 Error Handling
- Implement typed error handling for all Firebase operations
- Add proper retry logic for network-dependent operations
- Create fallback UIs for Firebase services being unavailable
- Provide useful feedback messages for common error scenarios
- Log errors with enough context for troubleshooting
- Example error handling:
  ```dart
  Future<void> joinClub(String clubId) async {
    try {
      // Check if user is already a member
      final userRef = _firestore.collection('clubs').doc(clubId)
          .collection('members').doc(_currentUserId);
      
      final doc = await userRef.get();
      if (doc.exists) {
        throw const FirebaseException(
          plugin: 'cloud_firestore',
          message: 'User is already a member of this club',
          code: 'already-exists'
        );
      }
      
      // Add user to club members
      await userRef.set({
        'joinedAt': FieldValue.serverTimestamp(),
        'status': 'active',
      });
      
      // Update club member count
      await _firestore.collection('clubs').doc(clubId).update({
        'memberCount': FieldValue.increment(1),
      });
    } on FirebaseException catch (e) {
      if (e.code == 'already-exists') {
        // Handle already a member
        _logWarning('User attempted to join a club they are already a member of');
        rethrow;
      } else if (e.code == 'permission-denied') {
        // Handle permission issues
        _logError('Permission denied when joining club', e);
        throw const ClubJoinException('You do not have permission to join this club');
      } else {
        // Handle other Firebase errors
        _logError('Error joining club', e);
        throw ClubJoinException('Failed to join club: ${e.message}');
      }
    } catch (e) {
      // Handle unexpected errors
      _logError('Unexpected error joining club', e);
      throw const ClubJoinException('An unexpected error occurred');
    }
  }
  ```

### 11.6 Offline Capability
- Configure Firestore persistence for offline access
- Implement optimistic UI updates for better user experience
- Handle reconnection gracefully with proper state reconciliation
- Use NetworkDetector to adapt UI for offline mode
- Display appropriate offline indicators when connectivity is lost
- Ensure authentication persistence is enabled for mobile platforms:
  ```dart
  // Set up persistent authentication
  if (!kIsWeb && (defaultTargetPlatform == TargetPlatform.android || 
                  defaultTargetPlatform == TargetPlatform.iOS)) {
    await FirebaseAuth.instance.setPersistence(Persistence.LOCAL);
    debugPrint('Firebase Auth persistence set to LOCAL');
  }
  ```
- Add proper security rules for user session persistence:
  ```
  // User session persistence
  match /user_sessions/{userId} {
    allow read, write: if isOwner(userId);
  }
  ```
- Example offline configuration:
  ```dart
  Future<void> initializeFirestore() async {
    // Enable Firestore offline persistence with size limit
    await FirebaseFirestore.instance.settings = Settings(
      persistenceEnabled: true,
      cacheSizeBytes: 10485760,  // 10 MB
    );
    
    // Setup network connectivity listener
    _connectivitySubscription = Connectivity()
        .onConnectivityChanged
        .listen(_updateConnectionStatus);
  }
  
  void _updateConnectionStatus(ConnectivityResult result) {
    final isConnected = result != ConnectivityResult.none;
    if (isConnected && _wasOffline) {
      // We're back online after being offline
      _syncOfflineChanges();
    }
    _wasOffline = !isConnected;
    
    // Update UI with connection status
    _connectionStateController.add(isConnected);
  }
  ```

### 11.7 Testing
- Create mock Firebase services for unit testing
- Use the Firebase emulator suite for integration tests
- Test security rules against expected access patterns
- Verify offline functionality works as expected
- Test error cases and recovery mechanisms
- Enforce limitations in security rules and test those limits