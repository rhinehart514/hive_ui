---
description: 
globs: 
alwaysApply: true
---
# HIVE Performance & Optimization Standards

## Component Architecture
- **File Structure**:
  - One primary export per file
  - Maximum 300 lines per file
  - Feature-based organization
  - Common components in /common
- **Component Design**:
  - Flat widget hierarchies
  - Small, focused components
  - Clear separation of concerns
  - Proper use of keys for state management

## State Management Patterns
- **Simple State**:
  - Use StateProvider
  - Local component state
  - Single value management
  - Immediate updates
- **Complex State**:
  - Use StateNotifierProvider
  - Immutable state objects
  - copyWith methods
  - State validation
- **Async Operations**:
  - Use FutureProvider
  - Proper loading states
  - Error handling
  - Cancellation support

## Resource Optimization
- **Memory Management**:
  - Dispose controllers properly
  - Clean up subscriptions
  - Handle memory leaks
  - Monitor heap usage
- **Asset Loading**:
  - Lazy load heavy resources
  - Implement proper caching
  - Optimize image loading
  - Use appropriate formats
- **List Performance**:
  - Implement pagination
  - Use virtualized lists
  - Lazy loading of items
  - Proper key usage

## Rendering Optimization
- **Build Method**:
  - Minimize rebuilds
  - No heavy computation
  - Use computed properties
  - Cache expensive operations
- **Animation**:
  - Profile animation timing
  - Use hardware acceleration
  - Optimize transition paths
  - Reduce animation complexity
- **Layout**:
  - Avoid nested scrolling
  - Minimize layout depth
  - Use const where possible
  - Implement proper constraints

## Performance Testing
- **Metrics**:
  - Frame timing
  - Memory usage
  - Load time
  - Interaction delay
- **Profiling**:
  - Regular performance audits
  - Memory leak detection
  - Animation smoothness
  - State update efficiency
- **Optimization**:
  - Critical path analysis
  - Resource usage monitoring
  - Bottleneck identification
  - Performance regression testing

## Implementation Requirements
- **Code Quality**:
  - Clean architecture principles
  - Proper error handling
  - Comprehensive logging
  - Maintainable structure
- **Testing**:
  - Unit tests for logic
  - Widget tests for UI
  - Integration tests for flows
  - Performance benchmarks
- **Documentation**:
  - Clear component APIs
  - Usage examples
  - Performance considerations
  - Optimization guidelines

## Ritual Performance
- **Animation Performance**:
  - Smooth transitions
  - Efficient particle systems
  - Optimized effects
  - Frame rate monitoring
- **Resource Management**:
  - Pre-load assets
  - Cache ritual resources
  - Clean up after completion
  - Memory usage optimization