---
description: 
globs: 
alwaysApply: true
---
# HIVE UI State Management with Riverpod

## 1. Provider Organization

### 1.1 Provider Structure
- Define providers at the top of the file or in a dedicated providers file for each feature.
- Group related providers together to maintain logical cohesion.
- Name providers clearly to indicate their purpose (e.g., `userProfileProvider`, `eventListProvider`).
- Use provider families when providers need to be parameterized.

### 1.2 Provider Scope
- Keep providers scoped to where they are needed; avoid global providers unless necessary.
- Use `ProviderScope` to override providers for testing.
- Consider feature-level provider scopes for larger features.
- Leverage `autoDispose` for providers that should be cleaned up when no longer used.

## 2. State Design

### 2.1 State Representation
- Create dedicated state classes for complex features.
- Implement `copyWith` methods on state classes to facilitate immutable updates.
- Use sealed classes or enums for representing different states (loading, error, success).
- Separate UI state from domain state where appropriate.

### 2.2 State Immutability
- Make state classes immutable using `final` fields.
- Never directly modify state; always create new state objects.
- Use the `@immutable` annotation for state classes.
- Consider using packages like `freezed` for automatic immutable class generation.

## 3. Provider Types

### 3.1 Provider Selection
- Use `Provider` for simple dependencies and services.
- Use `StateProvider` for simple state that can be directly modified.
- Use `StateNotifierProvider` for complex state with dedicated operations.
- Use `FutureProvider` for async operations that don't need manual control.
- Use `StreamProvider` for reactive data sources.

### 3.2 Combining Providers
- Use `ref.watch` to depend on other providers.
- Leverage computed providers to derive state from other providers.
- Use family providers for parameterized access.
- Create selector providers to access specific parts of larger state objects.

## 4. State Updates

### 4.1 Mutation Patterns
- Implement methods on `StateNotifier` classes for all state modifications.
- Use meaningful method names that describe the intent of the change.
- Return appropriate results from async operations to indicate success/failure.
- Separate read operations from write operations.

### 4.2 Async State
- Always handle loading, error, and success states explicitly.
- Use AsyncValue for representing async operations.
- Implement error recovery strategies in state notifiers.
- Preserve previous data when refreshing to avoid UI flicker.

## 5. State Consumption

### 5.1 Widget Integration
- Use `Consumer` or `ConsumerWidget` for accessing providers in widgets.
- Prefer `ref.watch` for values that affect the build method.
- Use `ref.read` for one-time reads, typically in callbacks.
- Leverage `select` to minimize rebuilds by watching only what's needed.

### 5.2 Granular Watching
- Watch only the specific parts of state that affect a widget.
- Break down complex widgets into smaller ones with targeted provider consumption.
- Use `select` to watch specific properties of a state object.
- Avoid watching providers in build methods of parent widgets if only children need the state.

## 6. Testing

### 6.1 Provider Testing
- Create mocks or fake implementations of dependencies for testing.
- Use `ProviderContainer` for unit testing providers.
- Override providers for isolated testing.
- Test state transitions thoroughly, especially edge cases.

### 6.2 Widget Testing with Providers
- Wrap test widgets in `ProviderScope` with overridden providers.
- Use `ProviderScope.overrides` to provide test implementations.
- Test different state scenarios (loading, error, success).
- Verify that UI correctly reflects state changes.

## 7. Firebase Integration

### 7.1 Firestore State
- Create repository classes that abstract Firestore operations.
- Use `StreamProvider` to expose Firestore document/collection streams.
- Handle Firestore errors gracefully within providers.
- Implement caching strategy for offline support.

### 7.2 Authentication State
- Use dedicated providers for authentication state.
- Separate user identity from user profile data.
- Implement proper error handling for auth operations.
- Ensure auth state changes trigger appropriate UI updates.

## 8. Performance Considerations

### 8.1 Provider Optimization
- Use `ref.listen` instead of `ref.watch` when you only need to react to changes.
- Implement caching for expensive computations.
- Use `keepAlive` judiciously for providers that are expensive to recreate.
- Consider using `AsyncValue.guard` for wrapping async operations.

### 8.2 Rebuilding Management
- Structure providers to minimize unnecessary widget rebuilds.
- Use fine-grained state objects that can be watched selectively.
- Implement proper memoization for computed values.
- Monitor and profile provider usage to identify performance bottlenecks. 