import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hive_ui/models/space.dart';
import 'package:hive_ui/models/user_profile.dart';
import 'package:hive_ui/theme/app_colors.dart';
import 'package:hive_ui/providers/space_providers.dart';
import 'package:hive_ui/providers/user_providers.dart';
import 'package:hive_ui/features/spaces/presentation/providers/user_spaces_providers.dart' as user_providers;
import 'package:hive_ui/features/spaces/presentation/providers/space_providers.dart' as space_providers;
import 'package:hive_ui/features/spaces/domain/entities/space_entity.dart';
import 'package:hive_ui/features/spaces/utils/model_converters.dart';
import 'package:hive_ui/services/analytics_service.dart';
import 'package:hive_ui/services/space_service.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:ui';

/// A widget that displays a list of spaces for a user profile
class ProfileSpacesList extends ConsumerStatefulWidget {
  /// The user profile
  final UserProfile profile;
  
  /// Whether this is the current user's profile
  final bool isCurrentUser;
  
  /// Callback when the action button is pressed
  final VoidCallback? onActionPressed;

  const ProfileSpacesList({
    super.key,
    required this.profile,
    required this.isCurrentUser,
    this.onActionPressed,
  });

  @override
  ConsumerState<ProfileSpacesList> createState() => _ProfileSpacesListState();
}

class _ProfileSpacesListState extends ConsumerState<ProfileSpacesList>
    with TickerProviderStateMixin {
  late TabController _tabController;
  final ScrollController _spacesScrollController = ScrollController();
  bool _isRefreshing = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    
    // Debug user clubs on initialization after the first frame
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _debugUserClubs();
      // Force refresh on initial load to ensure we have the latest data
      _refreshSpaces(showSnackbar: false);
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _spacesScrollController.dispose();
    super.dispose();
  }
  
  Future<void> _debugUserClubs() async {
    // Get current user data
    try {
      final userData = ref.read(userProvider);
      debugPrint('üîç DEBUG ProfileSpacesList - Current user data: ${userData?.id}');
      
      if (userData != null) {
        debugPrint('üîç DEBUG ProfileSpacesList - User has ${userData.joinedClubs.length} joined clubs: ${userData.joinedClubs}');
      }
    } catch (e) {
      debugPrint('Error debugging user clubs: $e');
    }
  }

  Future<void> _refreshSpaces({bool showSnackbar = true}) async {
    if (_isRefreshing) return;
    
    setState(() {
      _isRefreshing = true;
    });
    
    try {
      // Refresh user data to update spaces
      await ref.read(userProvider.notifier).refreshUserData();
      
      // Refresh spaces list
      await ref.refresh(space_providers.spacesProvider);
      
      if (showSnackbar) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Spaces refreshed'),
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      debugPrint('Error refreshing spaces: $e');
      
      if (showSnackbar) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Failed to refresh spaces'),
            duration: Duration(seconds: 2),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isRefreshing = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Tab bar that matches spaces page
        Container(
          height: 48,
          decoration: const BoxDecoration(
            border: Border(
              bottom: BorderSide(
                color: Colors.white10,
                width: 0.5,
              ),
            ),
          ),
          child: TabBar(
            controller: _tabController,
            labelColor: AppColors.gold,
            unselectedLabelColor: AppColors.textTertiary,
            indicatorColor: AppColors.gold,
            indicatorWeight: 3,
            indicatorSize: TabBarIndicatorSize.label,
            labelStyle: GoogleFonts.outfit(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
            unselectedLabelStyle: GoogleFonts.outfit(
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
            tabs: const [
              Tab(text: 'Explore'),
              Tab(text: 'My Spaces'),
            ],
          ),
        ),
        
        // Tab content
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              // Explore tab
              _buildExploreTab(),
              
              // My Spaces tab
              _buildMySpacesTab(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildExploreTab() {
    return RefreshIndicator(
      onRefresh: () => _refreshSpaces(),
      child: widget.isCurrentUser
          ? const _ExploreSpacesTab()
          : _buildProfileEmptyState(context),
    );
  }

  Widget _buildMySpacesTab() {
    return RefreshIndicator(
      onRefresh: () => _refreshSpaces(),
      child: widget.isCurrentUser
          ? const _CurrentUserSpacesList()
          : _OtherUserSpacesList(profile: widget.profile),
    );
  }

  /// Builds the empty state when no spaces are followed
  Widget _buildProfileEmptyState(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: MediaQuery.of(context).size.height * 0.4,
      child: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Container(
                width: 64,
                height: 64,
                decoration: BoxDecoration(
                  color: Colors.grey[850]!.withOpacity(0.3),
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  Icons.group,
                  color: Colors.white.withOpacity(0.7),
                  size: 32,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'No Spaces Yet',
                style: GoogleFonts.outfit(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.w600,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              Text(
                widget.isCurrentUser
                    ? 'Follow spaces to see them here'
                    : '${widget.profile.username} hasn\'t followed any spaces yet',
                textAlign: TextAlign.center,
                style: GoogleFonts.inter(
                  color: Colors.white.withOpacity(0.7),
                  fontSize: 14,
                  height: 1.4,
                ),
              ),
              if (widget.isCurrentUser && widget.onActionPressed != null) ...[
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: widget.onActionPressed,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppColors.gold,
                    foregroundColor: Colors.black,
                    elevation: 0,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 24,
                      vertical: 12,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  child: Text(
                    'Explore Spaces',
                    style: GoogleFonts.inter(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}

/// A widget that displays the current user's joined spaces
class _CurrentUserSpacesList extends ConsumerWidget {
  const _CurrentUserSpacesList();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userSpacesAsyncValue = ref.watch(user_providers.userSpacesProvider);
    
    return userSpacesAsyncValue.when(
      loading: () => const Center(
        child: CircularProgressIndicator(color: AppColors.gold),
      ),
      error: (error, stackTrace) => Center(
        child: Text(
          'Error loading your spaces: $error',
          style: GoogleFonts.inter(color: Colors.white),
          textAlign: TextAlign.center,
        ),
      ),
      data: (spaces) {
        if (spaces.isEmpty) {
          return Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.group,
                    color: Colors.white.withOpacity(0.5),
                    size: 64,
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'You haven\'t joined any spaces yet',
                    style: GoogleFonts.outfit(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Join spaces to see them here',
                    style: GoogleFonts.inter(
                      color: Colors.white.withOpacity(0.7),
                      fontSize: 14,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 24),
                  ElevatedButton(
                    onPressed: () {
                      // Navigate to explore spaces
                      GoRouter.of(context).go('/spaces');
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.gold,
                      foregroundColor: Colors.black,
                      elevation: 0,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 32,
                        vertical: 12,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                    ),
                    child: Text(
                      'Explore Spaces',
                      style: GoogleFonts.inter(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          );
        }
      
        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: spaces.length,
          itemBuilder: (context, index) => _buildSpaceEntityItem(context, spaces[index]),
        );
      },
    );
  }
  
  // Method to build a space item from SpaceEntity
  Widget _buildSpaceEntityItem(BuildContext context, dynamic spaceEntity) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      color: Colors.grey[900],
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          // Navigate to space details
          HapticFeedback.selectionClick();
          GoRouter.of(context).push('/spaces/${spaceEntity.id}');
        },
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Row(
            children: [
              // Space image
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: Colors.grey[800],
                  borderRadius: BorderRadius.circular(8),
                  image: spaceEntity.imageUrl != null && spaceEntity.imageUrl!.isNotEmpty
                      ? DecorationImage(
                          image: NetworkImage(spaceEntity.imageUrl!),
                          fit: BoxFit.cover,
                        )
                      : null,
                ),
                child: spaceEntity.imageUrl == null || spaceEntity.imageUrl!.isEmpty
                    ? const Icon(
                        Icons.group,
                        color: AppColors.gold,
                        size: 24,
                      )
                    : null,
              ),
              const SizedBox(width: 12),
              // Space info
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      spaceEntity.name,
                      style: GoogleFonts.outfit(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      spaceEntity.description,
                      style: GoogleFonts.inter(
                        color: Colors.white.withOpacity(0.7),
                        fontWeight: FontWeight.w400,
                        fontSize: 14,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        const Icon(
                          Icons.check_circle,
                          color: AppColors.gold,
                          size: 14,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          'Member',
                          style: GoogleFonts.inter(
                            color: AppColors.gold,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Icon(
                          Icons.people,
                          color: Colors.white.withOpacity(0.5),
                          size: 14,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${spaceEntity.metrics.memberCount} members',
                          style: GoogleFonts.inter(
                            color: Colors.white.withOpacity(0.5),
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              // View button
              Container(
                width: 80,
                height: 32,
                margin: const EdgeInsets.only(left: 8),
                child: OutlinedButton(
                  onPressed: () {
                    // View space
                    HapticFeedback.mediumImpact();
                    GoRouter.of(context).push('/spaces/${spaceEntity.id}');
                  },
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.white,
                    side: const BorderSide(color: Colors.white30, width: 1),
                    padding: EdgeInsets.zero,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                  ),
                  child: Text(
                    'View',
                    style: GoogleFonts.inter(
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// Tab for exploring spaces - implementation matches spaces page explore tab
class _ExploreSpacesTab extends ConsumerWidget {
  const _ExploreSpacesTab();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Get the spaces from the provider
    final spacesAsyncValue = ref.watch(space_providers.spacesProvider);
    
    return spacesAsyncValue.when(
      loading: () => const Center(
        child: CircularProgressIndicator(color: AppColors.gold),
      ),
      error: (error, stackTrace) => Center(
        child: Text(
          'Error loading spaces: $error',
          style: GoogleFonts.inter(color: Colors.white),
        ),
      ),
      data: (spaces) {
        if (spaces.isEmpty) {
          return Center(
            child: Text(
              'No spaces available',
              style: GoogleFonts.inter(color: Colors.white),
            ),
          );
        }
        
        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: spaces.length,
          itemBuilder: (context, index) {
            final space = spaces[index];
            // Convert SpaceEntity to Space before passing to _buildSpaceListItem
            final legacySpace = _convertEntityToLegacySpace(space);
            return _buildSpaceListItem(context, legacySpace);
          },
        );
      },
    );
  }
  
  /// Convert SpaceEntity to legacy Space for backward compatibility
  Space _convertEntityToLegacySpace(SpaceEntity entity) {
    return Space(
      id: entity.id,
      name: entity.name,
      description: entity.description,
      icon: entity.icon,
      imageUrl: entity.imageUrl,
      bannerUrl: entity.bannerUrl,
      metrics: SpaceMetrics.initial(entity.id), // Default metrics
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }
  
  /// Build an individual space list item
  Widget _buildSpaceListItem(BuildContext context, Space space) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      color: Colors.grey[900],
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          // Navigate to space details
          HapticFeedback.selectionClick();
          GoRouter.of(context).push('/spaces/${space.id}');
        },
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Row(
            children: [
              // Space image
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: Colors.grey[800],
                  borderRadius: BorderRadius.circular(8),
                  image: space.imageUrl != null && space.imageUrl!.isNotEmpty
                      ? DecorationImage(
                          image: NetworkImage(space.imageUrl!),
                          fit: BoxFit.cover,
                        )
                      : null,
                ),
                child: space.imageUrl == null || space.imageUrl!.isEmpty
                    ? const Icon(
                        Icons.group,
                        color: AppColors.gold,
                        size: 24,
                      )
                    : null,
              ),
              const SizedBox(width: 12),
              // Space info
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      space.name,
                      style: GoogleFonts.outfit(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                        fontSize: 16,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      space.description,
                      style: GoogleFonts.inter(
                        color: Colors.white.withOpacity(0.7),
                        fontWeight: FontWeight.w400,
                        fontSize: 14,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Row(
                      children: [
                        Icon(
                          Icons.people,
                          color: Colors.white.withOpacity(0.5),
                          size: 14,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          '${space.metrics.memberCount} members',
                          style: GoogleFonts.inter(
                            color: Colors.white.withOpacity(0.5),
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              // Join button
              Container(
                width: 80,
                height: 32,
                margin: const EdgeInsets.only(left: 8),
                child: ElevatedButton(
                  onPressed: () {
                    // Join space
                    HapticFeedback.mediumImpact();
                    // Implementation for joining space
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: AppColors.gold,
                    foregroundColor: Colors.black,
                    elevation: 0,
                    padding: EdgeInsets.zero,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                  ),
                  child: Text(
                    'Join',
                    style: GoogleFonts.inter(
                      fontSize: 12,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

/// Tab for other user's spaces
class _OtherUserSpacesList extends ConsumerWidget {
  final UserProfile profile;
  
  const _OtherUserSpacesList({required this.profile});
  
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final List<String> followedSpaces = profile.followedSpaces;
    
    if (followedSpaces.isEmpty) {
      return Center(
        child: Text(
          '${profile.username} hasn\'t joined any spaces yet',
          style: GoogleFonts.inter(color: Colors.white),
          textAlign: TextAlign.center,
        ),
      );
    }
    
    // TODO: Implement query to get spaces by IDs
    return Center(
      child: Text(
        'Loading ${profile.username}\'s spaces...',
        style: GoogleFonts.inter(color: Colors.white),
        textAlign: TextAlign.center,
      ),
    );
  }
} 