import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:auto_route/auto_route.dart';
import 'package:hive_ui/features/spaces/presentation/providers/space_providers.dart';
import 'package:hive_ui/features/spaces/presentation/providers/spaces_controller.dart';
import 'package:hive_ui/features/spaces/presentation/widgets/space_grid.dart';
import 'package:hive_ui/features/spaces/presentation/widgets/space_card.dart';
import 'package:hive_ui/models/space.dart';
import 'package:hive_ui/theme/app_colors.dart';
import 'package:hive_ui/theme/huge_icons.dart';
import 'package:hive_ui/features/clubs/presentation/pages/club_space_page.dart';
import 'package:hive_ui/services/analytics_service.dart';
import 'package:hive_ui/extensions/glassmorphism_extension.dart';
import 'package:hive_ui/core/navigation/router_config.dart';
import 'package:hive_ui/models/space_metrics.dart';
import 'package:hive_ui/services/space_service.dart';
import 'package:hive_ui/features/spaces/utils/space_path_fixer.dart';
import 'package:hive_ui/features/spaces/utils/space_collection_initializer.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:go_router/go_router.dart';
import 'dart:math' as math;

@RoutePage()
class SpacesPage extends ConsumerStatefulWidget {
  const SpacesPage({super.key});

  @override
  ConsumerState<SpacesPage> createState() => _SpacesPageState();
}

class _SpacesPageState extends ConsumerState<SpacesPage> with TickerProviderStateMixin {
  final TextEditingController _searchController = TextEditingController();
  final FocusNode _searchFocusNode = FocusNode();
  bool _isSearchExpanded = false;
  bool _isFilterExpanded = false;
  final Set<String> _activeFilters = <String>{};
  
  // Scroll controllers
  final ScrollController _mainScrollController = ScrollController();
  final ScrollController _categoriesScrollController = ScrollController();
  final ScrollController _mySpacesScrollController = ScrollController();
  
  // Tab controller for explore/my spaces
  TabController? _tabController;
  
  String _activeCategory = 'All';
  bool _isRefreshing = false;
  bool _isLoadingMore = false;
  int _currentPage = 1;
  final int _spacesPerPage = 20;
  
  // Define space categories - condensed to most important for students
  final List<String> _categories = [
    'All',
    'Student Orgs',
    'Academic',
    'Social',
    'Greek Life',
    'Campus Living',
  ];
  
  @override
  void initState() {
    super.initState();
    
    // Initialize tab controller
    _tabController = TabController(length: 2, vsync: this);
    
    // Setup scroll controller for pagination
    _mainScrollController.addListener(_scrollListener);
    
    // Log screen view
    AnalyticsService.logScreenView('spaces_page');
  }

  void _scrollListener() {
    if (!_isLoadingMore && 
        _mainScrollController.position.pixels >= 
        _mainScrollController.position.maxScrollExtent * 0.8) {
      _loadMoreSpaces();
    }
  }
  
  Future<void> _loadMoreSpaces() async {
    if (_isLoadingMore) return;
    
    setState(() {
      _isLoadingMore = true;
    });
    
    try {
      // Load next page of spaces
      _currentPage++;
      await ref.read(spacesControllerProvider.notifier).loadMoreSpaces(_currentPage, _spacesPerPage);
      
      // Small delay to prevent rapid multiple loads if the user is scrolling fast
      await Future.delayed(const Duration(milliseconds: 300));
    } catch (e) {
      debugPrint('Error loading more spaces: $e');
    } finally {
      if (mounted) {
        setState(() {
          _isLoadingMore = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    _mainScrollController.dispose();
    _categoriesScrollController.dispose();
    _mySpacesScrollController.dispose();
    // Safely dispose tab controller
    _tabController?.dispose();
    super.dispose();
  }
  
  // Refresh all spaces data
  Future<void> _refreshSpaces() async {
    setState(() {
      _isRefreshing = true;
      _currentPage = 1; // Reset to first page
    });
    
    try {
      // Refresh all spaces data
      // ignore: unused_result
      ref.refresh(hierarchicalSpacesProvider);
      // ignore: unused_result
      ref.refresh(userSpacesProvider);
      // ignore: unused_result
      ref.refresh(trendingSpacesProvider);
    } finally {
      if (mounted) {
        setState(() {
          _isRefreshing = false;
        });
      }
    }
  }
  
  // Handle space joining
  void _handleJoinSpace(Space space) {
    HapticFeedback.mediumImpact();
    // Show join space dialog instead of direct join
    _showJoinSpaceDialog(context);
  }
  
  // Handle space tapping
  void _handleTapSpace(Space space) {
    HapticFeedback.mediumImpact();
    try {
      // Format the club ID correctly to match the fallback format and ensure proper permissions
      // The path should match what's allowed in the security rules
      // ignore: unnecessary_null_comparison
      final String spaceType = space.spaceType != null 
          ? space.spaceType.toString().toLowerCase()
          : 'student_organizations';
      final String clubId = space.id.contains('space_') 
          ? space.id 
          : 'space_${space.name.toLowerCase().replaceAll(' ', '_')}';
      
      debugPrint('Navigating to club space with ID: $clubId (type: $spaceType)');
      
      // Navigate to club space using GoRouter with the formatted ID
      GoRouter.of(context).push('/spaces/club?id=$clubId&type=$spaceType');
      
      // Log analytics
      AnalyticsService.logEvent(
        'view_space',
        parameters: {
          'space_id': space.id,
          'space_name': space.name,
          'space_type': space.spaceType.toString(),
        },
      );
    } catch (e) {
      debugPrint('Error navigating to space: $e');
      // Show error snackbar
      if (mounted) {
        String errorMessage = 'Error opening space';
        
        // Check if this is a permission error and provide a more helpful message
        if (e.toString().contains('permission-denied') || e.toString().contains('PERMISSION_DENIED')) {
          errorMessage = 'Permission denied. Please try again later or contact support.';
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: Colors.red[700],
            duration: const Duration(seconds: 3),
            action: SnackBarAction(
              label: 'OK',
              textColor: Colors.white,
              onPressed: () {},
            ),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final userSpaces = ref.watch(userSpacesProvider);
    final allSpaces = ref.watch(hierarchicalSpacesProvider);
    
    return Scaffold(
      body: RefreshIndicator(
        color: AppColors.gold,
        backgroundColor: Colors.black.withOpacity(0.7),
        onRefresh: _refreshSpaces,
        child: Column(
          children: [
            // Header with tabs
            _buildHeader(),
            
            // Tab content
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  // Explore tab
                  _buildExploreTab(allSpaces),
                  
                  // My Spaces tab
                  _buildMySpacesTab(userSpaces),
                ],
              ),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        // Use a unique key for this FAB to avoid conflicts
        key: const ValueKey<String>('spaces_fab'),
        onPressed: () {
          HapticFeedback.mediumImpact();
          _showJoinSpaceDialog(context);
        },
        backgroundColor: AppColors.gold,
        foregroundColor: Colors.black,
        elevation: 4,
        tooltip: 'Create or Join Space',
        child: const HugeIcon(
          icon: HugeIcons.strokeRoundedPlusSignCircle,
          size: 24,
        ),
      ),
    );
  }
  
  // Header with tabs
  Widget _buildHeader() {
    return Container(
      color: Colors.black,
      child: SafeArea(
        bottom: false,
        child: Column(
          children: [
            // App bar with title and search
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 8, 8, 4),
      child: Row(
        children: [
          Text(
            'Spaces',
            style: GoogleFonts.outfit(
              fontSize: 22,
              fontWeight: FontWeight.w600,
              color: Colors.white,
            ),
          ),
          const Spacer(),
                  // Search button
                  IconButton(
                    icon: Icon(
                      _isSearchExpanded ? Icons.close : Icons.search,
                      color: AppColors.gold,
                    ),
                    onPressed: () {
                      setState(() {
                        _isSearchExpanded = !_isSearchExpanded;
                        if (!_isSearchExpanded) {
                          _searchController.clear();
                          FocusScope.of(context).unfocus();
                        } else {
                          FocusScope.of(context).requestFocus(_searchFocusNode);
                        }
                      });
                    },
                    splashRadius: 20,
                  ),
                  // Refresh button
          IconButton(
            icon: _isRefreshing 
              ? SizedBox(
                          width: 18,
                          height: 18, 
                  child: CircularProgressIndicator(
                    color: AppColors.gold,
                            strokeWidth: 2,
                  ),
                )
              : Icon(
                  Icons.refresh_rounded,
                  color: AppColors.gold,
                ),
            onPressed: _isRefreshing ? null : _refreshSpaces,
                    splashRadius: 20,
          ),
        ],
      ),
            ),
            
            // Search bar (expandable)
            AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              height: _isSearchExpanded ? 56 : 0,
              curve: Curves.easeInOut,
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: _isSearchExpanded ? Container(
      decoration: BoxDecoration(
                  color: Colors.grey[900],
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: AppColors.gold.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: TextField(
          controller: _searchController,
          focusNode: _searchFocusNode,
          decoration: InputDecoration(
            hintText: 'Search spaces...',
            hintStyle: GoogleFonts.inter(
              color: Colors.white38,
              fontSize: 14,
            ),
            prefixIcon: const Icon(
              Icons.search,
              color: Colors.white38,
                      size: 16,
            ),
            suffixIcon: _searchController.text.isNotEmpty
              ? IconButton(
                  icon: const Icon(
                    Icons.clear,
                            size: 14,
                    color: Colors.white38,
                  ),
                  onPressed: () {
                    setState(() {
                              _searchController.clear();
                              _currentPage = 1;
                    });
                            _refreshSpaces();
                  },
                          constraints: const BoxConstraints(
                            minWidth: 32,
                            minHeight: 32,
                          ),
                )
              : null,
            border: InputBorder.none,
                    contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
          ),
          style: GoogleFonts.inter(
            color: Colors.white,
            fontSize: 14,
          ),
          textInputAction: TextInputAction.search,
          onSubmitted: (value) {
            setState(() {
                      _currentPage = 1;
            });
            _refreshSpaces();
          },
          onChanged: (value) {
            setState(() {});
          },
        ),
              ) : null,
            ),
            
            // Tabs
            if (_tabController != null) // Check that _tabController is initialized
              TabBar(
                controller: _tabController,
                indicatorColor: AppColors.gold,
                indicatorWeight: 3,
                labelColor: AppColors.gold,
                unselectedLabelColor: Colors.white70,
                labelStyle: GoogleFonts.outfit(
                  fontWeight: FontWeight.w600,
                  fontSize: 14,
                ),
                unselectedLabelStyle: GoogleFonts.outfit(
                  fontWeight: FontWeight.w400,
                  fontSize: 14,
                ),
                tabs: const [
                  Tab(text: 'Explore'),
                  Tab(text: 'My Spaces'),
                ],
              ),
          ],
        ),
      ),
    );
  }
  
  // Explore tab view
  Widget _buildExploreTab(AsyncValue<Map<String, List<Space>>> allSpaces) {
    return CustomScrollView(
      controller: _mainScrollController,
      physics: const AlwaysScrollableScrollPhysics(),
      slivers: [
        // Category selector
        SliverPersistentHeader(
          delegate: _SliverCategorySelectorDelegate(
            visible: true,
            child: _buildCategorySelector(),
          ),
          pinned: true,
        ),
        
        // Trending spaces section
        SliverToBoxAdapter(
          child: _buildTrendingSpaces(ref.watch(trendingSpacesProvider)),
        ),
        
        // Spaces Grid
        _buildSpacesGrid(allSpaces),
      ],
    );
  }
  
  // My Spaces tab view
  Widget _buildMySpacesTab(AsyncValue<List<Space>> userSpaces) {
    return userSpaces.when(
      data: (spaces) {
        if (spaces.isEmpty) {
          return _buildEmptyMySpaces();
        }
        
        return CustomScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          slivers: [
            SliverPadding(
              padding: const EdgeInsets.all(16),
              sliver: SliverList(
                delegate: SliverChildBuilderDelegate(
                  (context, index) {
                    if (index == 0) {
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: Text(
                          'Your Joined Spaces',
                          style: GoogleFonts.outfit(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                      );
                    }
                    
                    final spaceIndex = index - 1;
                    if (spaceIndex < spaces.length) {
                      return AnimationConfiguration.staggeredList(
                        position: spaceIndex,
                        duration: const Duration(milliseconds: 375),
                        child: SlideAnimation(
                          verticalOffset: 50,
                          child: FadeInAnimation(
                            child: _buildSpaceListItem(spaces[spaceIndex], spaceIndex, inMySpaces: true),
                          ),
                        ),
                      );
                    }
                    
                    return null;
                  },
                  childCount: spaces.length + 1,
                ),
              ),
            ),
          ],
        );
      },
      loading: () => const Center(
        child: CircularProgressIndicator(color: AppColors.gold),
      ),
      error: (error, stackTrace) => Center(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
              child: Column(
            mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                Icons.error_outline,
                color: Colors.red[300],
                size: 48,
              ),
              const SizedBox(height: 16),
                      Text(
                'Unable to load your spaces',
                        style: GoogleFonts.outfit(
                  fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
              const SizedBox(height: 8),
              Text(
                'Pull down to try again',
                style: GoogleFonts.inter(
                  fontSize: 14,
                  color: Colors.white70,
                ),
              ),
              const SizedBox(height: 24),
              OutlinedButton(
                onPressed: _refreshSpaces,
                style: OutlinedButton.styleFrom(
                  foregroundColor: AppColors.gold,
                  side: BorderSide(color: AppColors.gold),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                ),
                child: Text(
                  'Retry',
                  style: GoogleFonts.inter(fontWeight: FontWeight.w500),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Empty state for My Spaces tab
  Widget _buildEmptyMySpaces() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.grey[900],
                border: Border.all(
                  color: AppColors.gold.withOpacity(0.5),
                  width: 2,
                ),
              ),
              child: Icon(
                Icons.bookmark_border,
                size: 36,
                color: AppColors.gold,
              ),
            ),
            const SizedBox(height: 24),
                  Text(
              'No Spaces Joined Yet',
              style: GoogleFonts.outfit(
                fontSize: 20,
                fontWeight: FontWeight.w600,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Join spaces to connect with other students and organizations.',
              textAlign: TextAlign.center,
                    style: GoogleFonts.inter(
                fontSize: 14,
                      color: Colors.white70,
                    ),
                  ),
            const SizedBox(height: 32),
                  ElevatedButton(
                    onPressed: () {
                _tabController?.animateTo(0); // Switch to Explore tab
                Future.delayed(const Duration(milliseconds: 300), () {
                      _showJoinSpaceDialog(context);
                });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.gold,
                      foregroundColor: Colors.black,
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                  const Icon(Icons.add, size: 18),
                  const SizedBox(width: 8),
                        Text(
                    'Find Spaces to Join',
                          style: GoogleFonts.inter(
                            fontWeight: FontWeight.w600,
                      fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          );
  }
  
  // Category selector with horizontal scrolling
  Widget _buildCategorySelector() {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      height: 56,
      decoration: BoxDecoration(
        color: Colors.black,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListView.builder(
        controller: _categoriesScrollController,
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        itemCount: _categories.length,
        itemBuilder: (context, index) {
          final category = _categories[index];
          final isActive = _activeCategory == category;
          
          return Padding(
            padding: const EdgeInsets.only(right: 8),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              child: ChoiceChip(
                label: Text(category),
                selected: isActive,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      _activeCategory = category;
                    });
                    HapticFeedback.selectionClick();
                    
                    // Animate scroll to top when changing categories
                    if (_mainScrollController.hasClients) {
                      _mainScrollController.animateTo(
                        0,
                        duration: const Duration(milliseconds: 300),
                        curve: Curves.easeInOut,
                      );
                    }
                  }
                },
                backgroundColor: Colors.grey[900],
                selectedColor: AppColors.gold,
                labelStyle: GoogleFonts.inter(
                  color: isActive ? Colors.black : Colors.white70,
                  fontWeight: isActive ? FontWeight.bold : FontWeight.normal,
                  fontSize: 13,
                ),
                padding: const EdgeInsets.symmetric(horizontal: 12),
                elevation: isActive ? 2 : 0,
                shadowColor: isActive ? AppColors.gold.withOpacity(0.5) : Colors.transparent,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                  side: BorderSide(
                    color: isActive ? AppColors.gold : Colors.transparent,
                    width: 1,
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
  
  // Build trending spaces section
  Widget _buildTrendingSpaces(AsyncValue<List<Space>> trendingSpaces) {
    return trendingSpaces.when(
      data: (spaces) {
        if (spaces.isEmpty) {
          return const SizedBox.shrink();
        }
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
              child: Row(
                children: [
                  Icon(
                    Icons.trending_up,
                    size: 18,
                    color: AppColors.gold,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Trending Spaces',
                    style: GoogleFonts.outfit(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                      ),
                    ),
                ],
              ),
            ),
            SizedBox(
              height: 120,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                padding: const EdgeInsets.only(left: 16, right: 8),
                itemCount: spaces.length,
                itemBuilder: (context, index) {
                  final space = spaces[index];
                  return Padding(
                    padding: const EdgeInsets.only(right: 12),
                    child: SizedBox(
                      width: 160,
                      child: AnimationConfiguration.staggeredList(
                        position: index,
                        duration: const Duration(milliseconds: 375),
                        child: SlideAnimation(
                          horizontalOffset: 50,
                          child: FadeInAnimation(
                            child: _buildMySpaceCard(space),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
            const SizedBox(height: 8),
          ],
        );
      },
      loading: () => const SizedBox(
        height: 0,
      ),
      error: (_, __) => const SizedBox(
        height: 0,
      ),
    );
  }

  // Main spaces grid with filtered content - redesigned for better mobile experience
  Widget _buildSpacesGrid(AsyncValue<Map<String, List<Space>>> spacesMap) {
    return spacesMap.when(
      data: (spacesData) {
        // Filter spaces based on selected category
        List<Space> spaces = [];
        
        if (_activeCategory == 'All') {
          // Combine all spaces from different categories
          spacesData.forEach((key, value) {
            spaces.addAll(value);
          });
        } else {
          // Map the UI category to the data category
          String dataCategory;
          switch (_activeCategory) {
            case 'Student Orgs':
              dataCategory = 'Student Organizations';
              break;
            case 'Academic':
              dataCategory = 'Academic Departments';
              break;
            case 'Social':
              dataCategory = 'Social Groups';
              break;
            case 'Campus Living':
              dataCategory = 'Campus Living';
              break;
            case 'Greek Life':
              dataCategory = 'Greek Life';
              break;
            default:
              dataCategory = 'Other Spaces';
          }
          
          // Get spaces from the selected category
          spaces = spacesData[dataCategory] ?? [];
        }
        
        // Apply search filter if needed
        final searchQuery = _searchController.text.toLowerCase();
        if (searchQuery.isNotEmpty) {
          spaces = spaces.where((space) =>
            space.name.toLowerCase().contains(searchQuery) ||
            space.description.toLowerCase().contains(searchQuery) ||
            (space.tags?.any((tag) => tag.toLowerCase().contains(searchQuery)) ?? false)
          ).toList();
        }
        
        // Apply tag filters if any are active
        if (_activeFilters.isNotEmpty) {
          spaces = spaces.where((space) =>
            space.tags != null && space.tags.any((tag) => 
              _activeFilters.any((filter) => 
                tag.toLowerCase().contains(filter.toLowerCase())
              )
            )
          ).toList();
        }
        
        // Sort spaces: trending/popular first
        spaces.sort((a, b) {
          // First prioritize spaces with more members
          final aMemberCount = a.metrics?.memberCount ?? 0;
          final bMemberCount = b.metrics?.memberCount ?? 0;
          
          if (bMemberCount != aMemberCount) {
            return bMemberCount.compareTo(aMemberCount);
          }
          
          // Then alphabetically
          return a.name.compareTo(b.name);
        });
        
        if (spaces.isEmpty) {
          return SliverFillRemaining(
            hasScrollBody: false,
            child: _buildEmptyState(
              searchQuery.isNotEmpty || _activeFilters.isNotEmpty
                ? 'No spaces found'
                : 'No spaces available',
              searchQuery.isNotEmpty || _activeFilters.isNotEmpty
                ? 'Try different search terms or filters'
                : 'Check back later or try another category',
              searchQuery.isNotEmpty ? Icons.search_off : Icons.category_outlined,
            ),
          );
        }
        
        // Limit to current page × spaces per page
        final displayCount = _currentPage * _spacesPerPage;
        final displaySpaces = spaces.take(displayCount).toList();
        final hasMore = spaces.length > displaySpaces.length;
        
        return SliverList(
            delegate: SliverChildBuilderDelegate(
              (context, index) {
              // Show search filters (visible when search is active)
              if (index == 0) {
                return _searchController.text.isNotEmpty || _activeFilters.isNotEmpty
                  ? Column(
                      children: [
                        if (_searchController.text.isNotEmpty) 
                          Padding(
                            padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.search,
                                  size: 18,
                                  color: AppColors.gold,
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  'Search Results',
                                  style: GoogleFonts.outfit(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.white,
                                  ),
                                ),
                                const Spacer(),
                                if (_searchController.text.isNotEmpty || _activeFilters.isNotEmpty)
                                  TextButton.icon(
                                    icon: const Icon(Icons.filter_list, size: 16),
                                    label: Text(_isFilterExpanded ? 'Hide Filters' : 'Filters'),
                                    onPressed: () {
                                      setState(() {
                                        _isFilterExpanded = !_isFilterExpanded;
                                      });
                                    },
                                    style: TextButton.styleFrom(
                                      foregroundColor: AppColors.gold,
                                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                      tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                    ),
                                  ),
                              ],
                            ),
                          ),
                        
                        // Advanced filtering options (expandable)
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          height: _isFilterExpanded ? null : 0,
                          curve: Curves.easeInOut,
                          child: _isFilterExpanded ? _buildAdvancedFilterOptions() : const SizedBox.shrink(),
                        ),
                      ],
                    )
                  : const SizedBox.shrink();
              }
              
              // Adjust index for spaces to account for the filters header
              final spaceIndex = index - 1;
              
              // Loading indicator at the end
              if (spaceIndex == displaySpaces.length && hasMore) {
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    if (!_isLoadingMore) {
                      _loadMoreSpaces();
                    }
                  });
                  
                  return const Center(
                    child: Padding(
                    padding: EdgeInsets.symmetric(vertical: 24.0),
                      child: CircularProgressIndicator(color: AppColors.gold),
                    ),
                  );
                }
                
              // Regular space list item
              if (spaceIndex >= 0 && spaceIndex < displaySpaces.length) {
                final space = displaySpaces[spaceIndex];
                return _buildSpaceListItem(space, spaceIndex);
                }
                
                return const SizedBox.shrink();
              },
            childCount: hasMore 
              ? displaySpaces.length + 2  // +1 for filters header, +1 for loading indicator
              : displaySpaces.length + 1, // +1 for filters header
          ),
        );
      },
      loading: () => const SliverFillRemaining(
        child: Center(
          child: CircularProgressIndicator(color: AppColors.gold),
        ),
      ),
      error: (error, stackTrace) => SliverFillRemaining(
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.error_outline,
                  color: Colors.red[300],
                  size: 48,
                ),
                const SizedBox(height: 16),
                Text(
                  'Unable to load spaces',
                  style: GoogleFonts.outfit(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Pull down to try again',
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  // Advanced filtering widget
  Widget _buildAdvancedFilterOptions() {
    // Common tags for filtering
    final filterTags = [
      'Academic', 'Social', 'Arts', 'Sports', 'Greek Life', 'Technology',
      'Business', 'Service', 'Cultural', 'Gaming', 'New'
    ];
    
    // Build tag filters
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.grey[900]!.withOpacity(0.7),
        border: Border(
          top: BorderSide(color: Colors.grey[800]!, width: 1),
          bottom: BorderSide(color: Colors.grey[800]!, width: 1),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Filter by Tags',
            style: GoogleFonts.inter(
              color: Colors.white,
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: filterTags.map((tag) {
              final isSelected = _activeFilters.contains(tag);
              return GestureDetector(
                onTap: () {
                  setState(() {
                    if (isSelected) {
                      _activeFilters.remove(tag);
                    } else {
                      _activeFilters.add(tag);
                    }
                    _currentPage = 1; // Reset pagination when filters change
                  });
                  _refreshSpaces();
                  HapticFeedback.selectionClick();
                },
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: isSelected
                        ? AppColors.gold.withOpacity(0.2)
                        : Colors.black.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: isSelected 
                          ? AppColors.gold 
                          : Colors.white.withOpacity(0.1),
                      width: 1,
                    ),
                  ),
          child: Text(
                    tag,
                    style: GoogleFonts.inter(
                      fontSize: 12,
                      fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                      color: isSelected 
                          ? AppColors.gold 
                          : Colors.white.withOpacity(0.8),
                    ),
                  ),
                ),
              );
            }).toList(),
          ),
          
          // Reset filters button if any are active
          if (_activeFilters.isNotEmpty) 
            Align(
              alignment: Alignment.centerRight,
              child: TextButton(
                onPressed: () {
                  setState(() {
                    _activeFilters.clear();
                    _currentPage = 1;
                  });
                  _refreshSpaces();
                },
                style: TextButton.styleFrom(
                  foregroundColor: AppColors.gold,
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                ),
                child: Text(
                  'Reset Filters',
                  style: GoogleFonts.inter(
                    fontSize: 12,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
  
  // Redesigned My Spaces card
  Widget _buildMySpaceCard(Space space) {
    final hasImage = space.imageUrl != null && space.imageUrl!.isNotEmpty;
    
    return Container(
            clipBehavior: Clip.antiAlias,
            decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
              gradient: LinearGradient(
                colors: [
            Colors.black,
            Colors.grey[900]!.withOpacity(0.5),
                ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
              ),
              border: Border.all(
          color: AppColors.gold.withOpacity(0.3),
                width: 1,
              ),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () => _handleTapSpace(space),
          splashColor: AppColors.gold.withOpacity(0.1),
          highlightColor: AppColors.gold.withOpacity(0.05),
            child: Stack(
              children: [
              // Background image with overlay
                if (hasImage)
                  Positioned.fill(
                      child: Opacity(
                    opacity: 0.3,
                        child: Image.network(
                          space.imageUrl!,
                          fit: BoxFit.cover,
                          errorBuilder: (_, __, ___) => const SizedBox.shrink(),
                      ),
                    ),
                  ),
                
                // Content
              Padding(
                    padding: const EdgeInsets.all(12),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                    // Space type badge
                    if (space.spaceType != null)
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                        decoration: BoxDecoration(
                          color: AppColors.gold.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(4),
                          border: Border.all(
                            color: AppColors.gold.withOpacity(0.5),
                            width: 0.5,
                          ),
                        ),
                        child: Text(
                          _formatSpaceType(space.spaceType.toString()),
                          style: GoogleFonts.inter(
                            fontSize: 9,
                            color: AppColors.gold,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    const SizedBox(height: 8),
                    
                    // Space name
                        Expanded(
                      child: Text(
                                space.name,
                                style: GoogleFonts.outfit(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    
                    // Member count if available
                    if (space.metrics != null && space.metrics!.memberCount > 0)
                      Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(
                                  Icons.people_outline, 
                                  size: 12, 
                                  color: Colors.white.withOpacity(0.7),
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  '${space.metrics?.memberCount ?? 0}',
                                  style: GoogleFonts.inter(
                              fontSize: 10,
                                    color: Colors.white.withOpacity(0.7),
                                  ),
                                ),
                              ],
                            ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // New list-style space item, optimized for mobile viewing
  Widget _buildSpaceListItem(Space space, int index, {bool inMySpaces = false}) {
    final hasImage = space.imageUrl != null && space.imageUrl!.isNotEmpty;
    final hasTags = space.tags != null && space.tags.isNotEmpty;
    
    return AnimationConfiguration.staggeredList(
      position: index,
      duration: const Duration(milliseconds: 375),
      child: SlideAnimation(
        verticalOffset: 30,
        child: FadeInAnimation(
          child: Padding(
            padding: const EdgeInsets.fromLTRB(16, 6, 16, 6),
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(12),
                color: Colors.grey[900]!.withOpacity(0.3),
                border: Border.all(
                  color: Colors.white.withOpacity(0.08),
                  width: 1,
                ),
              ),
              clipBehavior: Clip.antiAlias,
              child: Material(
                color: Colors.transparent,
                child: InkWell(
                  onTap: () => _handleTapSpace(space),
                  splashColor: AppColors.gold.withOpacity(0.1),
                  highlightColor: AppColors.gold.withOpacity(0.05),
                  child: Padding(
                    padding: const EdgeInsets.all(12),
                            child: Row(
                              children: [
                        // Space image or placeholder
                        Hero(
                          tag: 'space_image_${space.id}',
                          child: Container(
                            width: 60,
                            height: 60,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: Colors.black,
                              border: Border.all(
                                color: AppColors.gold.withOpacity(0.3),
                                width: 1,
                              ),
                            ),
                            clipBehavior: Clip.antiAlias,
                            child: hasImage
                              ? Image.network(
                                  space.imageUrl!,
                                  fit: BoxFit.cover,
                                  errorBuilder: (_, __, ___) => Center(
                                    child: Icon(
                                      Icons.groups_outlined,
                                      color: Colors.white.withOpacity(0.5),
                                      size: 24,
                                    ),
                                  ),
                                )
                              : Center(
                                  child: Icon(
                                    Icons.groups_outlined,
                                    color: Colors.white.withOpacity(0.5),
                                    size: 24,
                                  ),
                                ),
                          ),
                        ),
                        const SizedBox(width: 12),
                        
                        // Space info
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Space name
                                Text(
                                space.name,
                                style: GoogleFonts.outfit(
                                  fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              
                              // Space description if available
                              if (space.description.isNotEmpty) ...[
                                const SizedBox(height: 4),
                                Text(
                                  space.description,
                                  style: GoogleFonts.inter(
                                    fontSize: 12,
                                    color: Colors.white70,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ],
                              
                              // Tags and metrics
                              const SizedBox(height: 6),
                              Row(
                                children: [
                                  // Member count
                                  if (space.metrics != null) ...[
                                    Icon(
                                      Icons.people_outline,
                                      size: 12,
                                      color: Colors.white.withOpacity(0.7),
                                    ),
                                    const SizedBox(width: 4),
                                    Text(
                                      '${space.metrics?.memberCount ?? 0}',
                                      style: GoogleFonts.inter(
                                        fontSize: 11,
                                        color: Colors.white.withOpacity(0.7),
                                      ),
                                    ),
                                  ],
                                  
                                  // First tag if any
                                  if (hasTags) ...[
                                    const SizedBox(width: 8),
                                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: BoxDecoration(
                                        color: AppColors.gold.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(4),
                                        border: Border.all(
                                          color: AppColors.gold.withOpacity(0.3),
                                          width: 0.5,
                                        ),
                      ),
                      child: Text(
                        space.tags.first,
                        style: GoogleFonts.inter(
                          fontSize: 9,
                                          color: AppColors.gold.withOpacity(0.9),
                                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                                  ],
                                ],
                  ),
              ],
            ),
          ),
                        
                        // Action button - "View" for My Spaces, "Join" for Explore
                        if (!inMySpaces)
                          ElevatedButton(
                            onPressed: () => _handleJoinSpace(space),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppColors.gold,
                              foregroundColor: Colors.black,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              minimumSize: const Size(0, 32),
                            ),
                            child: Text(
                              'Join',
                              style: GoogleFonts.inter(
                                fontSize: 12,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          )
                        else
                          IconButton(
                            icon: const Icon(
                              Icons.arrow_forward_ios_rounded,
                              size: 16,
                            ),
                            onPressed: () => _handleTapSpace(space),
                            color: AppColors.gold,
                            splashRadius: 20,
                          ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
  
  // Empty state widget with enhanced visual appeal
  Widget _buildEmptyState(String title, String subtitle, IconData icon) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 48),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 64,
            height: 64,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              gradient: LinearGradient(
                colors: [
                  AppColors.gold.withOpacity(0.8),
                  AppColors.gold.withOpacity(0.6),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              boxShadow: [
                BoxShadow(
                  color: AppColors.gold.withOpacity(0.3),
                  blurRadius: 12,
                  spreadRadius: 1,
                ),
              ],
            ),
            child: Icon(
              icon,
              color: Colors.black,
              size: 32,
            ),
          ),
          const SizedBox(height: 20),
          
          Text(
            title,
            textAlign: TextAlign.center,
            style: GoogleFonts.outfit(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 8),
          
          Text(
            subtitle,
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 14,
              color: Colors.white70,
            ),
          ),
          
          const SizedBox(height: 24),
          
          if (_searchController.text.isNotEmpty || _activeFilters.isNotEmpty)
            OutlinedButton(
              onPressed: () {
                setState(() {
                  _searchController.clear();
                  _isSearchExpanded = false;
                  _activeFilters.clear();
                  _currentPage = 1;
                });
                _refreshSpaces();
              },
              style: OutlinedButton.styleFrom(
                foregroundColor: AppColors.gold,
                side: BorderSide(color: AppColors.gold),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              ),
              child: Text(
                'Clear All Filters',
                style: GoogleFonts.inter(fontWeight: FontWeight.w500),
              ),
            ),
        ],
      ),
    );
  }
  
  // Helper method to format space type strings
  String _formatSpaceType(String type) {
    if (type.contains('.')) {
      type = type.split('.').last;
    }
    
    // Convert camelCase or snake_case to Title Case With Spaces
    final formattedType = type
        .replaceAllMapped(RegExp(r'([A-Z])'), (match) => ' ${match.group(0)}')
        .replaceAll('_', ' ')
        .trim()
        .split(' ')
        .map((word) => word.isNotEmpty ? '${word[0].toUpperCase()}${word.substring(1).toLowerCase()}' : '')
        .join(' ');
    
    return formattedType;
  }
  
  // Improved mobile-friendly join/create space dialog
  void _showJoinSpaceDialog(BuildContext context) {
    final codeController = TextEditingController();
    final nameController = TextEditingController();
    final descriptionController = TextEditingController();
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      transitionAnimationController: AnimationController(
        vsync: this,
        duration: const Duration(milliseconds: 400),
      ),
      builder: (dialogContext) {
        return _JoinCreateSpaceBottomSheet(
          codeController: codeController,
          nameController: nameController,
          descriptionController: descriptionController,
          onJoinSpace: (code) async {
            // Attempt to join by code
            final success = await ref
              .read(spacesControllerProvider.notifier)
              .joinSpaceByCode(code);
              
            if (success && mounted) {
              // Close dialog and show success message
              Navigator.of(dialogContext).pop();
              
              // Show success animation
              _showSuccessAnimation(
                context: context,
                message: 'Successfully joined space!',
                onComplete: () {
                  // Switch to My Spaces tab after joining
                  Future.delayed(const Duration(milliseconds: 300), () {
                    _tabController?.animateTo(1); // My Spaces tab
                  });
                  
                  // Refresh spaces
                  _refreshSpaces();
                },
              );
              
              return null; // No error
            } else if (mounted) {
              return ref.read(spacesControllerProvider).error ?? 
                'Failed to join space. Please check the code and try again.';
            }
            return 'An unexpected error occurred';
          },
          onCreateSpace: (name, description, tags) async {
            // Attempt to create space
            final success = await ref
              .read(spacesControllerProvider.notifier)
              .createSpace(name, description, tags);
              
            if (success && mounted) {
              // Close dialog and show success message
              Navigator.of(dialogContext).pop();
              
              // Show success animation
              _showSuccessAnimation(
                context: context,
                message: 'Space created successfully!',
                onComplete: () {
                  // Switch to My Spaces tab after creating
                  Future.delayed(const Duration(milliseconds: 300), () {
                    _tabController?.animateTo(1); // My Spaces tab
                  });
                  
                  // Refresh spaces
                  _refreshSpaces();
                },
              );
              
              return null; // No error
            } else if (mounted) {
              return ref.read(spacesControllerProvider).error ?? 
                'Failed to create space. Please try again.';
            }
            return 'An unexpected error occurred';
          },
        );
      },
    );
  }
  
  // Success animation overlay
  void _showSuccessAnimation({
    required BuildContext context, 
    required String message,
    required VoidCallback onComplete,
  }) {
    // Create an overlay entry
    OverlayState? overlayState = Overlay.of(context);
    OverlayEntry? overlayEntry;
    
    overlayEntry = OverlayEntry(
      builder: (context) => TweenAnimationBuilder<double>(
        tween: Tween<double>(begin: 0.0, end: 1.0),
        duration: const Duration(milliseconds: 800),
        curve: Curves.easeOutBack,
        onEnd: () {
          // Remove overlay after a delay
          Future.delayed(const Duration(milliseconds: 2000), () {
            overlayEntry?.remove();
            onComplete();
          });
        },
        builder: (context, value, child) {
          return Positioned.fill(
            child: Material(
              color: Colors.transparent,
              child: Container(
                color: Colors.black.withOpacity(0.7 * value),
                child: Center(
                  child: Transform.scale(
                    scale: value,
                    child: Container(
                      padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.9),
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(
                  color: AppColors.gold.withOpacity(0.5),
                          width: 2,
                ),
                        boxShadow: [
                          BoxShadow(
                            color: AppColors.gold.withOpacity(0.3),
                            blurRadius: 20,
                            spreadRadius: 2,
              ),
                        ],
                      ),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
              Container(
                            width: 60,
                            height: 60,
                decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: Colors.green[700],
                            ),
                            child: Center(
                              child: Icon(
                                Icons.check,
                                color: Colors.white,
                                size: 36 * value,
                              ),
                            ),
                          ),
                          const SizedBox(height: 20),
                          Text(
                            message,
                            style: GoogleFonts.outfit(
                              color: Colors.white,
                              fontSize: 18,
                              fontWeight: FontWeight.w600,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
    
    // Add the overlay to the screen
    overlayState.insert(overlayEntry);
    
    // Vibrate for success feedback
    HapticFeedback.heavyImpact();
  }
}

// Separate stateful widget for the bottom sheet to handle its own state
class _JoinCreateSpaceBottomSheet extends StatefulWidget {
  final TextEditingController codeController;
  final TextEditingController nameController;
  final TextEditingController descriptionController;
  final Future<String?> Function(String code) onJoinSpace;
  final Future<String?> Function(String name, String description, List<String> tags) onCreateSpace;
  
  const _JoinCreateSpaceBottomSheet({
    required this.codeController,
    required this.nameController,
    required this.descriptionController,
    required this.onJoinSpace,
    required this.onCreateSpace,
  });
  
  @override
  State<_JoinCreateSpaceBottomSheet> createState() => _JoinCreateSpaceBottomSheetState();
}

class _JoinCreateSpaceBottomSheetState extends State<_JoinCreateSpaceBottomSheet> {
  bool _isLoading = false;
  String? _errorText;
  bool _isCreateMode = false;
  final List<String> _selectedTags = [];
  
  // Available tags for spaces - focused on student interests
  final _availableTags = [
      'Academic', 'Social', 'Sports', 'Arts', 'Technology', 
    'Business', 'Greek Life', 'Service', 'Cultural', 'Gaming'
  ];
  
  @override
  Widget build(BuildContext context) {
    final bottomInset = MediaQuery.of(context).viewInsets.bottom;
    
    return Container(
      padding: EdgeInsets.only(bottom: bottomInset),
      decoration: BoxDecoration(
        color: Colors.grey[900],
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.5),
            blurRadius: 10,
            spreadRadius: 0,
            offset: const Offset(0, -1),
          ),
        ],
        border: Border.all(
              color: AppColors.gold.withOpacity(0.3),
              width: 1,
            ),
          ),
            child: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.fromLTRB(20, 16, 20, 20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
              // Header with handle
              Center(
                child: Container(
                  width: 40,
                  height: 4,
                  margin: const EdgeInsets.only(bottom: 16),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
              ),
              
              // Title
              Row(
                children: [
                  Icon(
                    _isCreateMode ? Icons.add_circle_outline : Icons.login,
                    color: AppColors.gold,
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                    Text(
                    _isCreateMode ? 'Create a Space' : 'Join a Space',
                    style: GoogleFonts.outfit(
                      color: Colors.white,
                      fontSize: 20,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 8),
              Text(
                _isCreateMode
                  ? 'Create a new space for your organization or group'
                  : 'Enter a space code to join an existing space',
                      style: GoogleFonts.inter(
                  color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
              const SizedBox(height: 20),
              
              // Join space form
              if (!_isCreateMode) ... [
                    TextField(
                  controller: widget.codeController,
                      decoration: InputDecoration(
                    labelText: 'Space Code',
                    labelStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
                    hintText: 'Enter the space code',
                        hintStyle: TextStyle(color: Colors.white.withOpacity(0.3)),
                        filled: true,
                        fillColor: Colors.black.withOpacity(0.3),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Colors.white.withOpacity(0.1),
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Colors.white.withOpacity(0.1),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: AppColors.gold.withOpacity(0.5),
                          ),
                        ),
                    errorText: _errorText,
                        errorStyle: TextStyle(color: Colors.redAccent[100]),
                    prefixIcon: const Icon(
                      Icons.qr_code,
                      color: Colors.white60,
                      size: 20,
                    ),
                      ),
                      style: const TextStyle(color: Colors.white),
                  enabled: !_isLoading,
                  textInputAction: TextInputAction.done,
                  onSubmitted: (value) => _isLoading ? null : _handleJoinSubmit(),
                ),
              ],
              
              // Create space form
              if (_isCreateMode) ... [
                    TextField(
                  controller: widget.nameController,
                      decoration: InputDecoration(
                    labelText: 'Space Name',
                    labelStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
                    hintText: 'Enter a name for your space',
                        hintStyle: TextStyle(color: Colors.white.withOpacity(0.3)),
                        filled: true,
                        fillColor: Colors.black.withOpacity(0.3),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Colors.white.withOpacity(0.1),
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Colors.white.withOpacity(0.1),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: AppColors.gold.withOpacity(0.5),
                          ),
                        ),
                    errorText: _errorText,
                        errorStyle: TextStyle(color: Colors.redAccent[100]),
                    prefixIcon: const Icon(
                      Icons.group,
                      color: Colors.white60,
                      size: 20,
                    ),
                      ),
                      style: const TextStyle(color: Colors.white),
                  enabled: !_isLoading,
                  textInputAction: TextInputAction.next,
                    ),
                const SizedBox(height: 16),
                
                    TextField(
                  controller: widget.descriptionController,
                      decoration: InputDecoration(
                    labelText: 'Description',
                    labelStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
                    hintText: 'Briefly describe your space',
                        hintStyle: TextStyle(color: Colors.white.withOpacity(0.3)),
          filled: true,
                        fillColor: Colors.black.withOpacity(0.3),
          border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Colors.white.withOpacity(0.1),
                          ),
          ),
          enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(
              color: Colors.white.withOpacity(0.1),
            ),
          ),
          focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(
              color: AppColors.gold.withOpacity(0.5),
                          ),
                        ),
                    prefixIcon: const Icon(
                      Icons.description,
                      color: Colors.white60,
                      size: 20,
                    ),
                      ),
                      style: const TextStyle(color: Colors.white),
                  maxLines: 2,
                  enabled: !_isLoading,
                    ),
                const SizedBox(height: 16),
                
                    Text(
                      'Tags (select up to 3)',
                      style: GoogleFonts.inter(
                        color: Colors.white.withOpacity(0.7),
                        fontSize: 14,
                    fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(height: 8),
                
                    Wrap(
                      spacing: 8,
                  runSpacing: 10,
                  children: _availableTags.map((tag) {
                    final isSelected = _selectedTags.contains(tag);
                        return GestureDetector(
                          onTap: () {
                        if (_isLoading) return;
                            setState(() {
                              if (isSelected) {
                            _selectedTags.remove(tag);
                            HapticFeedback.lightImpact();
                          } else if (_selectedTags.length < 3) {
                            _selectedTags.add(tag);
                                HapticFeedback.selectionClick();
                              } else {
                                // Show feedback that max tags reached
                                HapticFeedback.heavyImpact();
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text('Maximum 3 tags allowed'),
                                    duration: const Duration(seconds: 1),
                                    behavior: SnackBarBehavior.floating,
                                  ),
                                );
                              }
                            });
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: isSelected 
                                  ? AppColors.gold.withOpacity(0.2)
                                  : Colors.black.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(16),
                              border: Border.all(
                                color: isSelected
                                    ? AppColors.gold
                                    : Colors.white.withOpacity(0.1),
                                width: 1,
                              ),
                            ),
                            child: Text(
                              tag,
                              style: GoogleFonts.inter(
                                fontSize: 12,
                                fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                                color: isSelected 
                                    ? AppColors.gold
                                    : Colors.white.withOpacity(0.8),
                              ),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                  
              if (_isLoading) ...[
                const SizedBox(height: 24),
                    const Center(
                      child: SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: AppColors.gold,
                        ),
                      ),
                    ),
                  ],
                  
              // Action buttons
              const SizedBox(height: 24),
              Row(
                children: [
                  // Mode toggle button
                  Expanded(
                    child: OutlinedButton(
                      onPressed: _isLoading ? null : () {
                        HapticFeedback.mediumImpact();
                      setState(() {
                          _isCreateMode = !_isCreateMode;
                          _errorText = null;
                      });
                    },
                      style: OutlinedButton.styleFrom(
                        foregroundColor: AppColors.gold,
                        side: BorderSide(color: AppColors.gold.withOpacity(0.5)),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: Text(
                        _isCreateMode ? 'Join Instead' : 'Create Instead',
                        style: GoogleFonts.inter(
                          fontWeight: FontWeight.w500,
                          fontSize: 14,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  
                  // Submit button
                  Expanded(
                    flex: 2,
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.gold,
                        foregroundColor: Colors.black,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        disabledBackgroundColor: Colors.grey[700],
                      ),
                      onPressed: _isLoading 
                ? null 
                : () {
                          if (_isCreateMode) {
                            _handleCreateSubmit();
                          } else {
                            _handleJoinSubmit();
                          }
                },
              child: Text(
                        _isCreateMode ? 'Create Space' : 'Join Space',
                        style: GoogleFonts.inter(
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                ),
              ),
            ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  // Handle join space submission
  Future<void> _handleJoinSubmit() async {
    final code = widget.codeController.text.trim();
    
    if (code.isEmpty) {
                      setState(() {
        _errorText = 'Please enter a space code';
                      });
                      return;
                    }
                    
                    setState(() {
      _isLoading = true;
      _errorText = null;
    });
    
    final error = await widget.onJoinSpace(code);
    
    if (mounted && error != null) {
                      setState(() {
        _isLoading = false;
        _errorText = error;
      });
    }
  }
  
  // Handle create space submission
  Future<void> _handleCreateSubmit() async {
    final name = widget.nameController.text.trim();
    final description = widget.descriptionController.text.trim();
    
    if (name.isEmpty) {
                      setState(() {
        _errorText = 'Please enter a space name';
                      });
                      return;
                    }
                    
                    setState(() {
      _isLoading = true;
      _errorText = null;
    });
    
    final error = await widget.onCreateSpace(name, description, _selectedTags);
    
    if (mounted && error != null) {
                      setState(() {
        _isLoading = false;
        _errorText = error;
      });
    }
  }
}

// Keeping _SliverCategorySelectorDelegate for category selector
class _SliverCategorySelectorDelegate extends SliverPersistentHeaderDelegate {
  final Widget child;
  final bool visible;
  
  _SliverCategorySelectorDelegate({
    required this.child,
    this.visible = true,
  });
  
  @override
  double get minExtent => visible ? 56 : 0;  // Updated height for better touch targets
  
  @override
  double get maxExtent => visible ? 56 : 0;  // Updated height for consistency
  
  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return visible
        ? child
        : const SizedBox.shrink();
  }
  
  @override
  bool shouldRebuild(_SliverCategorySelectorDelegate oldDelegate) {
    return child != oldDelegate.child || visible != oldDelegate.visible;
  }
} 
} } 
