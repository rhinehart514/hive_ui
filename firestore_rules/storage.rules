rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // === HELPER FUNCTIONS ===
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of requested resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if file size doesn't exceed max
    function isValidFileSize() {
      return request.resource.size <= 10 * 1024 * 1024; // 10MB max
    }
    
    // Check if file type is allowed
    function isValidContentType() {
      return request.resource.contentType.matches('image/.*') || 
             request.resource.contentType.matches('video/.*') || 
             request.resource.contentType.matches('application/pdf');
    }
    
    // Check if user is an admin
    function isAdmin() {
      return isAuthenticated() && 
        firestore.exists(/databases/(default)/documents/admin_users/$(request.auth.uid));
    }
    
    // Check if user is a club admin
    function isClubAdmin(clubId) {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/clubs/$(clubId)).data.leaders.keys().hasAny([request.auth.uid]);
    }
    
    // Check if user is a chat participant
    function isChatParticipant(chatId) {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/chats/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // === USER PROFILE IMAGES ===
    
    match /user_profiles/{userId}/{imageType} {
      // Users can upload/update/delete their own profile images
      allow read: if true; // Profile images are public
      allow write: if isOwner(userId) && isValidFileSize() && isValidContentType();
    }
    
    // === CLUB IMAGES ===
    
    match /clubs/{clubId}/{imageType} {
      // Club images are public (logo, banner, etc.)
      allow read: if true;
      
      // Any authenticated user can update club images
      allow write: if isAuthenticated() && isValidFileSize() && isValidContentType();
    }
    
    // === EVENT IMAGES ===
    
    match /events/{eventId}/{imageType} {
      // Event images are public
      allow read: if true;
      
      // Any authenticated user can update event images
      allow write: if isAuthenticated() && isValidFileSize() && isValidContentType();
    }
    
    // === CHAT ATTACHMENTS ===
    
    match /chats/{chatId}/messages/{messageId}/{fileName} {
      // Any authenticated user can access chat attachments
      allow read: if isAuthenticated();
      
      // Any authenticated user can upload attachments
      allow create: if isAuthenticated() && isValidFileSize() && isValidContentType();
        
      // No updates allowed - replace instead
      allow update: if false;
      
      // Sender or admin can delete
      allow delete: if isAuthenticated();
    }
    
    // === SPACE POST ATTACHMENTS ===
    
    match /spaces/{spaceId}/posts/{postId}/{fileName} {
      // Space post attachments are public
      allow read: if true;
      
      // Any authenticated user can upload attachments
      allow create: if isAuthenticated() && isValidFileSize() && isValidContentType();
        
      // No updates allowed - replace instead
      allow update: if false;
      
      // Any authenticated user can delete
      allow delete: if isAuthenticated();
    }
    
    // === VERIFICATION REQUEST ATTACHMENTS ===
    
    match /verification_requests/{requestId}/{fileName} {
      // Only the requester and admins can access verification documents
      allow read: if isAuthenticated() && (
        isOwner(firestore.get(/databases/(default)/documents/verification_requests/$(requestId)).data.userId) || 
        isAdmin()
      );
      
      // Only the requester can upload verification documents
      allow create: if isAuthenticated() && 
        isOwner(firestore.get(/databases/(default)/documents/verification_requests/$(requestId)).data.userId) && 
        isValidFileSize() && 
        request.resource.contentType.matches('application/pdf|image/.*');
        
      // No updates allowed - replace instead
      allow update: if false;
      
      // Only requester or admin can delete
      allow delete: if isAuthenticated() && (
        isOwner(firestore.get(/databases/(default)/documents/verification_requests/$(requestId)).data.userId) || 
        isAdmin()
      );
    }
    
    // === GENERAL PUBLIC ASSETS ===
    
    match /public/{fileName} {
      // Public assets are readable by everyone
      allow read: if true;
      
      // Only admins can upload public assets
      allow write: if isAdmin() && isValidFileSize() && isValidContentType();
    }
    
    // === DEFAULT RULE ===
    
    // Deny all other access by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 