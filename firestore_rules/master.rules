rules_version = '2';

// HIVE UI Firestore Security Rules
// This is the master rules file that integrates all specialized rule sets

service cloud.firestore {
  match /databases/{database}/documents {
    // ======== HELPER FUNCTIONS ========
    
    // Authentication helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'moderator';
    }
    
    function isSpaceAdmin(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.admins;
    }
    
    function isSpaceModerator(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.moderators;
    }
    
    function isSpaceMember(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.members;
    }
    
    // Space related helpers - optimized for performance
    function isSpaceLeader(spaceId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/space_leader_index/$(request.auth.uid + "_" + spaceId))
      );
    }
    
    // Club related helpers
    function isClubMember(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_member_index/$(request.auth.uid + "_" + clubId));
    }
    
    function isClubLeader(clubId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/club_leader_index/$(request.auth.uid + "_" + clubId));
    }
    
    // Content privacy helpers
    function isSpacePublic(spaceId) {
      return exists(/databases/$(database)/documents/space_privacy/$(spaceId)) &&
             get(/databases/$(database)/documents/space_privacy/$(spaceId)).data.isPublic == true;
    }
    
    function isEventPublic(eventId) {
      return exists(/databases/$(database)/documents/event_privacy/$(eventId)) &&
             get(/databases/$(database)/documents/event_privacy/$(eventId)).data.isPublic == true;
    }
    
    function isClubPublic(clubId) {
      return !exists(/databases/$(database)/documents/club_privacy/$(clubId)) ||
             get(/databases/$(database)/documents/club_privacy/$(clubId)).data.isPublic == true;
    }
    
    // Relationship helper
    function areFriends(userId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/friend_index/$(request.auth.uid + "_" + userId))
      );
    }
    
    // Content creation rate limiting
    function isRateLimited(collection) {
      return request.time < resource.data.lastActionTime + duration.value(1, 's');
    }
    
    // Validation helpers
    function isValidSpaceData(data) {
      return data.name is string && 
             data.name.size() > 0 && 
             data.name.size() <= 100 &&
             data.description is string;
    }
    
    function isValidEventData(data) {
      return data.title is string && 
             data.title.size() > 0 && 
             data.title.size() <= 100 &&
             (data.startDate is timestamp || data.startTime is timestamp) &&
             (data.endDate is timestamp || data.endTime is timestamp);
    }
    
    function isValidClubData(data) {
      return data.name is string &&
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.description is string;
    }
    
    // ======== IMPORT SPECIALIZED RULES ========
    
    // Include moderation rules
    match /{path=**} {
      // Include moderation rules
      include /firestore_rules/moderation_rules.rules

      // Include social graph and analytics rules
      include /firestore_rules/social_graph_rules.rules

      // Include recommendation engine rules
      include /firestore_rules/recommendation_rules.rules
    }
    
    // ======== COLLECTION GROUP QUERIES ========
    
    // Allow collection group query for spaces with additional access for onboarding
    match /{path=**}/spaces/{spaceId} {
      // This rule specifically enables collectionGroup("spaces") queries
      // Especially useful during onboarding when listing all available spaces
      allow read: if isAuthenticated();
    }
    
    // Allow access to events via collection group queries
    match /{path=**}/events/{eventId} {
      // Enable collectionGroup("events") queries for all authenticated users
      allow read: if isAuthenticated();
    }
    
    // Enable collection group queries for posts
    match /{path=**}/posts/{postId} {
      allow read: if isAuthenticated() && 
                    (!resource.data.isHidden || 
                     resource.data.authorId == request.auth.uid || 
                     isModerator() || 
                     isAdmin());
    }
    
    // ======== USER MANAGEMENT ========
    
    // Public user profile index - for discoverability
    match /public_user_index/{userId} {
      allow read: if true; // Public profile index is readable by anyone
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Users collection with improved access rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // User profiles with more detailed information
    match /user_profiles/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid || 
        resource.data.isPublicProfile == true || 
        areFriends(userId)
      );
      
      allow write: if isAuthenticated() && (
        userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // User rate limiting document
    match /user_rate_limits/{userId} {
      allow read: if isOwner(userId);
      allow write: if isAdmin();
    }
    
    // Admin users collection
    match /admin_users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Moderator users collection
    match /moderator_users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User session persistence
    match /user_sessions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ======== FEED OPTIMIZATION ========
    
    // Feed cache for faster main feed loading
    match /feed_cache/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      // Only system processes should write to feed cache
      allow write: if isAdmin();
    }
    
    // Public events index for main feed (contains minimal event data)
    match /public_events_index/{eventId} {
      // Public events are readable by anyone to make main feed efficient
      allow read: if true;
      // Only admins and event creators can update the public index
      allow write: if isAuthenticated() && (
        request.auth.uid == resource.data.creatorId || isAdmin()
      );
    }
    
    // Public spaces index for main feed (contains minimal space data)
    match /public_spaces_index/{spaceId} {
      // Public spaces are readable by anyone to make main feed efficient
      allow read: if true;
      // Only space leaders and admins can update the public index
      allow write: if isAuthenticated() && (
        isSpaceLeader(spaceId) || isAdmin()
      );
    }
    
    // Spaces collection - with optimized access control
    match /spaces/{spaceId} {
      allow read: if isAuthenticated() && (
        isSpacePublic(spaceId) || 
        isSpaceMember(spaceId) || 
        isSpaceLeader(spaceId) || 
        isAdmin()
      );
      
      allow create: if isAuthenticated() && 
                     isValidSpaceData(request.resource.data) &&
                     request.resource.data.creatorId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        isSpaceLeader(spaceId) || isAdmin()
      );
      
      allow delete: if isAuthenticated() && isAdmin();
      
      // Space events subcollection
      match /events/{eventId} {
        allow read: if isAuthenticated() && (
          isEventPublic(eventId) || 
          isSpaceMember(spaceId) || 
          isAdmin()
        );
        
        allow create: if isAuthenticated() && 
                       isValidEventData(request.resource.data) &&
                       (isSpaceMember(spaceId) || isAdmin());
        
        allow update: if isAuthenticated() && (
          resource.data.creatorId == request.auth.uid || 
          isSpaceLeader(spaceId) || 
          isAdmin()
        );
        
        allow delete: if isAuthenticated() && (
          resource.data.creatorId == request.auth.uid || 
          isSpaceLeader(spaceId) || 
          isAdmin()
        );
      }
      
      // Space posts subcollection
      match /posts/{postId} {
        allow read: if isAuthenticated() && (
          isSpaceMember(spaceId) || 
          isSpacePublic(spaceId) || 
          isAdmin()
        ) && !isContentHidden(resource.data);
        
        allow create: if isAuthenticated() && 
                       isSpaceMember(spaceId) &&
                       request.resource.data.authorId == request.auth.uid;
        
        allow update, delete: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid || 
          isSpaceModerator(spaceId) || 
          isSpaceLeader(spaceId) || 
          isAdmin()
        );
      }
    }
  }
} 