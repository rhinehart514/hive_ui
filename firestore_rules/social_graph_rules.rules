// HIVE UI Firestore Security Rules - Social Graph
// These rules govern social connections, relationships, and social graph analytics

// User Follows
match /user_follows/{followId} {
  // Anyone can read follow data
  allow read: if isAuthenticated();
  
  // Users can only create follows where they are the follower
  allow create: if isAuthenticated() && 
                 request.resource.data.followerId == request.auth.uid &&
                 !isUserRestricted(request.auth.uid);
  
  // Users can only update follows they created
  allow update: if isAuthenticated() && 
                 resource.data.followerId == request.auth.uid;
  
  // Users can delete follows they created
  allow delete: if isAuthenticated() && 
                 resource.data.followerId == request.auth.uid;
  
  // Admins can manage all follows
  allow write: if isAdmin();
}

// Friend Requests
match /friend_requests/{requestId} {
  // Read access is limited to the sender and recipient
  allow read: if isAuthenticated() && (
    resource.data.senderId == request.auth.uid ||
    resource.data.recipientId == request.auth.uid
  );
  
  // Users can create friend requests they send
  allow create: if isAuthenticated() && 
                 request.resource.data.senderId == request.auth.uid &&
                 !isUserRestricted(request.auth.uid);
  
  // Friend requests can be updated by either party
  allow update: if isAuthenticated() && (
    resource.data.senderId == request.auth.uid ||
    resource.data.recipientId == request.auth.uid
  );
  
  // Friend requests can be deleted by either party
  allow delete: if isAuthenticated() && (
    resource.data.senderId == request.auth.uid ||
    resource.data.recipientId == request.auth.uid
  );
}

// Friend Index - for fast friendship checks
match /friend_index/{relationshipId} {
  // Read access to anyone authenticated
  allow read: if isAuthenticated();
  
  // Write only allowed via Cloud Functions
  // or directly by the two users involved
  allow create, update: if isAuthenticated() && (
    request.auth.uid == request.resource.data.user1Id ||
    request.auth.uid == request.resource.data.user2Id
  );
  
  // Only the two friends or an admin can delete the relationship
  allow delete: if isAuthenticated() && (
    request.auth.uid == resource.data.user1Id ||
    request.auth.uid == resource.data.user2Id ||
    isAdmin()
  );
}

// Mutual Connections
match /mutual_connections/{relationshipId} {
  // Anyone authenticated can read the mutual connection document
  allow read: if isAuthenticated();
  
  // System only writes, or direct users involved
  allow write: if isAuthenticated() && (
    request.auth.uid == request.resource.data.user1Id ||
    request.auth.uid == request.resource.data.user2Id ||
    isAdmin()
  );
}

// Block List
match /user_blocks/{blockId} {
  // Only the blocker can read their blocks
  allow read: if isAuthenticated() && 
               resource.data.blockerId == request.auth.uid;
  
  // Admins can read all blocks (for moderation)
  allow read: if isAdmin();
  
  // Only the blocker can create blocks
  allow create: if isAuthenticated() && 
                 request.resource.data.blockerId == request.auth.uid;
  
  // Only the blocker can update or delete their blocks
  allow update, delete: if isAuthenticated() && 
                          resource.data.blockerId == request.auth.uid;
  
  // Admins can manage blocks for safety
  allow write: if isAdmin();
}

// Social Graph Analytics - for recommendation engine
match /user_social_graphs/{userId} {
  // Users can read their own social graph
  allow read: if isAuthenticated() && userId == request.auth.uid;
  
  // Admin and system processes can update social graphs
  allow write: if isAdmin();
}

// Connection Strength - analytics on relationship strength
match /connection_strength/{relationshipId} {
  // Users can read their own connection strength
  allow read: if isAuthenticated() && (
    relationshipId.split("_")[0] == request.auth.uid ||
    relationshipId.split("_")[1] == request.auth.uid
  );
  
  // Only system processes can write connection strength
  allow write: if isAdmin();
}

// Group Relationships
match /user_groups/{groupId} {
  // Group members can read their groups
  allow read: if isAuthenticated() && 
               request.auth.uid in resource.data.memberIds;
  
  // Group creator can manage the group
  allow create: if isAuthenticated() && 
                 request.resource.data.creatorId == request.auth.uid;
  
  // Group creator and admins can update
  allow update: if isAuthenticated() && (
    resource.data.creatorId == request.auth.uid ||
    request.auth.uid in resource.data.adminIds ||
    isAdmin()
  );
  
  // Only group creator and admins can delete
  allow delete: if isAuthenticated() && (
    resource.data.creatorId == request.auth.uid ||
    isAdmin()
  );
}

// ======== ANALYTICS COLLECTIONS ========

match /user_activities/{activityId} {
  // Users can read activities where they are the subject
  allow read: if isAuthenticated() && (
    resource.data.userId == request.auth.uid ||
    resource.data.targetId == request.auth.uid
  );
  
  // Users can create activities for themselves
  allow create: if isAuthenticated() && 
                 request.resource.data.userId == request.auth.uid;
  
  // Only admin can update or delete activities
  allow update, delete: if isAuthenticated() && isAdmin();
}

match /content_metrics/{contentId} {
  // Content metrics are readable by content owners and admins
  allow read: if isAuthenticated() && (
    resource.data.ownerId == request.auth.uid || 
    isAdmin() || 
    isModerator()
  );
  
  // Only system processes should write content metrics
  allow write: if isAuthenticated() && isAdmin();
}

match /platform_metrics/{metricId} {
  // Only admins can read overall platform metrics
  allow read: if isAuthenticated() && isAdmin();
  
  // Only system processes should write platform metrics
  allow write: if isAuthenticated() && isAdmin();
}

match /trending/{trendingId} {
  // Anyone can read trending content
  allow read: if isAuthenticated();
  
  // Only system processes should write trending items
  allow write: if isAuthenticated() && isAdmin();
}

match /user_engagement_metrics/{userId} {
  // Users can read their own engagement metrics
  allow read: if isAuthenticated() && userId == request.auth.uid;
  
  // Admins can read any engagement metrics
  allow read: if isAuthenticated() && isAdmin();
  
  // Only system processes should write engagement metrics
  allow write: if isAuthenticated() && isAdmin();
}

// ======== ANALYTICS HELPER FUNCTIONS ========

// Determine if a user is authorized to view analytics for a space
function canViewSpaceAnalytics(spaceId) {
  return isAuthenticated() && (
    isSpaceLeader(spaceId) || 
    isAdmin()
  );
}

// Determine if a user is authorized to view analytics for a club
function canViewClubAnalytics(clubId) {
  return isAuthenticated() && (
    isClubLeader(clubId) || 
    isAdmin()
  );
} 