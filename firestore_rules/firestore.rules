rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user has a specific global role via custom claims
    function hasGlobalRole(role) {
      return request.auth.token.roles[role] == true;
    }
    
    // Checks if the user has *at least* a certain verification level via custom claims
    function hasMinVerificationLevel(level) {
      // Levels: 0 = Public (implied), 1 = Verified, 2 = Verified+
      return request.auth.token.verificationLevel >= level;
    }

    // Checks if the user is an Admin (HIVE Staff)
    function isAdmin() {
      // Assumes 'admin' boolean claim is set for HIVE Staff
      return request.auth.token.admin == true;
    }
    
    // Checks if the requesting user is the owner of the document/resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is a member of a specific space
    function isSpaceMember(spaceId) {
      return exists(/databases/$(database)/documents/spaces/$(spaceId)/members/$(request.auth.uid));
    }

    // Checks if the user has a specific role within a space (e.g., 'admin')
    function hasSpaceRole(spaceId, role) {
      let memberDoc = get(/databases/$(database)/documents/spaces/$(spaceId)/members/$(request.auth.uid));
      // Check existence and role field equality
      return memberDoc.exists && memberDoc.data.role == role; 
    }
    
    // Checks if a space is public
    function isSpacePublic(spaceId) {
      return get(/databases/$(database)/documents/spaces/$(spaceId)).data.visibility == 'public';
    }
    
    // --- User Profile Rules (/users/{userId}) ---
    match /users/{userId} {
      // Profile subcollection: Read by self or friends, Write only by self
      match /profile/{docId} {
         // Check friendship: Look for the requesting user in the target user's friends list
         function isFriend() {
           return exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid));
         }
         allow read: if isSignedIn() && (isOwner(userId) || isFriend() || isAdmin());
         allow write: if isSignedIn() && isOwner(userId);
      }
      
      // Friends subcollection: Read/Write only by self
      match /friends/{friendId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }

      // Settings, JoinedSpaces, SavedEvents: Read/Write only by self
      match /settings/{docId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
      match /joinedSpaces/{docId} {
         allow read, write: if isSignedIn() && isOwner(userId);
      }
      match /savedEvents/{docId} {
         allow read, write: if isSignedIn() && isOwner(userId);
      }
      
      // Other user subcollections (e.g., notifications, user_metadata, user_verifications): Generally only self or admin access
      match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && isOwner(userId); 
      }
      match /user_metadata/{docId} {
         allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }
      match /user_verifications/{docId} {
         allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());
      }

      // Deny direct modification of top-level user document fields if they exist
      allow read: if isSignedIn() || isAdmin(); // Allow reading base doc if needed
      allow create: if false; // Creation likely handled by backend/auth trigger
      allow update, delete: if false; // Prevent client-side deletion/modification of base user doc
    }

    // --- Spaces Rules (/spaces/{spaceId}) ---
    match /spaces/{spaceId} {
      // Allow reading space metadata if public or if user is a member (or admin)
      allow read: if (isSpacePublic(spaceId) || (isSignedIn() && isSpaceMember(spaceId))) || isAdmin();
      
      // Allow creating spaces only if Verified or higher
      allow create: if isSignedIn() && hasMinVerificationLevel(1); 
      
      // Allow updating space metadata only by Space Admins or HIVE Admins
      allow update: if isSignedIn() && (hasSpaceRole(spaceId, 'admin') || isAdmin());
      
      // Allow deleting spaces only by Space Admins (and maybe only if user-created?) - FOR NOW: Restrict deletion
      allow delete: if false; // Potentially allow if isAdmin() or hasSpaceRole(spaceId, 'admin') and space is user-created

      // Members subcollection (/spaces/{spaceId}/members/{memberId})
      match /members/{memberId} {
        // Allow reading member list only by HIVE Admins (as requested)
        // Note: Client will likely get member *count* from parent doc field
        allow list: if isAdmin(); 
        // Allow reading individual member doc if you are that member (e.g., to check your own role) or Admin
        allow get: if isSignedIn() && (isOwner(memberId) || isAdmin());
        
        // Allow adding/removing members or changing roles only by Space Admins or HIVE Admins
        allow create, update, delete: if isSignedIn() && (hasSpaceRole(spaceId, 'admin') || isAdmin());
      }

      // Space Events subcollection (/spaces/{spaceId}/events/{eventId})
      match /events/{eventId} {
         // Read access mirrors parent space visibility
         allow read: if (isSpacePublic(spaceId) || (isSignedIn() && isSpaceMember(spaceId))) || isAdmin();
         // Create/Update/Delete only by Space Admins or HIVE Admins
         allow create, update, delete: if isSignedIn() && (hasSpaceRole(spaceId, 'admin') || isAdmin());
      }
      
      // Other space subcollections (e.g., posts, analytics): Define rules as needed
      // Example: Posts readable by members, writeable by admins
      match /posts/{postId} {
         allow read: if (isSpacePublic(spaceId) || (isSignedIn() && isSpaceMember(spaceId))) || isAdmin();
         allow create, update, delete: if isSignedIn() && (hasSpaceRole(spaceId, 'admin') || isAdmin());
      }
    }

    // --- Global Events Rules (/events/{eventId}) ---
    match /events/{eventId} {
      // Allow reading event if parent space is public, or if user is member of private parent space (or admin)
      function canReadParentSpace() {
        let spaceId = resource.data.spaceId; // Assumes event doc has spaceId field
        return isSpacePublic(spaceId) || (isSignedIn() && isSpaceMember(spaceId));
      }
      allow read: if canReadParentSpace() || isAdmin();

      // Allow creating events? - NO, events should be created *within* a space subcollection
      allow create: if false; 

      // Allow updating/deleting event only by original creator or Space Admin of parent space (or HIVE Admin)
      function isCreator() {
        return request.auth.uid == resource.data.creatorId; // Assumes event doc has creatorId field
      }
      function isParentSpaceAdmin() {
         let spaceId = resource.data.spaceId;
         return hasSpaceRole(spaceId, 'admin');
      }
      allow update, delete: if isSignedIn() && (isCreator() || isParentSpaceAdmin() || isAdmin());

      // Attendees subcollection (/events/{eventId}/attendees/{attendeeId})
      match /attendees/{attendeeId} {
        // Allow reading attendee list only by parent Space Admins or HIVE Admins
        allow list: if isSignedIn() && (isParentSpaceAdmin() || isAdmin());
        // Allow reading own attendance record
        allow get: if isSignedIn() && (isOwner(attendeeId) || isParentSpaceAdmin() || isAdmin());

        // Allow creating (RSVP) only by Verified users (or higher) who are the attendee
        allow create: if isSignedIn() && isOwner(attendeeId) && hasMinVerificationLevel(1);
        
        // Allow deleting (Cancel RSVP) only by the attendee themselves
        allow delete: if isSignedIn() && isOwner(attendeeId);
      }
      
      // Other event subcollections (e.g., comments, reposts): Define rules as needed
      match /comments/{commentId} {
         allow read: if canReadParentSpace() || isAdmin(); // Align read with parent event
         allow create: if isSignedIn() && hasMinVerificationLevel(1); // Allow verified users to comment
         allow update, delete: if isSignedIn() && (isOwner(resource.data.authorId) || isParentSpaceAdmin() || isAdmin()); // Allow author or admins to modify/delete
      }
    }
    
    // --- Verification & Claim-Related Collections ---
    // emailVerifications: Writeable by backend function/user trigger, readable maybe only by backend?
    match /emailVerifications/{requestId} {
      allow read: if isAdmin(); // Or maybe check request.auth.uid == resource.data.userId? Needs care.
      allow create: if isSignedIn(); // User needs to initiate verification
      allow update: if isAdmin(); // Or backend function updating status
      allow delete: if isAdmin(); // Cleanup
    }
    
    // verificationRequests: Writeable by user (requestVerifiedPlusClaim), readable/updateable by Admin/backend
    match /verificationRequests/{requestId} {
       allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin()); // User can read own request, Admin can read all
       allow create: if isSignedIn() && hasMinVerificationLevel(1); // Verified users can request Verified+
       allow update: if isAdmin(); // Only Admins approve/reject via backend function trigger
       allow delete: if isAdmin();
    }
    
    // claimUpdates: Write-once by backend functions, readable only by backend/admin?
    match /claimUpdates/{updateId} {
       allow read: if isAdmin();
       allow create: if false; // Only backend functions write here
       allow update: if false; // Should be write-once and processed
       allow delete: if isAdmin(); // Cleanup
    }

    // --- Other Collections (Notifications, etc.) ---
    // Adjust based on specific needs, generally user-scoped or admin-controlled
    match /notifications/{notificationId} {
       allow read, write: if isSignedIn() && isOwner(resource.data.userId); // User manages own notifications
       allow create: if false; // Backend function creates notifications
       allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    // --- Default Deny ---
    // Explicitly deny access to any path not matched above
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 