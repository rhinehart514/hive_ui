# Direct fix for generated plugins in Windows build
Write-Host "====================================================="
Write-Host "Fixing generated plugins for Windows Build"
Write-Host "====================================================="

# Path to the generated_plugins.cmake file
$generated_plugins_path = "windows/flutter/generated_plugins.cmake"
$generated_plugins_backup = "windows/flutter/generated_plugins.cmake.backup"

# Check if the file exists
if (-not (Test-Path $generated_plugins_path)) {
    Write-Host "Error: Generated plugins file not found at $generated_plugins_path"
    Write-Host "You may need to run 'flutter build windows' first to generate this file."
    exit 1
}

# Create a backup
Copy-Item $generated_plugins_path $generated_plugins_backup -Force
Write-Host "Created backup at $generated_plugins_backup"

# Create a simplified version of the generated_plugins.cmake file
$plugins_content = @"
# This file is generated by Flutter.
# Do not edit by hand, it has been overridden to disable Windows plugin loading.

# Platform-specific plugin dependencies for Windows
set(FLUTTER_PLUGIN_LIST)
set(FLUTTER_FFI_PLUGIN_LIST)

# No plugins are registered for Windows platform
set(PLUGIN_BUNDLED_LIBRARIES)
"@

# Write the new content
$utf8NoBom = New-Object System.Text.UTF8Encoding $false
[System.IO.File]::WriteAllText($generated_plugins_path, ${plugins_content}, $utf8NoBom)
Write-Host "Modified generated_plugins.cmake to disable all plugins"

# Ensure the plugin registrant exists and is properly stubbed
$registrant_dir = "windows/flutter"
$generated_cc = "$registrant_dir/generated_plugin_registrant.cc"
$generated_h = "$registrant_dir/generated_plugin_registrant.h"

# Create stub implementation
$registrant_impl = @"
//
//  Generated file. Do not edit.
//

// clang-format off

#include "generated_plugin_registrant.h"

// All plugins have been disabled for Windows to prevent build errors

namespace {

// Stub plugin registration to avoid build errors
void StubRegisterPlugins() {
  // No plugins registered for Windows platform
}

}  // namespace

void RegisterPlugins(flutter::PluginRegistry* registry) {
  // Windows plugins are disabled
  StubRegisterPlugins();
}
"@

$registrant_header = @"
//
//  Generated file. Do not edit.
//

// clang-format off

#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_

#include <flutter/plugin_registry.h>

// Registers Flutter plugins.
void RegisterPlugins(flutter::PluginRegistry* registry);

#endif  // GENERATED_PLUGIN_REGISTRANT_
"@

# Write the stub files
[System.IO.File]::WriteAllText($generated_cc, $registrant_impl, $utf8NoBom)
[System.IO.File]::WriteAllText($generated_h, $registrant_header, $utf8NoBom)
Write-Host "Created stub plugin registrant files"

# Fix main.cpp to use the stub registration
$main_cpp = "windows/runner/main.cpp"
if (Test-Path $main_cpp) {
    $main_cpp_content = Get-Content $main_cpp -Raw
    
    # Check if we need to update the register plugins call
    if ($main_cpp_content -match "RegisterPlugins\(window\.GetRegistrar\(\)\)") {
        $updated_main = $main_cpp_content -replace "flutter::RegisterPlugins\(window\.GetRegistrar\(\)\);", @"
// Plugin registration is disabled for Windows
std::cout << "Windows plugins are disabled" << std::endl;
RegisterPlugins(window.GetRegistrar());
"@
        
        [System.IO.File]::WriteAllText($main_cpp, $updated_main, $utf8NoBom)
        Write-Host "Updated main.cpp to use stub plugin registration"
    }
}

Write-Host "====================================================="
Write-Host "Plugin fix complete. Now run:"
Write-Host "flutter clean"
Write-Host "flutter build windows --release"
Write-Host "=====================================================" 