import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'dart:ui';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

// Theme and Styling
import 'package:hive_ui/theme/app_colors.dart';
import 'package:hive_ui/extensions/glassmorphism_extension.dart';

// Models
import 'package:hive_ui/models/club.dart';
import 'package:hive_ui/models/space.dart';
import 'package:hive_ui/models/event.dart';

// State Providers
import 'package:hive_ui/providers/club_providers.dart';
import 'package:hive_ui/providers/event_providers.dart';

// Components
import 'package:hive_ui/features/clubs/presentation/components/club_header_component.dart';
import 'package:hive_ui/features/clubs/presentation/components/club_space_tile_factory.dart';

// Services
import 'package:hive_ui/services/club_service.dart';
import 'package:hive_ui/services/event_service.dart';

/// Provider to track whether the club is being managed by the current user
final isCurrentUserManagerProvider = StateProvider<bool>((ref) => false);

// Providers for club space functionality
/// Provider for accessing all events
final eventsProvider = FutureProvider<List<Event>>((ref) async {
  return await EventService.getEvents();
});

/// Provider for user's followed clubs
final userFollowedClubsProvider = StateProvider<List<String>>((ref) => []);

class ClubSpacePage extends ConsumerStatefulWidget {
  final String? clubId;
  final Club? club;
  final Space? space;
  final String? spaceType;

  const ClubSpacePage({
    super.key, 
    this.clubId, 
    this.club,
    this.space,
    this.spaceType,
  }) : assert(clubId != null || club != null || space != null, 
            'Must provide at least one of clubId, club, or space');

  @override
  ConsumerState<ClubSpacePage> createState() => _ClubSpacePageState();
}

class _ClubSpacePageState extends ConsumerState<ClubSpacePage> with SingleTickerProviderStateMixin {
  Club? _club;
  bool _loading = true;
  bool _isClubManager = false;
  bool _isFollowing = false;
  
  // Animation controller for smooth transitions
  late AnimationController _animationController;
  
  // UI state
  int _followerCount = 0;
  final int _mediaCount = 0;
  int _eventCount = 0;
  final bool _hasAttendedEvent = false;
  bool _chatUnlocked = false;
  
  // Events data
  List<Event> _events = [];
  
  // Dynamic message data
  String? _pinnedMessage;
  
  // Chat data
  final List<Map<String, dynamic>> _recentChatMessages = [];
  
  // Social links
  Map<String, String> _socialLinks = {};

  @override
  void initState() {
    super.initState();
    
    // Initialize animation controller
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    // Initialize club data and events
    _initializeData();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }
  
  // Fetch real events for this club
  Future<void> _fetchEvents() async {
    if (_club == null) return;
    
    try {
      // Use Firestore to directly fetch events associated with this club
      final eventsRef = FirebaseFirestore.instance.collection('events');
      List<Event> fetchedEvents = [];
      
      // Try multiple approaches in case some queries fail due to missing indexes
      try {
        // Approach 1: Find events where spaceId matches club.id (preferred)
        final spaceEventsSnapshot = await eventsRef
            .where('spaceId', isEqualTo: _club!.id)
            .get();
            
        if (spaceEventsSnapshot.docs.isNotEmpty) {
          fetchedEvents = spaceEventsSnapshot.docs
              .map((doc) => Event.fromJson(doc.data() as Map<String, dynamic>))
              .toList();
        }
      } catch (e) {
        debugPrint('Error with spaceId query: $e');
        // Continue to next approach
      }
      
      // If no events found by spaceId, try organizerId
      if (fetchedEvents.isEmpty) {
        try {
          final organizerEventsSnapshot = await eventsRef
              .where('organizerId', isEqualTo: _club!.id)
              .get();
              
          if (organizerEventsSnapshot.docs.isNotEmpty) {
            fetchedEvents = organizerEventsSnapshot.docs
                .map((doc) => Event.fromJson(doc.data() as Map<String, dynamic>))
                .toList();
          }
        } catch (e) {
          debugPrint('Error with organizerId query: $e');
          // Continue to next approach
        }
      }
      
      // If still no events, try matching by club name in organizer name field
      if (fetchedEvents.isEmpty) {
        try {
          final nameEventsSnapshot = await eventsRef
              .where('organizerName', isEqualTo: _club!.name)
              .get();
              
          if (nameEventsSnapshot.docs.isNotEmpty) {
            fetchedEvents = nameEventsSnapshot.docs
                .map((doc) => Event.fromJson(doc.data() as Map<String, dynamic>))
                .toList();
          }
        } catch (e) {
          debugPrint('Error with organizerName query: $e');
          // Continue to next approach
        }
      }
      
      // Last resort: query all events and filter in memory
      if (fetchedEvents.isEmpty) {
        try {
          // Get a limited set of all events (most recent ones)
          final allEventsSnapshot = await eventsRef
              .orderBy('startDate', descending: true)
              .limit(100)
              .get();
              
          if (allEventsSnapshot.docs.isNotEmpty) {
            // Filter in memory by matching club name or ID
            final allEvents = allEventsSnapshot.docs
                .map((doc) => Event.fromJson(doc.data() as Map<String, dynamic>))
                .toList();
                
            fetchedEvents = allEvents.where((event) {
              // Match by organizer name (case insensitive)
              if (event.organizerName.toLowerCase() == _club!.name.toLowerCase()) {
                return true;
              }
              
              // Match by tag containing club name or ID
              final hasTags = event.tags.any((tag) => 
                  tag.toLowerCase().contains(_club!.id.toLowerCase()) ||
                  tag.toLowerCase().contains(_club!.name.toLowerCase()));
                  
              return hasTags;
        }).toList();
          }
        } catch (e) {
          debugPrint('Error with fallback query: $e');
        }
      }
        
        // Sort events by date (soonest first)
      fetchedEvents.sort((a, b) => a.startDate.compareTo(b.startDate));
        
      // Update events list and count
      if (mounted) {
        setState(() {
          _events = fetchedEvents;
          _eventCount = _events.length;
        });
      }
    } catch (e) {
      debugPrint('Error fetching events for club: $e');
      // Initialize with empty list if there's an error
      _events = [];
    }
  }
  
  // Fetch club social links
  void _initializeSocialLinks() {
    if (_club == null) return;
    
    final Map<String, String> links = {};
    
    // Add website if available
    if (_club!.website != null && _club!.website!.isNotEmpty) {
      links['website'] = _club!.website!;
    }
    
    // Add email if available
    if (_club!.email != null && _club!.email!.isNotEmpty) {
      links['email'] = _club!.email!;
    }
    
    // Get social links from club data
    if (_club!.socialLinks.isNotEmpty) {
      for (final link in _club!.socialLinks) {
        if (link.contains('instagram')) {
          links['instagram'] = link;
        } else if (link.contains('discord')) {
          links['discord'] = link;
        } else if (link.contains('facebook')) {
          links['facebook'] = link;
        } else if (link.contains('twitter') || link.contains('x.com')) {
          links['twitter'] = link;
        } else if (link.contains('linkedin')) {
          links['linkedin'] = link;
        }
      }
    }
    
    // If we have no links, provide some defaults based on name
    if (links.isEmpty) {
      final slug = _club!.name.toLowerCase().replaceAll(RegExp(r'[^a-z0-9]'), '');
      links['website'] = 'https://www.buffalo.edu/studentlife/clubs/${slug}.html';
    }
    
    setState(() {
      _socialLinks = links;
    });
  }
  
  // Check if current user is a manager of this club
  Future<void> _checkUserPermissions() async {
    if (_club == null) return;

    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      
      if (currentUser != null) {
        bool isManager = false;
        
        // Check if user is in the leaders map of the club
        if (_club!.leaders.containsValue(currentUser.displayName) ||
            _club!.leaders.containsValue(currentUser.email)) {
          isManager = true;
        }
        
        // Check if user's account is verified and they are affiliated with this club
        final userProfileDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(currentUser.uid)
            .get();
        
        if (userProfileDoc.exists) {
          final userData = userProfileDoc.data();
          
          if (userData != null) {
            // Check if user is a club leader and affiliated with this club
            final isClubLeader = userData['isClubLeader'] == true;
            final clubAffiliation = userData['clubAffiliation'];
            
            // Check if user is verified
            final accountTierStr = userData['accountTier'];
            final isVerified = accountTierStr == 'verified' || accountTierStr == 'verifiedPlus';
            
            // User is a manager if they're a verified club leader affiliated with this club
            if (isVerified && isClubLeader && clubAffiliation == _club!.id) {
              isManager = true;
            }
          }
        }
        
        // Update provider state
        ref.read(isCurrentUserManagerProvider.notifier).state = isManager;
        
        setState(() {
          _isClubManager = isManager;
        });
        
        debugPrint('User manager status for ${_club!.name}: $_isClubManager');
      }
    } catch (e) {
      debugPrint('Error checking user permissions: $e');
      // Default to false for safety
      setState(() {
        _isClubManager = false;
      });
    }
  }
  
  // Check if user is following this club
  Future<void> _checkFollowStatus() async {
    if (_club == null) return;
    
    try {
      // Get followed clubs IDs
      final followedClubs = ref.read(userFollowedClubsProvider);
      
      setState(() {
        _isFollowing = followedClubs.contains(_club!.id);
        
        // Update follower count based on club data
        _followerCount = _club!.followersCount;
        if (_followerCount <= 0) {
          // Use memberCount as fallback
          _followerCount = _club!.memberCount;
        }
        
        // Ensure we have at least a count of 1 if member count is 0
        if (_followerCount <= 0) {
          _followerCount = 1;  // Default minimum to show "<10"
        }
        
        // Determine if chat is unlocked (requires at least 10 followers)
        _chatUnlocked = _followerCount >= 10;
      });
    } catch (e) {
      debugPrint('Error checking follow status: $e');
    }
  }
  
  // Get the pinned message for this club
  void _getPinnedMessage() {
    if (_club == null) return;
    
    // In a real app, this would come from a database
    // For now, we'll generate a contextual message based on club data
    String message = '';
    
    if (_club!.resources.isNotEmpty) {
      // Use a resource as a pinned message
      final resourceEntry = _club!.resources.entries.first;
      message = '${resourceEntry.key} available at ${resourceEntry.value}';
    } else if (_events.isNotEmpty) {
      // Use the next event as a pinned message
      final nextEvent = _events.first;
      final formatter = DateFormat('MMM d');
      message = 'Join us for ${nextEvent.title} on ${formatter.format(nextEvent.startDate)}!';
    } else if (_club!.requirements.isNotEmpty) {
      // Use membership requirements
      message = 'Membership requirements: ${_club!.requirements.first}';
    } else if (_club!.meetingTimes.isNotEmpty) {
      // Use meeting times
      message = 'We meet at: ${_club!.meetingTimes.first}';
    } else {
      // Default message
      message = 'Welcome to ${_club!.name}! Check out our upcoming events.';
    }
    
    setState(() {
      _pinnedMessage = message;
    });
  }

  void _initializeData() {
    // Determine if we already have a club or space
    if (widget.club != null) {
      // Use the club directly
      setState(() {
        _loading = false;
        _club = widget.club;
        
        // Initialize UI state based on club data
        _followerCount = widget.club!.memberCount;
        _chatUnlocked = _followerCount >= 10;
      });
      
      // Complete initialization with additional data
      _completeInitialization();
    } else if (widget.space != null) {
      // Convert space to club format
      setState(() {
        _loading = false;
        
        // Create club from space data
        _club = Club(
          id: widget.space!.id,
          name: widget.space!.name,
          description: widget.space!.description,
          category: widget.space!.tags.isNotEmpty ? widget.space!.tags.first : 'General',
          memberCount: widget.space!.metrics.memberCount ?? 0,
          status: widget.space!.isPrivate ? 'private' : 'active',
          icon: widget.space!.icon,
          imageUrl: widget.space!.imageUrl,
          createdAt: widget.space!.createdAt,
          updatedAt: widget.space!.updatedAt,
          tags: widget.space!.tags,
        );
        
        // Initialize UI state based on space data
        _followerCount = widget.space!.metrics.memberCount ?? 0;
        _eventCount = widget.space!.metrics.weeklyEvents;
        _chatUnlocked = _followerCount >= 10;
      });
      
      // Complete initialization with additional data
      _completeInitialization();
    } else if (widget.clubId != null) {
      // Fetch club data using clubId from provider
      // Use the spaceType parameter if provided, otherwise use a default
      final spaceType = widget.spaceType ?? 'spaces';
      
      // Log the spaceType passed to the page
      debugPrint('Fetching club with ID: ${widget.clubId} and type: $spaceType');
      
      // Check if the spaceType starts with "spacetype." and handle that format
      String displayType = spaceType;
      if (spaceType.toLowerCase().startsWith('spacetype.')) {
        // Use the plain name for logging
        displayType = spaceType.substring('spacetype.'.length);
        
        // Map to the correct type for path
        if (displayType.toLowerCase() == 'fraternityandsorority') {
          displayType = 'fraternity_and_sorority';
        } else if (displayType.toLowerCase() == 'universityorg') {
          displayType = 'university_organizations';
        }
      } else if (spaceType.startsWith('SpaceType.')) {
        // Handle capitalized SpaceType format
        displayType = spaceType.substring('SpaceType.'.length);
        
        // Map to the correct type for path
        if (displayType == 'fraternityAndSorority') {
          displayType = 'fraternity_and_sorority';
        } else if (displayType == 'universityOrg') {
          displayType = 'university_organizations';
        }
      }
      
      // Custom path construction for the club reference
      // This builds a path that matches the Firestore structure allowed by your security rules
      final String clubPath = 'spaces/$displayType/spaces/${widget.clubId}';
      
      debugPrint('Attempting to fetch club data from: $clubPath');
      
      ref.read(clubByIdProvider(widget.clubId!).future).then((club) {
        if (mounted) {
          setState(() {
            _loading = false;
            if (club != null) {
              _club = club;
              _followerCount = club.memberCount;
              _chatUnlocked = _followerCount >= 10;
            } else {
              // Fallback if club is null - use clubId to format a better name
              // Parse the clubId into a better name (assuming format like 'space_name_with_underscores')
              String displayName = "Unknown Club";
              if (widget.clubId!.contains('space_')) {
                displayName = widget.clubId!
                    .replaceFirst('space_', '')
                    .split('_')
                    .map((word) => word.isNotEmpty 
                        ? '${word[0].toUpperCase()}${word.substring(1)}' 
                        : '')
                    .join(' ');
              }
              
              _club = Club(
                id: widget.clubId!,
                name: displayName,
                description: 'Information for this club is not yet available.',
                category: 'General',
                memberCount: 0,
                status: 'active',
                icon: Icons.groups,
                createdAt: DateTime.now(),
                updatedAt: DateTime.now(),
              );
            }
          });
          
          // Complete initialization with additional data
          _completeInitialization();
        }
      }).catchError((error) {
        debugPrint('Error fetching club data: $error');
        if (mounted) {
          setState(() {
            _loading = false;
            
            // Parse the clubId into a better name for fallback
            String displayName = "Unknown Club";
            if (widget.clubId!.contains('space_')) {
              displayName = widget.clubId!
                  .replaceFirst('space_', '')
                  .split('_')
                  .map((word) => word.isNotEmpty 
                      ? '${word[0].toUpperCase()}${word.substring(1)}' 
                      : '')
                  .join(' ');
            }
            
            // Fallback club on error with better formatting
            _club = Club(
              id: widget.clubId!,
              name: displayName,
              description: 'We encountered an error loading data for this club. Please try again later.',
              category: 'General',
              memberCount: 0,
              status: 'error',
              icon: Icons.error_outline,
              createdAt: DateTime.now(),
              updatedAt: DateTime.now(),
            );
          });
          
          // Still try to complete initialization even with fallback club
          _completeInitialization();
        }
      });
    } else {
      // This should never happen due to assertion in constructor
      setState(() {
        _loading = false;
        _club = Club(
          id: 'not-found',
          name: 'Club Not Found',
          description: 'No valid club information was provided',
          category: 'Error',
          memberCount: 0,
          status: 'error',
          icon: Icons.error_outline,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
      });
    }
  }
  
  // Complete initialization with all additional data once club is loaded
  Future<void> _completeInitialization() async {
    // Fetch all required data in parallel
    await Future.wait([
      _fetchEvents(),
      _checkUserPermissions(),
      _checkFollowStatus(),
    ]);
    
    // Initialize UI components that depend on the above data
    _initializeSocialLinks();
    _getPinnedMessage();
    
    if (mounted) {
      setState(() {
        // Any final UI updates
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // Get screen size for responsive layout
    final screenSize = MediaQuery.of(context).size;
    final isMobile = screenSize.width < 600;

    return Scaffold(
      backgroundColor: Colors.black,
      body: _loading 
        ? _buildLoadingState()
        : SafeArea(
            bottom: false, // Allow content to extend behind bottom system UI
        child: CustomScrollView(
            physics: const BouncingScrollPhysics(),
            slivers: [
                // Header section with cover image
                SliverAppBar(
                  expandedHeight: isMobile ? 150 : 200,
                  pinned: true,
                  stretch: true,
                  backgroundColor: Colors.black,
                  leading: IconButton(
                    icon: const Icon(Icons.arrow_back),
                    onPressed: () => Navigator.pop(context),
                  ),
                  actions: [
                    if (_isClubManager)
                      IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: _handleEditClub,
                      ),
                  ],
                  flexibleSpace: FlexibleSpaceBar(
                    background: _buildClubHeader(),
                  ),
                ),
                
                // Club name, tagline, and join button
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Club name without join button (since it's in the header now)
                        Text(
                          _club?.name ?? 'Club Name',
                          style: GoogleFonts.inter(
                            fontSize: isMobile ? 24 : 28,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        
                        // Tagline or short description
                        if (_club?.description != null) ...[
                          const SizedBox(height: 8),
                          Text(
                            _getTagline(),
                            style: GoogleFonts.inter(
                              fontSize: isMobile ? 14 : 16,
                              color: Colors.white.withOpacity(0.8),
                              height: 1.4,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ],
                        
                        // Quick stats row
                        const SizedBox(height: 16),
                        _buildQuickStatsRow(),
                      ],
                    ),
                  ),
                ),
                
                // Upcoming Events Section
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              'Upcoming Events',
                              style: GoogleFonts.inter(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
          if (_events.isNotEmpty)
                              TextButton(
                                onPressed: _showEventsList,
                                child: Text(
                                  'See All',
                                  style: GoogleFonts.inter(
                                    fontSize: 14,
                                    color: AppColors.gold,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                          ],
                        ),
                        
                        const SizedBox(height: 12),
                        
                        _events.isNotEmpty 
                          ? _buildEventCard(_events.first)
                          : _buildEmptyEventsCard(),
                      ],
                    ),
                  ),
                ),
                
                // About Section
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                        Text(
                          'About',
                          style: GoogleFonts.inter(
          fontSize: 20,
                            fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
                        const SizedBox(height: 12),
                        _buildAboutCard(),
                      ],
                    ),
                  ),
                ),
                
                // Message Board Button
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: _buildMessageBoardButton(),
                  ),
                ),
                
                // Bottom padding for safe area
                SliverToBoxAdapter(
                  child: SizedBox(height: MediaQuery.of(context).padding.bottom + 32),
                ),
              ],
        ),
      ),
    );
  }
  
  // Updated header design with more immersive cover image and join button overlay
  Widget _buildClubHeader() {
    // Get image URL with fallback to default
    final imageUrl = _club?.imageUrl ?? 'https://firebasestorage.googleapis.com/v0/b/hive-6e377.appspot.com/o/images%2Fspaces%2Fdefault-space-bg.jpg?alt=media';
    
    return Stack(
      fit: StackFit.expand,
      children: [
        // Background image with a darker overlay
        Container(
          color: Colors.black,
          child: Opacity(
            opacity: 0.7,
            child: Image.network(
              imageUrl,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) => Container(
                color: Colors.grey[900],
                child: Icon(
                  Icons.image_not_supported_outlined,
                  size: 48,
                  color: Colors.grey[700],
                ),
              ),
            ),
          ),
        ),
        
        // Join button as overlay in the bottom right corner
        Positioned(
          bottom: 16,
          right: 16,
          child: _buildJoinButton(),
        ),
      ],
    );
  }
  
  // Format category name for better display
  String _getTagline() {
    if (_club?.description == null || _club!.description.isEmpty) {
      return 'No description available';
    }
    
    // If description is short, use it as is
    if (_club!.description.length < 100) {
      return _club!.description;
    }
    
    // Get first sentence or first 80 chars
    final firstSentence = _club!.description.split('.').first;
    if (firstSentence.length < 100) {
      return '$firstSentence.';
    }
    
    return '${_club!.description.substring(0, 80)}...';
  }

  // Quick stats row showing followers and events
  Widget _buildQuickStatsRow() {
    // Format the follower count to show "<10" for counts under 10
    final String formattedFollowerCount = _followerCount < 10 
        ? "<10" 
        : NumberFormat.compact().format(_followerCount);
    
    return Row(
      children: [
        _buildStatBadge(
          formattedFollowerCount,
          'Members',
          Icons.people_outline,
        ),
        const SizedBox(width: 16),
        _buildStatBadge(
          _eventCount.toString(),
          'Events',
          Icons.event_outlined,
        ),
      ],
    );
  }
  
  // Individual stat badge design
  Widget _buildStatBadge(String value, String label, IconData icon) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        decoration: BoxDecoration(
        color: AppColors.cardBackground.withOpacity(0.8),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
        ),
      ),
                            child: Row(
                              children: [
          Icon(
            icon,
            size: 16,
            color: Colors.white70,
          ),
          const SizedBox(width: 6),
                                Text(
            '$value $label',
                                  style: GoogleFonts.inter(
              fontSize: 13,
              fontWeight: FontWeight.w500,
              color: Colors.white.withOpacity(0.9),
                                  ),
                                ),
                              ],
      ),
    );
  }
  
  // Event card showing the next upcoming event - Updated to match brand aesthetic
  Widget _buildEventCard(Event event) {
    // Format date parts
    final day = DateFormat('d').format(event.startDate);
    final month = DateFormat('MMM').format(event.startDate);
    final time = DateFormat('h:mm a').format(event.startDate);
    
    return Container(
                            decoration: BoxDecoration(
        color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(16),
                              border: Border.all(
                                color: Colors.white.withOpacity(0.1),
                              ),
                            ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(16),
        child: InkWell(
          onTap: () {
            HapticFeedback.mediumImpact();
            // Navigate to event details
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Opening event: ${event.title}'),
                duration: const Duration(seconds: 2),
              ),
            );
          },
          borderRadius: BorderRadius.circular(16),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                // Event title and date badge
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Date container with gold accent
                Container(
                  width: 50,
                      height: 60,
                  decoration: BoxDecoration(
                        color: AppColors.cardHighlight,
                    borderRadius: BorderRadius.circular(10),
                    border: Border.all(
                      color: AppColors.gold.withOpacity(0.3),
                    ),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                        month,
                            style: GoogleFonts.inter(
                          fontSize: 12,
                        fontWeight: FontWeight.w500,
                        color: AppColors.gold,
                      ),
                    ),
                    Text(
                        day,
                            style: GoogleFonts.inter(
                              fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        ),
                      ),
                    ],
                  ),
      ),
                
                    const SizedBox(width: 16),
                
                // Event details
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
            children: [
        Text(
                        event.title,
                            style: GoogleFonts.inter(
                              fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
                            maxLines: 2,
                        overflow: TextOverflow.ellipsis,
        ),
                          const SizedBox(height: 8),
                      Row(
                        children: [
                          const Icon(
                            Icons.access_time,
                                size: 14,
                            color: Colors.white70,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            time,
                                style: GoogleFonts.inter(
                                  fontSize: 14,
                              color: Colors.white70,
                            ),
                          ),
                            ],
                          ),
        const SizedBox(height: 4),
        Row(
          children: [
                          const Icon(
                            Icons.location_on_outlined,
              size: 14,
                            color: Colors.white70,
                          ),
                          const SizedBox(width: 4),
                          Expanded(
              child: Text(
                              event.location,
                                  style: GoogleFonts.inter(
                  fontSize: 14,
                                color: Colors.white70,
                ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
          ),
        ),
      ],
      ),
                    ],
                  ),
                ),
                  ],
                ),
                
                const SizedBox(height: 16),
                const Divider(height: 1, color: Colors.white10),
                const SizedBox(height: 16),
                
                // Event description preview
                Text(
                  event.description,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: Colors.white.withOpacity(0.8),
                height: 1.4,
              ),
                  maxLines: 2,
              overflow: TextOverflow.ellipsis,
                ),
                
                const SizedBox(height: 16),
                
                // Action buttons
                _buildEventActionButtons(event),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  // Build event action buttons
  Widget _buildEventActionButtons(Event event) {
    final bool isCancelled = event.status == 'cancelled';
    
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (!isCancelled)
          OutlinedButton(
            onPressed: () {
              HapticFeedback.lightImpact();
              // Show event details
              debugPrint('Opening details for: ${event.title}');
            },
            style: OutlinedButton.styleFrom(
              foregroundColor: AppColors.gold,
              side: BorderSide(color: AppColors.gold.withOpacity(0.7), width: 1),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            ),
            child: Text(
              'Details',
              style: GoogleFonts.inter(
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        if (!isCancelled)
          const SizedBox(width: 8),
        IconButton(
          icon: const Icon(
            Icons.share_outlined,
            color: Colors.white70,
            size: 20,
          ),
          onPressed: () {
            HapticFeedback.lightImpact();
            // Share the event
            debugPrint('Sharing event: ${event.title}');
          },
        ),
      ],
    );
  }
  
  // Empty state for when there are no events - Updated to match brand aesthetic
  Widget _buildEmptyEventsCard() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
        ),
      ),
            child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
            Icons.event_busy_outlined,
            size: 40,
                      color: Colors.white.withOpacity(0.5),
                    ),
          const SizedBox(height: 16),
                    Text(
            'No upcoming events',
            style: GoogleFonts.inter(
              fontSize: 16,
              fontWeight: FontWeight.w500,
              color: Colors.white.withOpacity(0.8),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Check back later for new events',
            style: GoogleFonts.inter(
                            fontSize: 14,
                            color: Colors.white.withOpacity(0.5),
                          ),
            textAlign: TextAlign.center,
                ),
              ],
      ),
    );
  }
  
  // About card showing club information as a horizontal carousel
  Widget _buildAboutCard() {
    // Create a list of cards for the carousel with their corresponding titles and content
    final List<Map<String, dynamic>> carouselItems = [
      {
        'title': 'About',
        'icon': Icons.info_outline,
        'content': _club?.description ?? 'No description available yet',
        'section': 'description',
      },
      {
        'title': 'Meeting Times',
        'icon': Icons.access_time_outlined,
        'content': _club?.meetingTimes.isNotEmpty == true 
            ? _club!.meetingTimes.join('\n') 
            : 'No meeting times available',
        'section': 'meetingTimes',
      },
      {
        'title': 'Location',
        'icon': Icons.location_on_outlined,
        'content': _club?.location ?? 'Location not available',
        'section': 'location',
      },
      {
        'title': 'Contact',
        'icon': Icons.mail_outline,
        'content': _club?.email ?? 'Contact information not available',
        'section': 'contactInfo',
      },
    ];
    
    // Add requirements card if available
    if (_club?.requirements.isNotEmpty == true) {
      carouselItems.add({
        'title': 'Membership Requirements',
        'icon': Icons.verified_user_outlined,
        'content': _club!.requirements.join('\n'),
        'section': 'requirements',
      });
    }
    
    // Add mission & vision card if available
    if (_club?.mission != null || _club?.vision != null) {
      final List<String> missionVision = [];
      if (_club?.mission != null) {
        missionVision.add('Mission: ${_club!.mission}');
      }
      if (_club?.vision != null) {
        missionVision.add('Vision: ${_club!.vision}');
      }
      
      carouselItems.add({
        'title': 'Mission & Vision',
        'icon': Icons.lightbulb_outline,
        'content': missionVision.join('\n\n'),
        'section': 'missionVision',
      });
    }
    
    // Build a horizontal PageView as a carousel
    return Container(
      height: 250, // Fixed height for the carousel
      margin: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'About ${_club?.name ?? 'Club'}',
                  style: GoogleFonts.inter(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
                if (_isClubManager)
                  IconButton(
                    icon: const Icon(Icons.add, color: AppColors.gold),
                    onPressed: () {
                      HapticFeedback.mediumImpact();
                      _showAddSectionDialog();
                    },
                    tooltip: 'Add new section',
                  ),
              ],
            ),
          ),
          Expanded(
            child: PageView.builder(
              controller: PageController(viewportFraction: 0.9),
              itemCount: carouselItems.length,
              itemBuilder: (context, index) {
                final item = carouselItems[index];
                // Add padding to all items except the last one
                return Padding(
                  padding: EdgeInsets.only(
                    right: index == carouselItems.length - 1 ? 16 : 8,
                    left: index == 0 ? 16 : 8,
                  ),
                  child: _buildInfoCard(
                    title: item['title'],
                    content: item['content'],
                    icon: item['icon'],
                    isEditable: _isClubManager,
                    section: item['section'],
                  ),
                );
              },
            ),
          ),
          // Page indicator dots
          Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(
                carouselItems.length,
                (index) => Container(
                  width: 8,
                  height: 8,
                  margin: const EdgeInsets.symmetric(horizontal: 4),
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: AppColors.gold.withOpacity(0.5),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  // Individual info card for the carousel
  Widget _buildInfoCard({
    required String title,
    required String content,
    required IconData icon,
    bool isEditable = false,
    required String section,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
        ),
      ),
      child: Stack(
        children: [
          // Card content
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(
                      icon,
                      size: 18,
                      color: AppColors.gold.withOpacity(0.8),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      title,
                      style: GoogleFonts.inter(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Expanded(
                  child: SingleChildScrollView(
                    child: Text(
                      content,
                      style: GoogleFonts.inter(
                        fontSize: 14,
                        height: 1.5,
                        color: Colors.white.withOpacity(0.9),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
          
          // Edit button overlay for managers
          if (isEditable)
            Positioned(
              top: 8,
              right: 8,
              child: IconButton(
                icon: const Icon(
                  Icons.edit_outlined,
                  size: 18,
                  color: AppColors.gold,
                ),
                onPressed: () {
                  HapticFeedback.mediumImpact();
                  _showEditSectionDialog(section, title, content);
                },
                splashRadius: 20,
                tooltip: 'Edit ${title.toLowerCase()}',
              ),
            ),
        ],
      ),
    );
  }
  
  // Method to show edit section dialog
  void _showEditSectionDialog(String section, String title, String content) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Edit $title'),
        content: const Text(
          'This feature will allow club leaders to edit their space information.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }
  
  // Method to show add section dialog
  void _showAddSectionDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Add New Section'),
        content: const Text(
          'This feature will allow club leaders to add custom sections to their space.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  // Message board button - Updated to be locked/disabled as requested
  Widget _buildMessageBoardButton() {
    return ElevatedButton.icon(
      onPressed: null, // Set to null to make it disabled/locked
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.grey,
        elevation: 0,
        disabledBackgroundColor: Colors.transparent,
        disabledForegroundColor: Colors.grey.withOpacity(0.4),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30),
          side: BorderSide(
            color: Colors.grey.withOpacity(0.4),
            width: 1.5,
          ),
        ),
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
      ),
      icon: Icon(
        Icons.forum_outlined,
        color: Colors.grey.withOpacity(0.4),
        size: 20,
      ),
      label: Text(
        'Message Board',
        style: GoogleFonts.inter(
          fontSize: 16,
          fontWeight: FontWeight.w600,
          color: Colors.grey.withOpacity(0.4),
        ),
      ),
    );
  }
  
  // Show events list in a modal
  void _showEventsList() {
    // Group similar events together to create bundles
    final groupedEvents = _groupSimilarEvents(_events);
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
                backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
          decoration: BoxDecoration(
          color: AppColors.black,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // Handle bar
              Container(
              margin: const EdgeInsets.only(top: 10),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                color: Colors.grey[600],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              // Title
              Padding(
                padding: const EdgeInsets.all(16),
                            child: Row(
                              children: [
                  Text(
                    'All Events',
                    style: GoogleFonts.inter(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                  const Spacer(),
                                Text(
                    '${_events.length} event${_events.length != 1 ? 's' : ''}',
                    style: GoogleFonts.inter(
                      fontSize: 14,
                      color: Colors.white.withOpacity(0.5),
                                  ),
                                ),
                  ],
                ),
              ),
              
            // Event list
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                itemCount: groupedEvents.length,
                itemBuilder: (context, index) {
                  final eventGroup = groupedEvents[index];
                  
                  // If there's only one event in the group, show a normal event card
                  if (eventGroup.length == 1) {
                    return _buildEventListItem(eventGroup.first);
                  } else {
                    // Otherwise, show a bundled event card
                    return _buildBundledEventListItem(eventGroup);
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Event list item for the modal - Updated to match brand aesthetic
  Widget _buildEventListItem(Event event) {
    // Format date parts
    final day = DateFormat('d').format(event.startDate);
    final month = DateFormat('MMM').format(event.startDate);
    final time = DateFormat('h:mm a').format(event.startDate);
    
    // Check if event is cancelled
    final bool isCancelled = event.status == 'cancelled';
    
    return Stack(
      children: [
        Container(
          margin: const EdgeInsets.only(bottom: 12),
          decoration: BoxDecoration(
            color: AppColors.cardBackground,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: Colors.white.withOpacity(0.1),
            ),
          ),
          child: Material(
            color: Colors.transparent,
            borderRadius: BorderRadius.circular(16),
            child: InkWell(
      onTap: () {
                HapticFeedback.mediumImpact();
        Navigator.pop(context);
                // Navigate to event details
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
                    content: Text('Opening event: ${event.title}'),
            duration: const Duration(seconds: 2),
          ),
        );
      },
              borderRadius: BorderRadius.circular(16),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
        children: [
                    // Date container with gold accent
          Container(
                      width: 50,
                      height: 50,
            decoration: BoxDecoration(
                        color: AppColors.cardHighlight,
                        borderRadius: BorderRadius.circular(10),
                        border: Border.all(
                          color: isCancelled 
                              ? Colors.red.withOpacity(0.3) 
                              : AppColors.gold.withOpacity(0.3),
                        ),
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                        month,
                            style: GoogleFonts.inter(
                          fontSize: 12,
                        fontWeight: FontWeight.w500,
                        color: isCancelled ? Colors.red : AppColors.gold,
                      ),
                    ),
                    Text(
                        day,
                            style: GoogleFonts.inter(
                              fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: isCancelled 
                            ? Colors.white.withOpacity(0.6) 
                            : Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
                
                    const SizedBox(width: 16),
                
                // Event details
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
            children: [
        Text(
                        event.title,
                            style: GoogleFonts.inter(
                              fontSize: 16,
            fontWeight: FontWeight.w600,
                              color: isCancelled 
                                  ? Colors.white.withOpacity(0.6) 
                                  : Colors.white,
                              decoration: isCancelled 
                                  ? TextDecoration.lineThrough 
                                  : TextDecoration.none,
                            ),
                            maxLines: 2,
                        overflow: TextOverflow.ellipsis,
        ),
                          const SizedBox(height: 6),
                      Row(
                        children: [
                          const Icon(
                            Icons.access_time,
                                size: 12,
                            color: Colors.white70,
                          ),
                          const SizedBox(width: 4),
              Text(
                                time,
                                style: GoogleFonts.inter(
                                  fontSize: 12,
                              color: Colors.white70,
                            ),
                          ),
                            ],
                          ),
        const SizedBox(height: 4),
        Row(
          children: [
                          const Icon(
                            Icons.location_on_outlined,
                            size: 12,
                            color: Colors.white70,
                          ),
                          const SizedBox(width: 4),
                      Expanded(
                        child: Text(
                                            event.location,
                                            style: GoogleFonts.inter(
                                              fontSize: 12,
                                              color: Colors.white70,
                                            ),
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
              ),
            ],
          ),
                    ],
                  ),
                ),
                  ],
                ),
                
                const SizedBox(height: 16),
                const Divider(height: 1, color: Colors.white10),
                const SizedBox(height: 16),
                
                // Event description preview
                Text(
                  event.description,
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: Colors.white.withOpacity(0.8),
                height: 1.4,
              ),
                  maxLines: 2,
              overflow: TextOverflow.ellipsis,
                ),
                
                const SizedBox(height: 16),
                
                // Action buttons
                _buildEventActionButtons(event),
              ],
            ),
          ),
        ),
      ],
    );
  }
  
  // New method to build bundled event list items
  Widget _buildBundledEventListItem(List<Event> events) {
    // Sort events chronologically
    events.sort((a, b) => a.startDate.compareTo(b.startDate));
    
    // Get the first and last event for the date range
    final firstEvent = events.first;
    final lastEvent = events.last;
    
    // Format date parts for first event
    final firstDay = DateFormat('d').format(firstEvent.startDate);
    final firstMonth = DateFormat('MMM').format(firstEvent.startDate);
    
    // Format date for last event if it's different
    final String dateRangeText = firstEvent.startDate.day == lastEvent.startDate.day && 
                                firstEvent.startDate.month == lastEvent.startDate.month ?
                                '$firstMonth $firstDay' :
                                '$firstMonth $firstDay - ${DateFormat('MMM d').format(lastEvent.startDate)}';
    
    // Check if event is cancelled (in this example we'll use a status field, adapt based on your data model)
    final bool isCancelled = firstEvent.status == 'cancelled';
    
    return Stack(
      children: [
        Container(
          margin: const EdgeInsets.only(bottom: 12),
          decoration: BoxDecoration(
            color: AppColors.cardBackground,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: Colors.white.withOpacity(0.1),
            ),
          ),
          child: Material(
            color: Colors.transparent,
            borderRadius: BorderRadius.circular(16),
            child: InkWell(
              onTap: () {
                HapticFeedback.mediumImpact();
                _showBundledEventsDetail(events);
              },
              borderRadius: BorderRadius.circular(16),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Title row with event series badge
                    Row(
                      children: [
                        Icon(
                          isCancelled ? Icons.event_busy : Icons.event_repeat,
                          size: 14,
                          color: isCancelled ? Colors.red : AppColors.gold,
                        ),
                        const SizedBox(width: 6),
                        Text(
                          isCancelled ? 'Cancelled Series' : 'Event Series',
                          style: GoogleFonts.inter(
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                            color: isCancelled ? Colors.red : AppColors.gold,
                          ),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 8),
                    
                    // Event details and date in separate rows for better space utilization
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Date container
                        Container(
                          width: 45,
                          height: 55,
                          decoration: BoxDecoration(
                            color: AppColors.cardHighlight,
                            borderRadius: BorderRadius.circular(10),
                            border: Border.all(
                              color: isCancelled 
                                  ? Colors.red.withOpacity(0.3) 
                                  : AppColors.gold.withOpacity(0.3),
                            ),
                          ),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                firstMonth,
                                style: GoogleFonts.inter(
                                  fontSize: 12,
                                  fontWeight: FontWeight.w500,
                                  color: isCancelled ? Colors.red : AppColors.gold,
                                ),
                              ),
                              Text(
                                firstDay,
                                style: GoogleFonts.inter(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                  color: isCancelled 
                                      ? Colors.white.withOpacity(0.6) 
                                      : Colors.white,
                                ),
                              ),
                            ],
                          ),
                        ),
                        
                        const SizedBox(width: 12),
                        
                        // Event title and details
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Always show full title with no truncation
                              Text(
                                firstEvent.title,
                                style: GoogleFonts.inter(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: isCancelled 
                                      ? Colors.white.withOpacity(0.6) 
                                      : Colors.white,
                                  decoration: isCancelled 
                                      ? TextDecoration.lineThrough 
                                      : TextDecoration.none,
                                ),
                                softWrap: true,
                              ),
                              const SizedBox(height: 6),
                              Row(
                                children: [
                                  const Icon(
                                    Icons.date_range,
                                    size: 12,
                                    color: Colors.white70,
                                  ),
                                  const SizedBox(width: 4),
                                  Expanded(
                                    child: Text(
                                      dateRangeText,
                                      style: GoogleFonts.inter(
                                        fontSize: 12,
                                        color: Colors.white70,
                                      ),
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 4),
                              Row(
                                children: [
                                  const Icon(
                                    Icons.location_on_outlined,
                                    size: 12,
                                    color: Colors.white70,
                                  ),
                                  const SizedBox(width: 4),
                                  Expanded(
                                    child: Text(
                                      firstEvent.location,
                                      style: GoogleFonts.inter(
                                        fontSize: 12,
                                        color: Colors.white70,
                                      ),
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 4),
                              Row(
                                children: [
                                  Text(
                                    '${events.length} related events',
                                    style: GoogleFonts.inter(
                                      fontSize: 12,
                                      fontWeight: FontWeight.w400,
                                      color: Colors.white.withOpacity(0.6),
                                    ),
                                  ),
                                  const Spacer(),
                                  Icon(
                                    Icons.chevron_right,
                                    color: Colors.white.withOpacity(0.4),
                                    size: 20,
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
        
        // Number badge in top-right corner of entire card
        Positioned(
          top: -10,
          right: -4,
          child: Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              color: isCancelled ? Colors.red : AppColors.gold,
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 4,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
            child: Center(
              child: isCancelled
                ? const Icon(Icons.close, size: 14, color: Colors.white)
                : Text(
                    events.length.toString(),
                    style: GoogleFonts.inter(
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
            ),
          ),
        ),
      ],
    );
  }

  /// Groups similar events together to create bundles.
  /// 
  /// Events are considered similar and will be bundled if they meet these criteria:
  /// 1. Have identical titles OR very similar titles (similarity score > 0.8)
  /// 2. Share the same location 
  /// 3. Are part of a recurring pattern (weekly, monthly)
  /// 
  /// This helps present events in organized series instead of separate listings.
  List<List<Event>> _groupSimilarEvents(List<Event> events) {
    if (events.isEmpty) return [];
    
    // Sort events by date (soonest first)
    final sortedEvents = List<Event>.from(events);
    sortedEvents.sort((a, b) => a.startDate.compareTo(b.startDate));
    
    final List<List<Event>> groupedEvents = [];
    
    // Use a more sophisticated approach for grouping
    for (final event in sortedEvents) {
      bool addedToExistingGroup = false;
      
      // Try to find an existing group for this event
      for (final group in groupedEvents) {
        final firstEventInGroup = group.first;
        
        // Check if event belongs to this group based on stricter criteria
        final bool isSameEvent = 
            // Exact title match
            event.title.trim().toLowerCase() == firstEventInGroup.title.trim().toLowerCase() ||
            // Very similar title (higher threshold)
            _calculateSimilarity(event.title.toLowerCase(), firstEventInGroup.title.toLowerCase()) > 0.8;
            
        final bool isSameLocation = 
            event.location.trim().toLowerCase() == firstEventInGroup.location.trim().toLowerCase();
            
        final bool isPartOfSeries = _isLikelyPartOfSeries(event, firstEventInGroup);
        
        // Add to group if meets stricter criteria
        if ((isSameEvent && isSameLocation) || isPartOfSeries) {
          group.add(event);
          addedToExistingGroup = true;
          break;
        }
      }
      
      // If not added to an existing group, create a new one
      if (!addedToExistingGroup) {
        groupedEvents.add([event]);
      }
    }
    
    // After grouping, sort each group internally by date
    for (final group in groupedEvents) {
      if (group.length > 1) {
        group.sort((a, b) => a.startDate.compareTo(b.startDate));
      }
    }
    
    return groupedEvents;
  }
  
  /// Check if two events appear to be part of the same recurring series
  bool _isLikelyPartOfSeries(Event event1, Event event2) {
    // Very similar titles
    final titleSimilarity = _calculateSimilarity(
      event1.title.toLowerCase(), 
      event2.title.toLowerCase()
    );
    
    // Same day of week suggests weekly pattern
    final bool isSameDayOfWeek = event1.startDate.weekday == event2.startDate.weekday;
    
    // Similar times suggests a regular meeting
    final bool isSimilarTime = 
      (event1.startDate.hour == event2.startDate.hour) &&
      ((event1.startDate.minute - event2.startDate.minute).abs() < 10);
      
    // Similar content suggests related events
    final descriptionSimilarity = _calculateSimilarity(
      event1.description.toLowerCase(),
      event2.description.toLowerCase()
    );
    
    // Determine if part of series based on several factors
    return (titleSimilarity > 0.7 && isSameDayOfWeek) ||
           (titleSimilarity > 0.6 && isSameDayOfWeek && isSimilarTime) ||
           (titleSimilarity > 0.5 && descriptionSimilarity > 0.7);
  }

  /// Calculate text similarity using Levenshtein distance
  double _calculateSimilarity(String a, String b) {
    if (a.isEmpty || b.isEmpty) return 0.0;
    if (a == b) return 1.0;
    
    // Calculate Levenshtein distance
    final int distance = _levenshteinDistance(a, b);
    final int maxLength = a.length > b.length ? a.length : b.length;
    
    // Convert to similarity score (0-1 range)
    return 1.0 - (distance / maxLength);
  }

  /// Levenshtein distance implementation
  int _levenshteinDistance(String a, String b) {
    final List<List<int>> dp = List.generate(
      a.length + 1, 
      (i) => List.generate(b.length + 1, (j) => 0)
    );
    
    for (int i = 0; i <= a.length; i++) {
      dp[i][0] = i;
    }
    
    for (int j = 0; j <= b.length; j++) {
      dp[0][j] = j;
    }
    
    for (int i = 1; i <= a.length; i++) {
      for (int j = 1; j <= b.length; j++) {
        final int cost = a[i - 1] == b[j - 1] ? 0 : 1;
        dp[i][j] = [
          dp[i - 1][j] + 1,         // deletion
          dp[i][j - 1] + 1,         // insertion
          dp[i - 1][j - 1] + cost,  // substitution
        ].reduce((min, val) => val < min ? val : min);
      }
    }
    
    return dp[a.length][b.length];
  }

  // Method to show bundled events detail in a new modal
  void _showBundledEventsDetail(List<Event> events) {
    Navigator.pop(context);
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
          decoration: BoxDecoration(
          color: AppColors.black,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // Handle bar
              Container(
              margin: const EdgeInsets.only(top: 10),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                color: Colors.grey[600],
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              
              // Title
              Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                  Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
                            Icon(
                              Icons.event_repeat,
                              size: 16,
                  color: AppColors.gold,
              ),
              const SizedBox(width: 8),
              Text(
                              'Event Series',
                              style: GoogleFonts.inter(
                  fontSize: 14,
                    fontWeight: FontWeight.w600,
                  color: AppColors.gold,
                ),
              ),
                          ],
                        ),
                        const SizedBox(height: 4),
              Text(
                          events.first.title,
                          style: GoogleFonts.inter(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
              ),
            ],
          ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.pop(context),
                  ),
            ],
          ),
        ),
            
            Divider(color: Colors.white.withOpacity(0.1)),
            
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    '${events.length} related events',
                    style: GoogleFonts.inter(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.white.withOpacity(0.8),
                    ),
                  ),
                  TextButton.icon(
              onPressed: () {
                      HapticFeedback.selectionClick();
                      // Handle RSVP for all events
                      Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
                          content: Text('RSVP to all events in series'),
        duration: Duration(seconds: 2),
      ),
    );
              },
                    icon: const Icon(Icons.check_circle_outline, size: 16),
                    label: Text(
                      'RSVP to All',
                      style: GoogleFonts.inter(
                      fontSize: 14,
                        fontWeight: FontWeight.w500,
                    ),
                  ),
                    style: TextButton.styleFrom(
                      foregroundColor: AppColors.gold,
            ),
          ),
        ],
      ),
            ),
            
            // Event list
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                itemCount: events.length,
                itemBuilder: (context, index) {
                  final event = events[index];
                  
                  // Format date parts
                  final day = DateFormat('d').format(event.startDate);
                  final month = DateFormat('MMM').format(event.startDate);
                  final weekday = DateFormat('E').format(event.startDate);
                  final time = DateFormat('h:mm a').format(event.startDate);
                  
    return Container(
                    margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
                      color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: Colors.white.withOpacity(0.1),
        ),
      ),
      child: Material(
        color: Colors.transparent,
        borderRadius: BorderRadius.circular(16),
        child: InkWell(
                        onTap: () {
            HapticFeedback.mediumImpact();
                          Navigator.pop(context);
                          // Navigate to event details
            ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Opening event: ${event.title}'),
                              duration: const Duration(seconds: 2),
                            ),
                          );
                        },
          borderRadius: BorderRadius.circular(16),
          child: Padding(
            padding: const EdgeInsets.all(16),
                          child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                              // Date container with gold accent
                    Container(
                                width: 50,
                                height: 60,
                      decoration: BoxDecoration(
                                  color: AppColors.cardHighlight,
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(
                                    color: AppColors.gold.withOpacity(0.3),
                                  ),
                                ),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
                                      month,
                                      style: GoogleFonts.inter(
                                        fontSize: 12,
                                        fontWeight: FontWeight.w500,
                                        color: AppColors.gold,
                                      ),
                                    ),
                                    Text(
                                      day,
                                      style: GoogleFonts.inter(
                                        fontSize: 18,
                                        fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
                              ),
                              
                              const SizedBox(width: 16),
                              
                              // Event details
                      Expanded(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
                            Text(
                                      event.title,
                                      style: GoogleFonts.inter(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w600,
                                color: Colors.white,
          ),
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                    const SizedBox(height: 6),
          Row(
            children: [
                                        const Icon(
                                          Icons.access_time,
                                          size: 12,
                  color: Colors.white70,
                ),
                                        const SizedBox(width: 4),
              Text(
                                          time,
                                          style: GoogleFonts.inter(
                                fontSize: 12,
                  color: Colors.white70,
                ),
              ),
            ],
          ),
                                    const SizedBox(height: 4),
          Row(
            children: [
                                        const Icon(
                                          Icons.location_on_outlined,
                                          size: 12,
                                          color: Colors.white70,
                                        ),
                                        const SizedBox(width: 4),
                      Expanded(
                        child: Text(
                                            event.location,
                                            style: GoogleFonts.inter(
                                              fontSize: 12,
                                              color: Colors.white70,
                                            ),
                                            maxLines: 1,
                                            overflow: TextOverflow.ellipsis,
                                          ),
              ),
            ],
          ),
        ],
      ),
                              ),
                              
                              // RSVP button - made more compact for mobile
                              ElevatedButton(
                        onPressed: () {
                          HapticFeedback.mediumImpact();
                                  // RSVP to this individual event
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(
                                      content: Text('RSVP to: ${event.title}'),
                                      duration: const Duration(seconds: 2),
                                    ),
                                  );
                                },
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: AppColors.gold,
                                  foregroundColor: Colors.black,
                                  elevation: 0,
                                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 0),
                                  minimumSize: const Size(0, 32),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(16),
                                  ),
                        ),
        child: Text(
                                  'RSVP',
                                  style: GoogleFonts.inter(
                            fontSize: 12,
                                    fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ],
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
              ],
          ),
        ),
      );
    }

  // Handle edit club action
  void _handleEditClub() {
    HapticFeedback.mediumImpact();
    // Navigate to edit page
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Edit club details'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  // Get the appropriate icon for a social link type
  IconData _getSocialIcon(String linkType) {
    switch (linkType.toLowerCase()) {
      case 'discord':
        return Icons.discord;
      case 'instagram':
        return Icons.camera_alt_outlined;
      case 'facebook':
        return Icons.facebook;
      case 'twitter':
        return Icons.whatshot;
      case 'linkedin':
        return Icons.work_outline;
      case 'website':
        return Icons.language;
      case 'email':
        return Icons.mail_outline;
      default:
        return Icons.link;
    }
  }

  // Build the loading state
  Widget _buildLoadingState() {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
      children: [
            const CircularProgressIndicator(
              color: AppColors.gold,
              strokeWidth: 2,
            ),
            const SizedBox(height: 24),
        Text(
              'Loading club information...',
              style: GoogleFonts.inter(
            fontSize: 16,
                color: Colors.white.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Join button for the club - Updated to be glossy transparent
  Widget _buildJoinButton() {
    return ElevatedButton(
      onPressed: () {
        HapticFeedback.mediumImpact();
        setState(() {
          _isFollowing = !_isFollowing;
          _followerCount = _isFollowing ? _followerCount + 1 : _followerCount - 1;
          _chatUnlocked = _followerCount >= 10;
        });
      },
      style: ElevatedButton.styleFrom(
        // Use transparent background with a blur effect for glossy look
        backgroundColor: Colors.white.withOpacity(0.15),
        foregroundColor: Colors.white,
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30),
          side: BorderSide(
            color: Colors.white.withOpacity(0.3),
            width: 1,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        minimumSize: const Size(0, 36),
        shadowColor: Colors.black.withOpacity(0.3),
      ),
      child: Text(
        _isFollowing ? 'Joined' : 'Join',
        style: GoogleFonts.inter(
          fontWeight: FontWeight.w600,
          fontSize: 14,
          shadows: [
            Shadow(
              color: Colors.black.withOpacity(0.5),
              blurRadius: 3,
              offset: const Offset(0, 1),
            ),
          ],
        ),
      ),
    );
  }
} 