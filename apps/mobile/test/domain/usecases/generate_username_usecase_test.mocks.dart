// Mocks generated by Mockito 5.4.6 from annotations
// in hive_ui/test/domain/usecases/generate_username_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive_ui/core/result/result.dart' as _i2;
import 'package:hive_ui/domain/failures/auth_failure.dart' as _i5;
import 'package:hive_ui/domain/usecases/username_collision_detection_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<S, F> extends _i1.SmartFake implements _i2.Result<S, F> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UsernameCollisionDetectionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsernameCollisionDetectionUseCase extends _i1.Mock
    implements _i3.UsernameCollisionDetectionUseCase {
  MockUsernameCollisionDetectionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<bool, _i5.Failure>> isUsernameTaken(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #isUsernameTaken,
          [username],
        ),
        returnValue: _i4.Future<_i2.Result<bool, _i5.Failure>>.value(
            _FakeResult_0<bool, _i5.Failure>(
          this,
          Invocation.method(
            #isUsernameTaken,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool, _i5.Failure>>);

  @override
  _i4.Future<_i2.Result<String, _i5.Failure>> generateAlternativeUsername(
    String? username, {
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateAlternativeUsername,
          [username],
          {#maxAttempts: maxAttempts},
        ),
        returnValue: _i4.Future<_i2.Result<String, _i5.Failure>>.value(
            _FakeResult_0<String, _i5.Failure>(
          this,
          Invocation.method(
            #generateAlternativeUsername,
            [username],
            {#maxAttempts: maxAttempts},
          ),
        )),
      ) as _i4.Future<_i2.Result<String, _i5.Failure>>);

  @override
  _i4.Future<_i2.Result<double, _i5.Failure>> getCollisionRate({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollisionRate,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<_i2.Result<double, _i5.Failure>>.value(
            _FakeResult_0<double, _i5.Failure>(
          this,
          Invocation.method(
            #getCollisionRate,
            [],
            {
              #startDate: startDate,
              #endDate: endDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<double, _i5.Failure>>);
}
