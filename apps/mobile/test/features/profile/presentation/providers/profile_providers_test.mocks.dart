// Mocks generated by Mockito 5.4.6 from annotations
// in hive_ui/test/features/profile/presentation/providers/profile_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i5;

import 'package:hive_ui/features/profile/domain/entities/profile_analytics.dart'
    as _i9;
import 'package:hive_ui/features/profile/domain/entities/recommended_user.dart'
    as _i11;
import 'package:hive_ui/features/profile/domain/entities/user_profile.dart'
    as _i4;
import 'package:hive_ui/features/profile/domain/entities/user_search_filters.dart'
    as _i10;
import 'package:hive_ui/features/profile/domain/repositories/profile_repository.dart'
    as _i2;
import 'package:hive_ui/models/event.dart' as _i7;
import 'package:hive_ui/models/space.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileRepository extends _i1.Mock implements _i2.ProfileRepository {
  MockProfileRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.UserProfile?> getProfile([String? userId]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [userId],
        ),
        returnValue: _i3.Future<_i4.UserProfile?>.value(),
      ) as _i3.Future<_i4.UserProfile?>);

  @override
  _i3.Future<void> updateProfile(_i4.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [profile],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> createProfile(_i4.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProfile,
          [profile],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> uploadProfileImage(_i5.File? imageFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadProfileImage,
          [imageFile],
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #uploadProfileImage,
            [imageFile],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> removeProfileImage() => (super.noSuchMethod(
        Invocation.method(
          #removeProfileImage,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i4.UserProfile?> watchProfile(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchProfile,
          [userId],
        ),
        returnValue: _i3.Stream<_i4.UserProfile?>.empty(),
      ) as _i3.Stream<_i4.UserProfile?>);

  @override
  _i3.Future<void> updateUserInterests(
    String? userId,
    List<String>? interests,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserInterests,
          [
            userId,
            interests,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveEvent(
    String? userId,
    _i7.Event? event,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveEvent,
          [
            userId,
            event,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeEvent(
    String? userId,
    String? eventId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeEvent,
          [
            userId,
            eventId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i7.Event>> getSavedEvents(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedEvents,
          [userId],
        ),
        returnValue: _i3.Future<List<_i7.Event>>.value(<_i7.Event>[]),
      ) as _i3.Future<List<_i7.Event>>);

  @override
  _i3.Future<bool> isEventSaved(
    String? userId,
    String? eventId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEventSaved,
          [
            userId,
            eventId,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i8.Space>> getJoinedSpaces(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinedSpaces,
          [userId],
        ),
        returnValue: _i3.Future<List<_i8.Space>>.value(<_i8.Space>[]),
      ) as _i3.Future<List<_i8.Space>>);

  @override
  _i3.Future<_i9.ProfileAnalytics?> getProfileAnalytics(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfileAnalytics,
          [userId],
        ),
        returnValue: _i3.Future<_i9.ProfileAnalytics?>.value(),
      ) as _i3.Future<_i9.ProfileAnalytics?>);

  @override
  _i3.Future<void> recordProfileInteraction({
    required String? viewedUserId,
    required String? viewerId,
    required String? interactionType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordProfileInteraction,
          [],
          {
            #viewedUserId: viewedUserId,
            #viewerId: viewerId,
            #interactionType: interactionType,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.UserProfile>> searchProfiles({
    required String? query,
    _i10.UserSearchFilters? filters,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProfiles,
          [],
          {
            #query: query,
            #filters: filters,
            #limit: limit,
          },
        ),
        returnValue:
            _i3.Future<List<_i4.UserProfile>>.value(<_i4.UserProfile>[]),
      ) as _i3.Future<List<_i4.UserProfile>>);

  @override
  _i3.Future<List<_i11.RecommendedUser>> getRecommendedUsers({
    String? basedOnUserId,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedUsers,
          [],
          {
            #basedOnUserId: basedOnUserId,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<_i11.RecommendedUser>>.value(
            <_i11.RecommendedUser>[]),
      ) as _i3.Future<List<_i11.RecommendedUser>>);

  @override
  _i3.Future<void> updateUserRestriction(
    String? userId, {
    required bool? isRestricted,
    String? reason,
    DateTime? endDate,
    String? restrictedBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserRestriction,
          [userId],
          {
            #isRestricted: isRestricted,
            #reason: reason,
            #endDate: endDate,
            #restrictedBy: restrictedBy,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
