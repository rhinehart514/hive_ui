rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
    
    function isChatParticipant(chatId) {
      return isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
    }
    
    function isClubMember(clubId) {
      return isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/clubs/$(clubId)).data.memberIds;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // UPDATED: Allow updates during onboarding and by user for their own document
      allow update: if isAuthenticated() && 
                    (isOwner(userId) || 
                     // Allow any update during onboarding completion
                     (request.resource.data.onboardingCompleted == true && 
                      (resource.data == null || resource.data.onboardingCompleted != true)));
      allow delete: if isAdmin();
    }
    
    // Spaces collection
    match /spaces/{spaceId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
      allow delete: if isAdmin();
      
      // Allow read/write access to metadata subcollection
      match /metadata/{docId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Clubs collection
    match /clubs/{clubId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Leadership requests
    match /leadership_requests/{requestId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
    }
    
    // Messaging related collections
    match /chats/{chatId} {
      function isParticipant() {
        return isAuthenticated() && 
               (resource.data.participantIds == null || 
                request.auth.uid in resource.data.participantIds);
      }
      
      allow read: if isAuthenticated() && 
                 (isParticipant() || isAdmin());
      allow create: if isAuthenticated() && 
                   request.auth.uid in request.resource.data.participantIds;
      allow update: if isAuthenticated() && 
                   (isParticipant() || isAdmin());
      allow delete: if isAdmin();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                   (isParticipant() || isAdmin());
        allow create: if isAuthenticated() && 
                     request.auth.uid == request.resource.data.senderId;
        allow update, delete: if isAuthenticated() && 
                             (request.auth.uid == resource.data.senderId || isAdmin());
      }
    }
    
    // Typing status
    match /typing/{docId} {
      allow read, write: if isAuthenticated();
    }
    
    // Friend-related collections
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.senderId || 
                  request.auth.uid == resource.data.receiverId || 
                  isAdmin());
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.senderId;
      allow update, delete: if isAuthenticated() && 
                           (request.auth.uid == resource.data.senderId || 
                            request.auth.uid == resource.data.receiverId || 
                            isAdmin());
    }
    
    match /friends/{friendshipId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || 
                  request.auth.uid == resource.data.friendId || 
                  isAdmin());
      allow create, update, delete: if isAuthenticated() && 
                                   (request.auth.uid == request.resource.data.userId || 
                                    request.auth.uid == request.resource.data.friendId || 
                                    isAdmin());
    }
    
    // Profile sharing
    match /profile_shares/{shareId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.fromUserId || 
                  request.auth.uid == resource.data.toUserId || 
                  isAdmin());
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.fromUserId;
      allow update, delete: if isAdmin();
    }
    
    // User activities
    match /user_activities/{activityId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // Metadata collection for RSS sync
    match /metadata/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() || isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() || isAdmin();
    }
    
    // Auth conversions collection for account management
    match /auth_conversions/{docId} {
      allow read, write: if isAuthenticated();
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 