# HIVE UI Architecture and Design Patterns

## 1. Clean Architecture Implementation

### 1.1 Layer Separation
- Strictly enforce separation between presentation, domain, and data layers.
- Ensure unidirectional dependency flow: presentation → domain ← data.
- Use interfaces/abstractions in the domain layer for data layer implementations.
- Keep domain models free from framework-specific code or annotations.

### 1.2 Data Layer
- Implement repository pattern for all data sources (Firestore, REST APIs, local storage).
- Create data models (DTOs) for each external data source.
- Handle data mapping between DTOs and domain entities in repositories.
- Encapsulate all Firebase/Firestore interaction within dedicated repository classes.

### 1.3 Domain Layer
- Define business entities as immutable objects.
- Create use cases/interactors for each business operation.
- Implement domain-level validation logic.
- Keep business rules independent of UI or data source implementations.

### 1.4 Presentation Layer
- Use MVVM pattern with Riverpod for state management.
- Separate UI widgets from UI logic.
- Create dedicated ViewModels (StateNotifiers) for complex screens.
- Implement presentation-level mappers for converting domain entities to UI models.

## 2. Feature-First Organization

### 2.1 Feature Modules
- Organize code primarily by features rather than technical layers.
- Each feature should contain its own data, domain, and presentation components.
- Follow this directory structure for features:
  ```
  features/
    ├── feature_name/
    │    ├── data/          # Repositories and data sources
    │    │    ├── models/   # DTOs and mappers
    │    │    └── repositories/
    │    ├── domain/        # Business logic and entities
    │    │    ├── entities/ 
    │    │    ├── repositories/ # Repository interfaces
    │    │    └── usecases/
    │    └── presentation/  # UI components
    │         ├── pages/    # Screen-level widgets
    │         ├── widgets/  # Feature-specific UI components
    │         └── providers/ # State management
  ```

### 2.2 Shared Components
- Create a `core` module for shared utilities, base classes, and common abstractions.
- Develop reusable UI components in a separate `common/widgets` directory.
- Implement shared services in a `services` directory.
- Maintain theme and styling in a dedicated `theme` module.

## 3. Dependency Injection

### 3.1 Riverpod DI
- Use Riverpod as the primary dependency injection mechanism.
- Create provider packages for each feature.
- Implement factories for creating complex objects.
- Override providers for testing with mocked implementations.

### 3.2 Service Locator Pattern
- Avoid global service locators; prefer explicit dependency injection.
- If necessary, scope service locators to specific features.
- Register implementations during app initialization.
- Use lazy initialization for heavy services.

## 4. Navigation and Routing

### 4.1 Routing Strategy
- Implement named routes for all screens.
- Use GoRouter or similar dedicated routing package.
- Create route definitions in a centralized location.
- Implement deep linking support for key user flows.

### 4.2 Navigation Architecture
- Abstract navigation behind a service interface.
- Keep navigation logic out of widget classes.
- Implement proper route guards for authenticated routes.
- Handle navigation state persistence for app restarts.

## 5. State Management

### 5.1 Riverpod Implementation
- Use appropriate provider types for different state requirements:
  - Provider: For simple dependencies
  - StateProvider: For simple state
  - StateNotifierProvider: For complex state with operations
  - FutureProvider: For async data
  - StreamProvider: For reactive streams
- Implement proper provider scoping and disposal.

### 5.2 State Organization
- Create dedicated state classes for complex screens.
- Make state classes immutable with copyWith methods.
- Handle async state with AsyncValue pattern.
- Separate UI state from domain state.

## 6. Error Handling Architecture

### 6.1 Error Propagation
- Implement custom error types for different error categories.
- Use Either<Error, Success> pattern or Result objects for operations that can fail.
- Propagate errors up to the appropriate handling level.
- Log errors consistently using structured logging.

### 6.2 Exception Handling Strategy
- Handle exceptions at the boundary of each layer.
- Convert technical exceptions to domain-specific ones when crossing layer boundaries.
- Implement graceful fallbacks for non-critical errors.
- Design user-facing error messages centrally for consistency.

## 7. Testing Architecture

### 7.1 Testability Design
- Design for testability from the start.
- Create interfaces for external dependencies to enable mocking.
- Use constructor injection to make dependencies explicit and testable.
- Keep pure business logic separate from framework dependencies.

### 7.2 Test Types
- Implement unit tests for domain and data layers.
- Create widget tests for UI components.
- Develop integration tests for critical user flows.
- Use golden tests for UI component visual verification.

## 8. Firebase Integration

### 8.1 Database Design
- Define a clear Firestore schema with documented collections and fields.
- Implement proper security rules for all collections.
- Create type-safe model classes for Firestore documents.
- Use transactions for operations that need atomicity.

### 8.2 Authentication Flow
- Abstract Firebase Auth behind a service interface.
- Separate authentication state from user profile data.
- Implement proper error handling for auth operations.
- Design for multiple authentication providers (email, social, etc.). 