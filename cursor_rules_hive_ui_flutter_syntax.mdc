# HIVE UI Flutter Syntax and Linting Rules

## 1. Syntax Completion

### 1.1 Bracket and Parenthesis Completion
- Always ensure matching closing brackets and parentheses.
- Configure editor to automatically highlight matching brackets.
- Use code formatting before commits (Shift+Alt+F in VS Code).
- Add trailing commas to all parameter lists and collection literals for better formatting.

### 1.2 Widget Construction
- When using complex widget trees, format your code with proper indentation.
- For widgets with many parameters, place each parameter on a new line.
- Always add a trailing comma after the last parameter to help with formatting:
  ```dart
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      height: 200,
      color: Colors.blue,
      child: Text('Hello World'), // <- Trailing comma
    );
  }
  ```

## 2. Required Parameters

### 2.1 Widget Parameters
- Always provide all required parameters for widgets.
- Common widgets with required parameters:
  - `FutureBuilder` requires `future` and `builder`
  - `StreamBuilder` requires `stream` and `builder`
  - `ListView.builder` requires `itemBuilder` and usually `itemCount`
  - `showDialog` requires `context` and `builder`
  - `showModalBottomSheet` requires `context` and `builder`

### 2.2 Parameter Naming
- Be precise with named parameters, check documentation if unsure.
- Common parameter naming issues:
  - `onTap` vs `onPressed` vs `onSelect`
  - `child` vs `children`
  - `builder` vs `itemBuilder`
  - `color` vs `backgroundColor` vs `foregroundColor`

## 3. Constant Values

### 3.1 Const Correctness
- Use `const` for widget constructors when all parameters are known at compile time.
- If a widget contains references to non-constant values, don't use `const`.
- Common mistake: using const with closures or function references.
- Apply const to final instance creation expressions when possible.

### 3.2 Valid Constants
- Only primitive types, collections of constants, and const constructors can be used with `const`.
- Never try to make these constant:
  - Functions or closures
  - Instance methods
  - References to non-final variables
  - References to objects created at runtime

## 4. Import Management

### 4.1 Managing Imports
- Remove unused imports.
- Only import what you need.
- Organize imports regularly.
- Group imports in the following order:
  1. Dart SDK imports
  2. Flutter imports
  3. Third-party package imports
  4. Project imports

### 4.2 Import Conflicts
- Avoid duplicate functionality imports:
  - Don't import both `dart:ui` and `package:flutter/material.dart`
  - Don't import the same package with different paths
- Use package alias to resolve name conflicts:
  ```dart
  import 'package:package1/models.dart' as models1;
  import 'package:package2/models.dart' as models2;
  ```

## 5. Unused Code

### 5.1 Cleaning Unused Code
- Remove unused variables, functions, and classes.
- Comment out code during development instead of leaving it in place.
- If keeping code for future reference, clearly mark it with `// TODO: ` comments.
- Consider extracting experimental code to separate files if needed for later.

### 5.2 Dead Code Prevention
- Run Flutter analyze regularly to identify unused elements.
- Consider using a lint rule to highlight unused code.
- Review codebase periodically to remove accumulated dead code.
- Use version control for reverting rather than keeping commented code.

## 6. Async Context Usage

### 6.1 BuildContext Safety
- NEVER use BuildContext across async gaps without proper checks.
- Store needed data from the context before async operations.
- Always check `mounted` before using State.context after async operations.
- Extract Navigator operations to happen before async calls when possible.

### 6.2 Safe Patterns for Async UI
- CORRECT pattern for async operations with context:
  ```dart
  void _handleAsyncOperation(BuildContext context) async {
    // Store what you need from context
    final navigator = Navigator.of(context);
    
    // Perform async operation
    await Future.delayed(const Duration(seconds: 1));
    
    // Check if still mounted before using State.context
    if (!mounted) return;
    
    // Now use the stored navigator
    navigator.pop();
  }
  ```

## 7. Common Flutter Widget Errors

### 7.1 Widget Tree Issues
- Column/Row with unbounded children
  - Always constrain Columns/Rows inside a `SingleChildScrollView`, `Expanded`, or container with specific dimensions
  - Scrollable widgets like `ListView` need height constraints when inside Column
- Avoid nesting scrollable widgets without explicit dimensions

### 7.2 FutureBuilder/StreamBuilder
- Always include proper error handling in builders.
- Always handle loading states.
- Example:
  ```dart
  FutureBuilder<String>(
    future: fetchData(),
    builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.waiting) {
        return const CircularProgressIndicator();
      } else if (snapshot.hasError) {
        return Text('Error: ${snapshot.error}');
      } else if (snapshot.hasData) {
        return Text(snapshot.data!);
      } else {
        return const Text('No data');
      }
    },
  )
  ```

## 8. Null Safety Practices

### 8.1 Non-nullable Types
- Prefer non-nullable types by default.
- Only use nullable types when a value genuinely can be null.
- Use the late keyword for non-nullable variables that will be initialized before use.
- Provide default values for nullable parameters where possible.

### 8.2 Null Checking
- Use the null-aware operators appropriately:
  - `?.` for safe property access
  - `??` for providing fallbacks
  - `!` only when you're absolutely certain a value isn't null
- Avoid unnecessary null checks on non-nullable types. 